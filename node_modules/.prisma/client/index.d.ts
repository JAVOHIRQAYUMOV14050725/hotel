
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model hotel
 * 
 */
export type hotel = $Result.DefaultSelection<Prisma.$hotelPayload>
/**
 * Model room
 * 
 */
export type room = $Result.DefaultSelection<Prisma.$roomPayload>
/**
 * Model reservation
 * 
 */
export type reservation = $Result.DefaultSelection<Prisma.$reservationPayload>
/**
 * Model user
 * 
 */
export type user = $Result.DefaultSelection<Prisma.$userPayload>
/**
 * Model service
 * 
 */
export type service = $Result.DefaultSelection<Prisma.$servicePayload>
/**
 * Model service_reservation
 * 
 */
export type service_reservation = $Result.DefaultSelection<Prisma.$service_reservationPayload>
/**
 * Model review
 * 
 */
export type review = $Result.DefaultSelection<Prisma.$reviewPayload>
/**
 * Model promotion
 * 
 */
export type promotion = $Result.DefaultSelection<Prisma.$promotionPayload>
/**
 * Model payment_record
 * 
 */
export type payment_record = $Result.DefaultSelection<Prisma.$payment_recordPayload>
/**
 * Model room_amenity
 * 
 */
export type room_amenity = $Result.DefaultSelection<Prisma.$room_amenityPayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Hotels
 * const hotels = await prisma.hotel.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Hotels
   * const hotels = await prisma.hotel.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.hotel`: Exposes CRUD operations for the **hotel** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Hotels
    * const hotels = await prisma.hotel.findMany()
    * ```
    */
  get hotel(): Prisma.hotelDelegate<ExtArgs>;

  /**
   * `prisma.room`: Exposes CRUD operations for the **room** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Rooms
    * const rooms = await prisma.room.findMany()
    * ```
    */
  get room(): Prisma.roomDelegate<ExtArgs>;

  /**
   * `prisma.reservation`: Exposes CRUD operations for the **reservation** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Reservations
    * const reservations = await prisma.reservation.findMany()
    * ```
    */
  get reservation(): Prisma.reservationDelegate<ExtArgs>;

  /**
   * `prisma.user`: Exposes CRUD operations for the **user** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.userDelegate<ExtArgs>;

  /**
   * `prisma.service`: Exposes CRUD operations for the **service** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Services
    * const services = await prisma.service.findMany()
    * ```
    */
  get service(): Prisma.serviceDelegate<ExtArgs>;

  /**
   * `prisma.service_reservation`: Exposes CRUD operations for the **service_reservation** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Service_reservations
    * const service_reservations = await prisma.service_reservation.findMany()
    * ```
    */
  get service_reservation(): Prisma.service_reservationDelegate<ExtArgs>;

  /**
   * `prisma.review`: Exposes CRUD operations for the **review** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Reviews
    * const reviews = await prisma.review.findMany()
    * ```
    */
  get review(): Prisma.reviewDelegate<ExtArgs>;

  /**
   * `prisma.promotion`: Exposes CRUD operations for the **promotion** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Promotions
    * const promotions = await prisma.promotion.findMany()
    * ```
    */
  get promotion(): Prisma.promotionDelegate<ExtArgs>;

  /**
   * `prisma.payment_record`: Exposes CRUD operations for the **payment_record** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Payment_records
    * const payment_records = await prisma.payment_record.findMany()
    * ```
    */
  get payment_record(): Prisma.payment_recordDelegate<ExtArgs>;

  /**
   * `prisma.room_amenity`: Exposes CRUD operations for the **room_amenity** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Room_amenities
    * const room_amenities = await prisma.room_amenity.findMany()
    * ```
    */
  get room_amenity(): Prisma.room_amenityDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.19.1
   * Query Engine version: 69d742ee20b815d88e17e54db4a2a7a3b30324e3
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    hotel: 'hotel',
    room: 'room',
    reservation: 'reservation',
    user: 'user',
    service: 'service',
    service_reservation: 'service_reservation',
    review: 'review',
    promotion: 'promotion',
    payment_record: 'payment_record',
    room_amenity: 'room_amenity'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs, clientOptions: PrismaClientOptions }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], this['params']['clientOptions']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> = {
    meta: {
      modelProps: "hotel" | "room" | "reservation" | "user" | "service" | "service_reservation" | "review" | "promotion" | "payment_record" | "room_amenity"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      hotel: {
        payload: Prisma.$hotelPayload<ExtArgs>
        fields: Prisma.hotelFieldRefs
        operations: {
          findUnique: {
            args: Prisma.hotelFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$hotelPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.hotelFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$hotelPayload>
          }
          findFirst: {
            args: Prisma.hotelFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$hotelPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.hotelFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$hotelPayload>
          }
          findMany: {
            args: Prisma.hotelFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$hotelPayload>[]
          }
          create: {
            args: Prisma.hotelCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$hotelPayload>
          }
          createMany: {
            args: Prisma.hotelCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.hotelCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$hotelPayload>[]
          }
          delete: {
            args: Prisma.hotelDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$hotelPayload>
          }
          update: {
            args: Prisma.hotelUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$hotelPayload>
          }
          deleteMany: {
            args: Prisma.hotelDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.hotelUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.hotelUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$hotelPayload>
          }
          aggregate: {
            args: Prisma.HotelAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateHotel>
          }
          groupBy: {
            args: Prisma.hotelGroupByArgs<ExtArgs>
            result: $Utils.Optional<HotelGroupByOutputType>[]
          }
          count: {
            args: Prisma.hotelCountArgs<ExtArgs>
            result: $Utils.Optional<HotelCountAggregateOutputType> | number
          }
        }
      }
      room: {
        payload: Prisma.$roomPayload<ExtArgs>
        fields: Prisma.roomFieldRefs
        operations: {
          findUnique: {
            args: Prisma.roomFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$roomPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.roomFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$roomPayload>
          }
          findFirst: {
            args: Prisma.roomFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$roomPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.roomFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$roomPayload>
          }
          findMany: {
            args: Prisma.roomFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$roomPayload>[]
          }
          create: {
            args: Prisma.roomCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$roomPayload>
          }
          createMany: {
            args: Prisma.roomCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.roomCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$roomPayload>[]
          }
          delete: {
            args: Prisma.roomDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$roomPayload>
          }
          update: {
            args: Prisma.roomUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$roomPayload>
          }
          deleteMany: {
            args: Prisma.roomDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.roomUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.roomUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$roomPayload>
          }
          aggregate: {
            args: Prisma.RoomAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateRoom>
          }
          groupBy: {
            args: Prisma.roomGroupByArgs<ExtArgs>
            result: $Utils.Optional<RoomGroupByOutputType>[]
          }
          count: {
            args: Prisma.roomCountArgs<ExtArgs>
            result: $Utils.Optional<RoomCountAggregateOutputType> | number
          }
        }
      }
      reservation: {
        payload: Prisma.$reservationPayload<ExtArgs>
        fields: Prisma.reservationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.reservationFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$reservationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.reservationFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$reservationPayload>
          }
          findFirst: {
            args: Prisma.reservationFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$reservationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.reservationFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$reservationPayload>
          }
          findMany: {
            args: Prisma.reservationFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$reservationPayload>[]
          }
          create: {
            args: Prisma.reservationCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$reservationPayload>
          }
          createMany: {
            args: Prisma.reservationCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.reservationCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$reservationPayload>[]
          }
          delete: {
            args: Prisma.reservationDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$reservationPayload>
          }
          update: {
            args: Prisma.reservationUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$reservationPayload>
          }
          deleteMany: {
            args: Prisma.reservationDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.reservationUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.reservationUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$reservationPayload>
          }
          aggregate: {
            args: Prisma.ReservationAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateReservation>
          }
          groupBy: {
            args: Prisma.reservationGroupByArgs<ExtArgs>
            result: $Utils.Optional<ReservationGroupByOutputType>[]
          }
          count: {
            args: Prisma.reservationCountArgs<ExtArgs>
            result: $Utils.Optional<ReservationCountAggregateOutputType> | number
          }
        }
      }
      user: {
        payload: Prisma.$userPayload<ExtArgs>
        fields: Prisma.userFieldRefs
        operations: {
          findUnique: {
            args: Prisma.userFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$userPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.userFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$userPayload>
          }
          findFirst: {
            args: Prisma.userFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$userPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.userFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$userPayload>
          }
          findMany: {
            args: Prisma.userFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$userPayload>[]
          }
          create: {
            args: Prisma.userCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$userPayload>
          }
          createMany: {
            args: Prisma.userCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.userCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$userPayload>[]
          }
          delete: {
            args: Prisma.userDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$userPayload>
          }
          update: {
            args: Prisma.userUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$userPayload>
          }
          deleteMany: {
            args: Prisma.userDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.userUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.userUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$userPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.userGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.userCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      service: {
        payload: Prisma.$servicePayload<ExtArgs>
        fields: Prisma.serviceFieldRefs
        operations: {
          findUnique: {
            args: Prisma.serviceFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$servicePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.serviceFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$servicePayload>
          }
          findFirst: {
            args: Prisma.serviceFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$servicePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.serviceFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$servicePayload>
          }
          findMany: {
            args: Prisma.serviceFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$servicePayload>[]
          }
          create: {
            args: Prisma.serviceCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$servicePayload>
          }
          createMany: {
            args: Prisma.serviceCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.serviceCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$servicePayload>[]
          }
          delete: {
            args: Prisma.serviceDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$servicePayload>
          }
          update: {
            args: Prisma.serviceUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$servicePayload>
          }
          deleteMany: {
            args: Prisma.serviceDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.serviceUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.serviceUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$servicePayload>
          }
          aggregate: {
            args: Prisma.ServiceAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateService>
          }
          groupBy: {
            args: Prisma.serviceGroupByArgs<ExtArgs>
            result: $Utils.Optional<ServiceGroupByOutputType>[]
          }
          count: {
            args: Prisma.serviceCountArgs<ExtArgs>
            result: $Utils.Optional<ServiceCountAggregateOutputType> | number
          }
        }
      }
      service_reservation: {
        payload: Prisma.$service_reservationPayload<ExtArgs>
        fields: Prisma.service_reservationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.service_reservationFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$service_reservationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.service_reservationFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$service_reservationPayload>
          }
          findFirst: {
            args: Prisma.service_reservationFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$service_reservationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.service_reservationFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$service_reservationPayload>
          }
          findMany: {
            args: Prisma.service_reservationFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$service_reservationPayload>[]
          }
          create: {
            args: Prisma.service_reservationCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$service_reservationPayload>
          }
          createMany: {
            args: Prisma.service_reservationCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.service_reservationCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$service_reservationPayload>[]
          }
          delete: {
            args: Prisma.service_reservationDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$service_reservationPayload>
          }
          update: {
            args: Prisma.service_reservationUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$service_reservationPayload>
          }
          deleteMany: {
            args: Prisma.service_reservationDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.service_reservationUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.service_reservationUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$service_reservationPayload>
          }
          aggregate: {
            args: Prisma.Service_reservationAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateService_reservation>
          }
          groupBy: {
            args: Prisma.service_reservationGroupByArgs<ExtArgs>
            result: $Utils.Optional<Service_reservationGroupByOutputType>[]
          }
          count: {
            args: Prisma.service_reservationCountArgs<ExtArgs>
            result: $Utils.Optional<Service_reservationCountAggregateOutputType> | number
          }
        }
      }
      review: {
        payload: Prisma.$reviewPayload<ExtArgs>
        fields: Prisma.reviewFieldRefs
        operations: {
          findUnique: {
            args: Prisma.reviewFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$reviewPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.reviewFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$reviewPayload>
          }
          findFirst: {
            args: Prisma.reviewFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$reviewPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.reviewFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$reviewPayload>
          }
          findMany: {
            args: Prisma.reviewFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$reviewPayload>[]
          }
          create: {
            args: Prisma.reviewCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$reviewPayload>
          }
          createMany: {
            args: Prisma.reviewCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.reviewCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$reviewPayload>[]
          }
          delete: {
            args: Prisma.reviewDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$reviewPayload>
          }
          update: {
            args: Prisma.reviewUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$reviewPayload>
          }
          deleteMany: {
            args: Prisma.reviewDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.reviewUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.reviewUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$reviewPayload>
          }
          aggregate: {
            args: Prisma.ReviewAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateReview>
          }
          groupBy: {
            args: Prisma.reviewGroupByArgs<ExtArgs>
            result: $Utils.Optional<ReviewGroupByOutputType>[]
          }
          count: {
            args: Prisma.reviewCountArgs<ExtArgs>
            result: $Utils.Optional<ReviewCountAggregateOutputType> | number
          }
        }
      }
      promotion: {
        payload: Prisma.$promotionPayload<ExtArgs>
        fields: Prisma.promotionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.promotionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$promotionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.promotionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$promotionPayload>
          }
          findFirst: {
            args: Prisma.promotionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$promotionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.promotionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$promotionPayload>
          }
          findMany: {
            args: Prisma.promotionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$promotionPayload>[]
          }
          create: {
            args: Prisma.promotionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$promotionPayload>
          }
          createMany: {
            args: Prisma.promotionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.promotionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$promotionPayload>[]
          }
          delete: {
            args: Prisma.promotionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$promotionPayload>
          }
          update: {
            args: Prisma.promotionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$promotionPayload>
          }
          deleteMany: {
            args: Prisma.promotionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.promotionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.promotionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$promotionPayload>
          }
          aggregate: {
            args: Prisma.PromotionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePromotion>
          }
          groupBy: {
            args: Prisma.promotionGroupByArgs<ExtArgs>
            result: $Utils.Optional<PromotionGroupByOutputType>[]
          }
          count: {
            args: Prisma.promotionCountArgs<ExtArgs>
            result: $Utils.Optional<PromotionCountAggregateOutputType> | number
          }
        }
      }
      payment_record: {
        payload: Prisma.$payment_recordPayload<ExtArgs>
        fields: Prisma.payment_recordFieldRefs
        operations: {
          findUnique: {
            args: Prisma.payment_recordFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$payment_recordPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.payment_recordFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$payment_recordPayload>
          }
          findFirst: {
            args: Prisma.payment_recordFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$payment_recordPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.payment_recordFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$payment_recordPayload>
          }
          findMany: {
            args: Prisma.payment_recordFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$payment_recordPayload>[]
          }
          create: {
            args: Prisma.payment_recordCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$payment_recordPayload>
          }
          createMany: {
            args: Prisma.payment_recordCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.payment_recordCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$payment_recordPayload>[]
          }
          delete: {
            args: Prisma.payment_recordDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$payment_recordPayload>
          }
          update: {
            args: Prisma.payment_recordUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$payment_recordPayload>
          }
          deleteMany: {
            args: Prisma.payment_recordDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.payment_recordUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.payment_recordUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$payment_recordPayload>
          }
          aggregate: {
            args: Prisma.Payment_recordAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePayment_record>
          }
          groupBy: {
            args: Prisma.payment_recordGroupByArgs<ExtArgs>
            result: $Utils.Optional<Payment_recordGroupByOutputType>[]
          }
          count: {
            args: Prisma.payment_recordCountArgs<ExtArgs>
            result: $Utils.Optional<Payment_recordCountAggregateOutputType> | number
          }
        }
      }
      room_amenity: {
        payload: Prisma.$room_amenityPayload<ExtArgs>
        fields: Prisma.room_amenityFieldRefs
        operations: {
          findUnique: {
            args: Prisma.room_amenityFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$room_amenityPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.room_amenityFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$room_amenityPayload>
          }
          findFirst: {
            args: Prisma.room_amenityFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$room_amenityPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.room_amenityFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$room_amenityPayload>
          }
          findMany: {
            args: Prisma.room_amenityFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$room_amenityPayload>[]
          }
          create: {
            args: Prisma.room_amenityCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$room_amenityPayload>
          }
          createMany: {
            args: Prisma.room_amenityCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.room_amenityCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$room_amenityPayload>[]
          }
          delete: {
            args: Prisma.room_amenityDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$room_amenityPayload>
          }
          update: {
            args: Prisma.room_amenityUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$room_amenityPayload>
          }
          deleteMany: {
            args: Prisma.room_amenityDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.room_amenityUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.room_amenityUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$room_amenityPayload>
          }
          aggregate: {
            args: Prisma.Room_amenityAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateRoom_amenity>
          }
          groupBy: {
            args: Prisma.room_amenityGroupByArgs<ExtArgs>
            result: $Utils.Optional<Room_amenityGroupByOutputType>[]
          }
          count: {
            args: Prisma.room_amenityCountArgs<ExtArgs>
            result: $Utils.Optional<Room_amenityCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }


  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type HotelCountOutputType
   */

  export type HotelCountOutputType = {
    rooms: number
    services: number
    promotions: number
    reviews: number
  }

  export type HotelCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    rooms?: boolean | HotelCountOutputTypeCountRoomsArgs
    services?: boolean | HotelCountOutputTypeCountServicesArgs
    promotions?: boolean | HotelCountOutputTypeCountPromotionsArgs
    reviews?: boolean | HotelCountOutputTypeCountReviewsArgs
  }

  // Custom InputTypes
  /**
   * HotelCountOutputType without action
   */
  export type HotelCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HotelCountOutputType
     */
    select?: HotelCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * HotelCountOutputType without action
   */
  export type HotelCountOutputTypeCountRoomsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: roomWhereInput
  }

  /**
   * HotelCountOutputType without action
   */
  export type HotelCountOutputTypeCountServicesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: serviceWhereInput
  }

  /**
   * HotelCountOutputType without action
   */
  export type HotelCountOutputTypeCountPromotionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: promotionWhereInput
  }

  /**
   * HotelCountOutputType without action
   */
  export type HotelCountOutputTypeCountReviewsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: reviewWhereInput
  }


  /**
   * Count Type RoomCountOutputType
   */

  export type RoomCountOutputType = {
    amenities: number
    reservations: number
  }

  export type RoomCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    amenities?: boolean | RoomCountOutputTypeCountAmenitiesArgs
    reservations?: boolean | RoomCountOutputTypeCountReservationsArgs
  }

  // Custom InputTypes
  /**
   * RoomCountOutputType without action
   */
  export type RoomCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RoomCountOutputType
     */
    select?: RoomCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * RoomCountOutputType without action
   */
  export type RoomCountOutputTypeCountAmenitiesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: room_amenityWhereInput
  }

  /**
   * RoomCountOutputType without action
   */
  export type RoomCountOutputTypeCountReservationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: reservationWhereInput
  }


  /**
   * Count Type ReservationCountOutputType
   */

  export type ReservationCountOutputType = {
    services: number
    payment_records: number
  }

  export type ReservationCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    services?: boolean | ReservationCountOutputTypeCountServicesArgs
    payment_records?: boolean | ReservationCountOutputTypeCountPayment_recordsArgs
  }

  // Custom InputTypes
  /**
   * ReservationCountOutputType without action
   */
  export type ReservationCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReservationCountOutputType
     */
    select?: ReservationCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ReservationCountOutputType without action
   */
  export type ReservationCountOutputTypeCountServicesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: service_reservationWhereInput
  }

  /**
   * ReservationCountOutputType without action
   */
  export type ReservationCountOutputTypeCountPayment_recordsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: payment_recordWhereInput
  }


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    reservations: number
    reviews: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    reservations?: boolean | UserCountOutputTypeCountReservationsArgs
    reviews?: boolean | UserCountOutputTypeCountReviewsArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountReservationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: reservationWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountReviewsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: reviewWhereInput
  }


  /**
   * Count Type ServiceCountOutputType
   */

  export type ServiceCountOutputType = {
    reservations: number
  }

  export type ServiceCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    reservations?: boolean | ServiceCountOutputTypeCountReservationsArgs
  }

  // Custom InputTypes
  /**
   * ServiceCountOutputType without action
   */
  export type ServiceCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ServiceCountOutputType
     */
    select?: ServiceCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ServiceCountOutputType without action
   */
  export type ServiceCountOutputTypeCountReservationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: service_reservationWhereInput
  }


  /**
   * Models
   */

  /**
   * Model hotel
   */

  export type AggregateHotel = {
    _count: HotelCountAggregateOutputType | null
    _avg: HotelAvgAggregateOutputType | null
    _sum: HotelSumAggregateOutputType | null
    _min: HotelMinAggregateOutputType | null
    _max: HotelMaxAggregateOutputType | null
  }

  export type HotelAvgAggregateOutputType = {
    id: number | null
    rating: number | null
  }

  export type HotelSumAggregateOutputType = {
    id: number | null
    rating: number | null
  }

  export type HotelMinAggregateOutputType = {
    id: number | null
    name: string | null
    location: string | null
    description: string | null
    rating: number | null
  }

  export type HotelMaxAggregateOutputType = {
    id: number | null
    name: string | null
    location: string | null
    description: string | null
    rating: number | null
  }

  export type HotelCountAggregateOutputType = {
    id: number
    name: number
    location: number
    description: number
    rating: number
    _all: number
  }


  export type HotelAvgAggregateInputType = {
    id?: true
    rating?: true
  }

  export type HotelSumAggregateInputType = {
    id?: true
    rating?: true
  }

  export type HotelMinAggregateInputType = {
    id?: true
    name?: true
    location?: true
    description?: true
    rating?: true
  }

  export type HotelMaxAggregateInputType = {
    id?: true
    name?: true
    location?: true
    description?: true
    rating?: true
  }

  export type HotelCountAggregateInputType = {
    id?: true
    name?: true
    location?: true
    description?: true
    rating?: true
    _all?: true
  }

  export type HotelAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which hotel to aggregate.
     */
    where?: hotelWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of hotels to fetch.
     */
    orderBy?: hotelOrderByWithRelationInput | hotelOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: hotelWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` hotels from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` hotels.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned hotels
    **/
    _count?: true | HotelCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: HotelAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: HotelSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: HotelMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: HotelMaxAggregateInputType
  }

  export type GetHotelAggregateType<T extends HotelAggregateArgs> = {
        [P in keyof T & keyof AggregateHotel]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateHotel[P]>
      : GetScalarType<T[P], AggregateHotel[P]>
  }




  export type hotelGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: hotelWhereInput
    orderBy?: hotelOrderByWithAggregationInput | hotelOrderByWithAggregationInput[]
    by: HotelScalarFieldEnum[] | HotelScalarFieldEnum
    having?: hotelScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: HotelCountAggregateInputType | true
    _avg?: HotelAvgAggregateInputType
    _sum?: HotelSumAggregateInputType
    _min?: HotelMinAggregateInputType
    _max?: HotelMaxAggregateInputType
  }

  export type HotelGroupByOutputType = {
    id: number
    name: string
    location: string
    description: string
    rating: number
    _count: HotelCountAggregateOutputType | null
    _avg: HotelAvgAggregateOutputType | null
    _sum: HotelSumAggregateOutputType | null
    _min: HotelMinAggregateOutputType | null
    _max: HotelMaxAggregateOutputType | null
  }

  type GetHotelGroupByPayload<T extends hotelGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<HotelGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof HotelGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], HotelGroupByOutputType[P]>
            : GetScalarType<T[P], HotelGroupByOutputType[P]>
        }
      >
    >


  export type hotelSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    location?: boolean
    description?: boolean
    rating?: boolean
    rooms?: boolean | hotel$roomsArgs<ExtArgs>
    services?: boolean | hotel$servicesArgs<ExtArgs>
    promotions?: boolean | hotel$promotionsArgs<ExtArgs>
    reviews?: boolean | hotel$reviewsArgs<ExtArgs>
    _count?: boolean | HotelCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["hotel"]>

  export type hotelSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    location?: boolean
    description?: boolean
    rating?: boolean
  }, ExtArgs["result"]["hotel"]>

  export type hotelSelectScalar = {
    id?: boolean
    name?: boolean
    location?: boolean
    description?: boolean
    rating?: boolean
  }

  export type hotelInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    rooms?: boolean | hotel$roomsArgs<ExtArgs>
    services?: boolean | hotel$servicesArgs<ExtArgs>
    promotions?: boolean | hotel$promotionsArgs<ExtArgs>
    reviews?: boolean | hotel$reviewsArgs<ExtArgs>
    _count?: boolean | HotelCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type hotelIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $hotelPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "hotel"
    objects: {
      rooms: Prisma.$roomPayload<ExtArgs>[]
      services: Prisma.$servicePayload<ExtArgs>[]
      promotions: Prisma.$promotionPayload<ExtArgs>[]
      reviews: Prisma.$reviewPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      location: string
      description: string
      rating: number
    }, ExtArgs["result"]["hotel"]>
    composites: {}
  }

  type hotelGetPayload<S extends boolean | null | undefined | hotelDefaultArgs> = $Result.GetResult<Prisma.$hotelPayload, S>

  type hotelCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<hotelFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: HotelCountAggregateInputType | true
    }

  export interface hotelDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['hotel'], meta: { name: 'hotel' } }
    /**
     * Find zero or one Hotel that matches the filter.
     * @param {hotelFindUniqueArgs} args - Arguments to find a Hotel
     * @example
     * // Get one Hotel
     * const hotel = await prisma.hotel.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends hotelFindUniqueArgs>(args: SelectSubset<T, hotelFindUniqueArgs<ExtArgs>>): Prisma__hotelClient<$Result.GetResult<Prisma.$hotelPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Hotel that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {hotelFindUniqueOrThrowArgs} args - Arguments to find a Hotel
     * @example
     * // Get one Hotel
     * const hotel = await prisma.hotel.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends hotelFindUniqueOrThrowArgs>(args: SelectSubset<T, hotelFindUniqueOrThrowArgs<ExtArgs>>): Prisma__hotelClient<$Result.GetResult<Prisma.$hotelPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Hotel that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {hotelFindFirstArgs} args - Arguments to find a Hotel
     * @example
     * // Get one Hotel
     * const hotel = await prisma.hotel.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends hotelFindFirstArgs>(args?: SelectSubset<T, hotelFindFirstArgs<ExtArgs>>): Prisma__hotelClient<$Result.GetResult<Prisma.$hotelPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Hotel that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {hotelFindFirstOrThrowArgs} args - Arguments to find a Hotel
     * @example
     * // Get one Hotel
     * const hotel = await prisma.hotel.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends hotelFindFirstOrThrowArgs>(args?: SelectSubset<T, hotelFindFirstOrThrowArgs<ExtArgs>>): Prisma__hotelClient<$Result.GetResult<Prisma.$hotelPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Hotels that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {hotelFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Hotels
     * const hotels = await prisma.hotel.findMany()
     * 
     * // Get first 10 Hotels
     * const hotels = await prisma.hotel.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const hotelWithIdOnly = await prisma.hotel.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends hotelFindManyArgs>(args?: SelectSubset<T, hotelFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$hotelPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Hotel.
     * @param {hotelCreateArgs} args - Arguments to create a Hotel.
     * @example
     * // Create one Hotel
     * const Hotel = await prisma.hotel.create({
     *   data: {
     *     // ... data to create a Hotel
     *   }
     * })
     * 
     */
    create<T extends hotelCreateArgs>(args: SelectSubset<T, hotelCreateArgs<ExtArgs>>): Prisma__hotelClient<$Result.GetResult<Prisma.$hotelPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Hotels.
     * @param {hotelCreateManyArgs} args - Arguments to create many Hotels.
     * @example
     * // Create many Hotels
     * const hotel = await prisma.hotel.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends hotelCreateManyArgs>(args?: SelectSubset<T, hotelCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Hotels and returns the data saved in the database.
     * @param {hotelCreateManyAndReturnArgs} args - Arguments to create many Hotels.
     * @example
     * // Create many Hotels
     * const hotel = await prisma.hotel.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Hotels and only return the `id`
     * const hotelWithIdOnly = await prisma.hotel.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends hotelCreateManyAndReturnArgs>(args?: SelectSubset<T, hotelCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$hotelPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Hotel.
     * @param {hotelDeleteArgs} args - Arguments to delete one Hotel.
     * @example
     * // Delete one Hotel
     * const Hotel = await prisma.hotel.delete({
     *   where: {
     *     // ... filter to delete one Hotel
     *   }
     * })
     * 
     */
    delete<T extends hotelDeleteArgs>(args: SelectSubset<T, hotelDeleteArgs<ExtArgs>>): Prisma__hotelClient<$Result.GetResult<Prisma.$hotelPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Hotel.
     * @param {hotelUpdateArgs} args - Arguments to update one Hotel.
     * @example
     * // Update one Hotel
     * const hotel = await prisma.hotel.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends hotelUpdateArgs>(args: SelectSubset<T, hotelUpdateArgs<ExtArgs>>): Prisma__hotelClient<$Result.GetResult<Prisma.$hotelPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Hotels.
     * @param {hotelDeleteManyArgs} args - Arguments to filter Hotels to delete.
     * @example
     * // Delete a few Hotels
     * const { count } = await prisma.hotel.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends hotelDeleteManyArgs>(args?: SelectSubset<T, hotelDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Hotels.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {hotelUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Hotels
     * const hotel = await prisma.hotel.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends hotelUpdateManyArgs>(args: SelectSubset<T, hotelUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Hotel.
     * @param {hotelUpsertArgs} args - Arguments to update or create a Hotel.
     * @example
     * // Update or create a Hotel
     * const hotel = await prisma.hotel.upsert({
     *   create: {
     *     // ... data to create a Hotel
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Hotel we want to update
     *   }
     * })
     */
    upsert<T extends hotelUpsertArgs>(args: SelectSubset<T, hotelUpsertArgs<ExtArgs>>): Prisma__hotelClient<$Result.GetResult<Prisma.$hotelPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Hotels.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {hotelCountArgs} args - Arguments to filter Hotels to count.
     * @example
     * // Count the number of Hotels
     * const count = await prisma.hotel.count({
     *   where: {
     *     // ... the filter for the Hotels we want to count
     *   }
     * })
    **/
    count<T extends hotelCountArgs>(
      args?: Subset<T, hotelCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], HotelCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Hotel.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HotelAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends HotelAggregateArgs>(args: Subset<T, HotelAggregateArgs>): Prisma.PrismaPromise<GetHotelAggregateType<T>>

    /**
     * Group by Hotel.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {hotelGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends hotelGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: hotelGroupByArgs['orderBy'] }
        : { orderBy?: hotelGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, hotelGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetHotelGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the hotel model
   */
  readonly fields: hotelFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for hotel.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__hotelClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    rooms<T extends hotel$roomsArgs<ExtArgs> = {}>(args?: Subset<T, hotel$roomsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$roomPayload<ExtArgs>, T, "findMany"> | Null>
    services<T extends hotel$servicesArgs<ExtArgs> = {}>(args?: Subset<T, hotel$servicesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$servicePayload<ExtArgs>, T, "findMany"> | Null>
    promotions<T extends hotel$promotionsArgs<ExtArgs> = {}>(args?: Subset<T, hotel$promotionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$promotionPayload<ExtArgs>, T, "findMany"> | Null>
    reviews<T extends hotel$reviewsArgs<ExtArgs> = {}>(args?: Subset<T, hotel$reviewsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$reviewPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the hotel model
   */ 
  interface hotelFieldRefs {
    readonly id: FieldRef<"hotel", 'Int'>
    readonly name: FieldRef<"hotel", 'String'>
    readonly location: FieldRef<"hotel", 'String'>
    readonly description: FieldRef<"hotel", 'String'>
    readonly rating: FieldRef<"hotel", 'Float'>
  }
    

  // Custom InputTypes
  /**
   * hotel findUnique
   */
  export type hotelFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the hotel
     */
    select?: hotelSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: hotelInclude<ExtArgs> | null
    /**
     * Filter, which hotel to fetch.
     */
    where: hotelWhereUniqueInput
  }

  /**
   * hotel findUniqueOrThrow
   */
  export type hotelFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the hotel
     */
    select?: hotelSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: hotelInclude<ExtArgs> | null
    /**
     * Filter, which hotel to fetch.
     */
    where: hotelWhereUniqueInput
  }

  /**
   * hotel findFirst
   */
  export type hotelFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the hotel
     */
    select?: hotelSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: hotelInclude<ExtArgs> | null
    /**
     * Filter, which hotel to fetch.
     */
    where?: hotelWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of hotels to fetch.
     */
    orderBy?: hotelOrderByWithRelationInput | hotelOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for hotels.
     */
    cursor?: hotelWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` hotels from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` hotels.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of hotels.
     */
    distinct?: HotelScalarFieldEnum | HotelScalarFieldEnum[]
  }

  /**
   * hotel findFirstOrThrow
   */
  export type hotelFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the hotel
     */
    select?: hotelSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: hotelInclude<ExtArgs> | null
    /**
     * Filter, which hotel to fetch.
     */
    where?: hotelWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of hotels to fetch.
     */
    orderBy?: hotelOrderByWithRelationInput | hotelOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for hotels.
     */
    cursor?: hotelWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` hotels from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` hotels.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of hotels.
     */
    distinct?: HotelScalarFieldEnum | HotelScalarFieldEnum[]
  }

  /**
   * hotel findMany
   */
  export type hotelFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the hotel
     */
    select?: hotelSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: hotelInclude<ExtArgs> | null
    /**
     * Filter, which hotels to fetch.
     */
    where?: hotelWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of hotels to fetch.
     */
    orderBy?: hotelOrderByWithRelationInput | hotelOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing hotels.
     */
    cursor?: hotelWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` hotels from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` hotels.
     */
    skip?: number
    distinct?: HotelScalarFieldEnum | HotelScalarFieldEnum[]
  }

  /**
   * hotel create
   */
  export type hotelCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the hotel
     */
    select?: hotelSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: hotelInclude<ExtArgs> | null
    /**
     * The data needed to create a hotel.
     */
    data: XOR<hotelCreateInput, hotelUncheckedCreateInput>
  }

  /**
   * hotel createMany
   */
  export type hotelCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many hotels.
     */
    data: hotelCreateManyInput | hotelCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * hotel createManyAndReturn
   */
  export type hotelCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the hotel
     */
    select?: hotelSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many hotels.
     */
    data: hotelCreateManyInput | hotelCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * hotel update
   */
  export type hotelUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the hotel
     */
    select?: hotelSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: hotelInclude<ExtArgs> | null
    /**
     * The data needed to update a hotel.
     */
    data: XOR<hotelUpdateInput, hotelUncheckedUpdateInput>
    /**
     * Choose, which hotel to update.
     */
    where: hotelWhereUniqueInput
  }

  /**
   * hotel updateMany
   */
  export type hotelUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update hotels.
     */
    data: XOR<hotelUpdateManyMutationInput, hotelUncheckedUpdateManyInput>
    /**
     * Filter which hotels to update
     */
    where?: hotelWhereInput
  }

  /**
   * hotel upsert
   */
  export type hotelUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the hotel
     */
    select?: hotelSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: hotelInclude<ExtArgs> | null
    /**
     * The filter to search for the hotel to update in case it exists.
     */
    where: hotelWhereUniqueInput
    /**
     * In case the hotel found by the `where` argument doesn't exist, create a new hotel with this data.
     */
    create: XOR<hotelCreateInput, hotelUncheckedCreateInput>
    /**
     * In case the hotel was found with the provided `where` argument, update it with this data.
     */
    update: XOR<hotelUpdateInput, hotelUncheckedUpdateInput>
  }

  /**
   * hotel delete
   */
  export type hotelDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the hotel
     */
    select?: hotelSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: hotelInclude<ExtArgs> | null
    /**
     * Filter which hotel to delete.
     */
    where: hotelWhereUniqueInput
  }

  /**
   * hotel deleteMany
   */
  export type hotelDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which hotels to delete
     */
    where?: hotelWhereInput
  }

  /**
   * hotel.rooms
   */
  export type hotel$roomsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the room
     */
    select?: roomSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: roomInclude<ExtArgs> | null
    where?: roomWhereInput
    orderBy?: roomOrderByWithRelationInput | roomOrderByWithRelationInput[]
    cursor?: roomWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RoomScalarFieldEnum | RoomScalarFieldEnum[]
  }

  /**
   * hotel.services
   */
  export type hotel$servicesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the service
     */
    select?: serviceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: serviceInclude<ExtArgs> | null
    where?: serviceWhereInput
    orderBy?: serviceOrderByWithRelationInput | serviceOrderByWithRelationInput[]
    cursor?: serviceWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ServiceScalarFieldEnum | ServiceScalarFieldEnum[]
  }

  /**
   * hotel.promotions
   */
  export type hotel$promotionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the promotion
     */
    select?: promotionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: promotionInclude<ExtArgs> | null
    where?: promotionWhereInput
    orderBy?: promotionOrderByWithRelationInput | promotionOrderByWithRelationInput[]
    cursor?: promotionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PromotionScalarFieldEnum | PromotionScalarFieldEnum[]
  }

  /**
   * hotel.reviews
   */
  export type hotel$reviewsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the review
     */
    select?: reviewSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: reviewInclude<ExtArgs> | null
    where?: reviewWhereInput
    orderBy?: reviewOrderByWithRelationInput | reviewOrderByWithRelationInput[]
    cursor?: reviewWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ReviewScalarFieldEnum | ReviewScalarFieldEnum[]
  }

  /**
   * hotel without action
   */
  export type hotelDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the hotel
     */
    select?: hotelSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: hotelInclude<ExtArgs> | null
  }


  /**
   * Model room
   */

  export type AggregateRoom = {
    _count: RoomCountAggregateOutputType | null
    _avg: RoomAvgAggregateOutputType | null
    _sum: RoomSumAggregateOutputType | null
    _min: RoomMinAggregateOutputType | null
    _max: RoomMaxAggregateOutputType | null
  }

  export type RoomAvgAggregateOutputType = {
    id: number | null
    hotel_id: number | null
    roomNumber: number | null
    price: number | null
  }

  export type RoomSumAggregateOutputType = {
    id: number | null
    hotel_id: number | null
    roomNumber: number | null
    price: number | null
  }

  export type RoomMinAggregateOutputType = {
    id: number | null
    hotel_id: number | null
    room_type: string | null
    roomNumber: number | null
    price: number | null
    availability: boolean | null
  }

  export type RoomMaxAggregateOutputType = {
    id: number | null
    hotel_id: number | null
    room_type: string | null
    roomNumber: number | null
    price: number | null
    availability: boolean | null
  }

  export type RoomCountAggregateOutputType = {
    id: number
    hotel_id: number
    room_type: number
    roomNumber: number
    price: number
    availability: number
    _all: number
  }


  export type RoomAvgAggregateInputType = {
    id?: true
    hotel_id?: true
    roomNumber?: true
    price?: true
  }

  export type RoomSumAggregateInputType = {
    id?: true
    hotel_id?: true
    roomNumber?: true
    price?: true
  }

  export type RoomMinAggregateInputType = {
    id?: true
    hotel_id?: true
    room_type?: true
    roomNumber?: true
    price?: true
    availability?: true
  }

  export type RoomMaxAggregateInputType = {
    id?: true
    hotel_id?: true
    room_type?: true
    roomNumber?: true
    price?: true
    availability?: true
  }

  export type RoomCountAggregateInputType = {
    id?: true
    hotel_id?: true
    room_type?: true
    roomNumber?: true
    price?: true
    availability?: true
    _all?: true
  }

  export type RoomAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which room to aggregate.
     */
    where?: roomWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of rooms to fetch.
     */
    orderBy?: roomOrderByWithRelationInput | roomOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: roomWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` rooms from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` rooms.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned rooms
    **/
    _count?: true | RoomCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: RoomAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: RoomSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RoomMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RoomMaxAggregateInputType
  }

  export type GetRoomAggregateType<T extends RoomAggregateArgs> = {
        [P in keyof T & keyof AggregateRoom]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRoom[P]>
      : GetScalarType<T[P], AggregateRoom[P]>
  }




  export type roomGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: roomWhereInput
    orderBy?: roomOrderByWithAggregationInput | roomOrderByWithAggregationInput[]
    by: RoomScalarFieldEnum[] | RoomScalarFieldEnum
    having?: roomScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RoomCountAggregateInputType | true
    _avg?: RoomAvgAggregateInputType
    _sum?: RoomSumAggregateInputType
    _min?: RoomMinAggregateInputType
    _max?: RoomMaxAggregateInputType
  }

  export type RoomGroupByOutputType = {
    id: number
    hotel_id: number
    room_type: string
    roomNumber: number
    price: number
    availability: boolean
    _count: RoomCountAggregateOutputType | null
    _avg: RoomAvgAggregateOutputType | null
    _sum: RoomSumAggregateOutputType | null
    _min: RoomMinAggregateOutputType | null
    _max: RoomMaxAggregateOutputType | null
  }

  type GetRoomGroupByPayload<T extends roomGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<RoomGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RoomGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RoomGroupByOutputType[P]>
            : GetScalarType<T[P], RoomGroupByOutputType[P]>
        }
      >
    >


  export type roomSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    hotel_id?: boolean
    room_type?: boolean
    roomNumber?: boolean
    price?: boolean
    availability?: boolean
    amenities?: boolean | room$amenitiesArgs<ExtArgs>
    reservations?: boolean | room$reservationsArgs<ExtArgs>
    hotel?: boolean | hotelDefaultArgs<ExtArgs>
    _count?: boolean | RoomCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["room"]>

  export type roomSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    hotel_id?: boolean
    room_type?: boolean
    roomNumber?: boolean
    price?: boolean
    availability?: boolean
    hotel?: boolean | hotelDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["room"]>

  export type roomSelectScalar = {
    id?: boolean
    hotel_id?: boolean
    room_type?: boolean
    roomNumber?: boolean
    price?: boolean
    availability?: boolean
  }

  export type roomInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    amenities?: boolean | room$amenitiesArgs<ExtArgs>
    reservations?: boolean | room$reservationsArgs<ExtArgs>
    hotel?: boolean | hotelDefaultArgs<ExtArgs>
    _count?: boolean | RoomCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type roomIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    hotel?: boolean | hotelDefaultArgs<ExtArgs>
  }

  export type $roomPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "room"
    objects: {
      amenities: Prisma.$room_amenityPayload<ExtArgs>[]
      reservations: Prisma.$reservationPayload<ExtArgs>[]
      hotel: Prisma.$hotelPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      hotel_id: number
      room_type: string
      roomNumber: number
      price: number
      availability: boolean
    }, ExtArgs["result"]["room"]>
    composites: {}
  }

  type roomGetPayload<S extends boolean | null | undefined | roomDefaultArgs> = $Result.GetResult<Prisma.$roomPayload, S>

  type roomCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<roomFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: RoomCountAggregateInputType | true
    }

  export interface roomDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['room'], meta: { name: 'room' } }
    /**
     * Find zero or one Room that matches the filter.
     * @param {roomFindUniqueArgs} args - Arguments to find a Room
     * @example
     * // Get one Room
     * const room = await prisma.room.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends roomFindUniqueArgs>(args: SelectSubset<T, roomFindUniqueArgs<ExtArgs>>): Prisma__roomClient<$Result.GetResult<Prisma.$roomPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Room that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {roomFindUniqueOrThrowArgs} args - Arguments to find a Room
     * @example
     * // Get one Room
     * const room = await prisma.room.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends roomFindUniqueOrThrowArgs>(args: SelectSubset<T, roomFindUniqueOrThrowArgs<ExtArgs>>): Prisma__roomClient<$Result.GetResult<Prisma.$roomPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Room that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {roomFindFirstArgs} args - Arguments to find a Room
     * @example
     * // Get one Room
     * const room = await prisma.room.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends roomFindFirstArgs>(args?: SelectSubset<T, roomFindFirstArgs<ExtArgs>>): Prisma__roomClient<$Result.GetResult<Prisma.$roomPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Room that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {roomFindFirstOrThrowArgs} args - Arguments to find a Room
     * @example
     * // Get one Room
     * const room = await prisma.room.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends roomFindFirstOrThrowArgs>(args?: SelectSubset<T, roomFindFirstOrThrowArgs<ExtArgs>>): Prisma__roomClient<$Result.GetResult<Prisma.$roomPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Rooms that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {roomFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Rooms
     * const rooms = await prisma.room.findMany()
     * 
     * // Get first 10 Rooms
     * const rooms = await prisma.room.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const roomWithIdOnly = await prisma.room.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends roomFindManyArgs>(args?: SelectSubset<T, roomFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$roomPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Room.
     * @param {roomCreateArgs} args - Arguments to create a Room.
     * @example
     * // Create one Room
     * const Room = await prisma.room.create({
     *   data: {
     *     // ... data to create a Room
     *   }
     * })
     * 
     */
    create<T extends roomCreateArgs>(args: SelectSubset<T, roomCreateArgs<ExtArgs>>): Prisma__roomClient<$Result.GetResult<Prisma.$roomPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Rooms.
     * @param {roomCreateManyArgs} args - Arguments to create many Rooms.
     * @example
     * // Create many Rooms
     * const room = await prisma.room.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends roomCreateManyArgs>(args?: SelectSubset<T, roomCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Rooms and returns the data saved in the database.
     * @param {roomCreateManyAndReturnArgs} args - Arguments to create many Rooms.
     * @example
     * // Create many Rooms
     * const room = await prisma.room.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Rooms and only return the `id`
     * const roomWithIdOnly = await prisma.room.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends roomCreateManyAndReturnArgs>(args?: SelectSubset<T, roomCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$roomPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Room.
     * @param {roomDeleteArgs} args - Arguments to delete one Room.
     * @example
     * // Delete one Room
     * const Room = await prisma.room.delete({
     *   where: {
     *     // ... filter to delete one Room
     *   }
     * })
     * 
     */
    delete<T extends roomDeleteArgs>(args: SelectSubset<T, roomDeleteArgs<ExtArgs>>): Prisma__roomClient<$Result.GetResult<Prisma.$roomPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Room.
     * @param {roomUpdateArgs} args - Arguments to update one Room.
     * @example
     * // Update one Room
     * const room = await prisma.room.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends roomUpdateArgs>(args: SelectSubset<T, roomUpdateArgs<ExtArgs>>): Prisma__roomClient<$Result.GetResult<Prisma.$roomPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Rooms.
     * @param {roomDeleteManyArgs} args - Arguments to filter Rooms to delete.
     * @example
     * // Delete a few Rooms
     * const { count } = await prisma.room.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends roomDeleteManyArgs>(args?: SelectSubset<T, roomDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Rooms.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {roomUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Rooms
     * const room = await prisma.room.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends roomUpdateManyArgs>(args: SelectSubset<T, roomUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Room.
     * @param {roomUpsertArgs} args - Arguments to update or create a Room.
     * @example
     * // Update or create a Room
     * const room = await prisma.room.upsert({
     *   create: {
     *     // ... data to create a Room
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Room we want to update
     *   }
     * })
     */
    upsert<T extends roomUpsertArgs>(args: SelectSubset<T, roomUpsertArgs<ExtArgs>>): Prisma__roomClient<$Result.GetResult<Prisma.$roomPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Rooms.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {roomCountArgs} args - Arguments to filter Rooms to count.
     * @example
     * // Count the number of Rooms
     * const count = await prisma.room.count({
     *   where: {
     *     // ... the filter for the Rooms we want to count
     *   }
     * })
    **/
    count<T extends roomCountArgs>(
      args?: Subset<T, roomCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RoomCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Room.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoomAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RoomAggregateArgs>(args: Subset<T, RoomAggregateArgs>): Prisma.PrismaPromise<GetRoomAggregateType<T>>

    /**
     * Group by Room.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {roomGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends roomGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: roomGroupByArgs['orderBy'] }
        : { orderBy?: roomGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, roomGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRoomGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the room model
   */
  readonly fields: roomFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for room.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__roomClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    amenities<T extends room$amenitiesArgs<ExtArgs> = {}>(args?: Subset<T, room$amenitiesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$room_amenityPayload<ExtArgs>, T, "findMany"> | Null>
    reservations<T extends room$reservationsArgs<ExtArgs> = {}>(args?: Subset<T, room$reservationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$reservationPayload<ExtArgs>, T, "findMany"> | Null>
    hotel<T extends hotelDefaultArgs<ExtArgs> = {}>(args?: Subset<T, hotelDefaultArgs<ExtArgs>>): Prisma__hotelClient<$Result.GetResult<Prisma.$hotelPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the room model
   */ 
  interface roomFieldRefs {
    readonly id: FieldRef<"room", 'Int'>
    readonly hotel_id: FieldRef<"room", 'Int'>
    readonly room_type: FieldRef<"room", 'String'>
    readonly roomNumber: FieldRef<"room", 'Int'>
    readonly price: FieldRef<"room", 'Float'>
    readonly availability: FieldRef<"room", 'Boolean'>
  }
    

  // Custom InputTypes
  /**
   * room findUnique
   */
  export type roomFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the room
     */
    select?: roomSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: roomInclude<ExtArgs> | null
    /**
     * Filter, which room to fetch.
     */
    where: roomWhereUniqueInput
  }

  /**
   * room findUniqueOrThrow
   */
  export type roomFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the room
     */
    select?: roomSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: roomInclude<ExtArgs> | null
    /**
     * Filter, which room to fetch.
     */
    where: roomWhereUniqueInput
  }

  /**
   * room findFirst
   */
  export type roomFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the room
     */
    select?: roomSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: roomInclude<ExtArgs> | null
    /**
     * Filter, which room to fetch.
     */
    where?: roomWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of rooms to fetch.
     */
    orderBy?: roomOrderByWithRelationInput | roomOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for rooms.
     */
    cursor?: roomWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` rooms from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` rooms.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of rooms.
     */
    distinct?: RoomScalarFieldEnum | RoomScalarFieldEnum[]
  }

  /**
   * room findFirstOrThrow
   */
  export type roomFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the room
     */
    select?: roomSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: roomInclude<ExtArgs> | null
    /**
     * Filter, which room to fetch.
     */
    where?: roomWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of rooms to fetch.
     */
    orderBy?: roomOrderByWithRelationInput | roomOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for rooms.
     */
    cursor?: roomWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` rooms from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` rooms.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of rooms.
     */
    distinct?: RoomScalarFieldEnum | RoomScalarFieldEnum[]
  }

  /**
   * room findMany
   */
  export type roomFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the room
     */
    select?: roomSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: roomInclude<ExtArgs> | null
    /**
     * Filter, which rooms to fetch.
     */
    where?: roomWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of rooms to fetch.
     */
    orderBy?: roomOrderByWithRelationInput | roomOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing rooms.
     */
    cursor?: roomWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` rooms from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` rooms.
     */
    skip?: number
    distinct?: RoomScalarFieldEnum | RoomScalarFieldEnum[]
  }

  /**
   * room create
   */
  export type roomCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the room
     */
    select?: roomSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: roomInclude<ExtArgs> | null
    /**
     * The data needed to create a room.
     */
    data: XOR<roomCreateInput, roomUncheckedCreateInput>
  }

  /**
   * room createMany
   */
  export type roomCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many rooms.
     */
    data: roomCreateManyInput | roomCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * room createManyAndReturn
   */
  export type roomCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the room
     */
    select?: roomSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many rooms.
     */
    data: roomCreateManyInput | roomCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: roomIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * room update
   */
  export type roomUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the room
     */
    select?: roomSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: roomInclude<ExtArgs> | null
    /**
     * The data needed to update a room.
     */
    data: XOR<roomUpdateInput, roomUncheckedUpdateInput>
    /**
     * Choose, which room to update.
     */
    where: roomWhereUniqueInput
  }

  /**
   * room updateMany
   */
  export type roomUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update rooms.
     */
    data: XOR<roomUpdateManyMutationInput, roomUncheckedUpdateManyInput>
    /**
     * Filter which rooms to update
     */
    where?: roomWhereInput
  }

  /**
   * room upsert
   */
  export type roomUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the room
     */
    select?: roomSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: roomInclude<ExtArgs> | null
    /**
     * The filter to search for the room to update in case it exists.
     */
    where: roomWhereUniqueInput
    /**
     * In case the room found by the `where` argument doesn't exist, create a new room with this data.
     */
    create: XOR<roomCreateInput, roomUncheckedCreateInput>
    /**
     * In case the room was found with the provided `where` argument, update it with this data.
     */
    update: XOR<roomUpdateInput, roomUncheckedUpdateInput>
  }

  /**
   * room delete
   */
  export type roomDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the room
     */
    select?: roomSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: roomInclude<ExtArgs> | null
    /**
     * Filter which room to delete.
     */
    where: roomWhereUniqueInput
  }

  /**
   * room deleteMany
   */
  export type roomDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which rooms to delete
     */
    where?: roomWhereInput
  }

  /**
   * room.amenities
   */
  export type room$amenitiesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the room_amenity
     */
    select?: room_amenitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: room_amenityInclude<ExtArgs> | null
    where?: room_amenityWhereInput
    orderBy?: room_amenityOrderByWithRelationInput | room_amenityOrderByWithRelationInput[]
    cursor?: room_amenityWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Room_amenityScalarFieldEnum | Room_amenityScalarFieldEnum[]
  }

  /**
   * room.reservations
   */
  export type room$reservationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the reservation
     */
    select?: reservationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: reservationInclude<ExtArgs> | null
    where?: reservationWhereInput
    orderBy?: reservationOrderByWithRelationInput | reservationOrderByWithRelationInput[]
    cursor?: reservationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ReservationScalarFieldEnum | ReservationScalarFieldEnum[]
  }

  /**
   * room without action
   */
  export type roomDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the room
     */
    select?: roomSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: roomInclude<ExtArgs> | null
  }


  /**
   * Model reservation
   */

  export type AggregateReservation = {
    _count: ReservationCountAggregateOutputType | null
    _avg: ReservationAvgAggregateOutputType | null
    _sum: ReservationSumAggregateOutputType | null
    _min: ReservationMinAggregateOutputType | null
    _max: ReservationMaxAggregateOutputType | null
  }

  export type ReservationAvgAggregateOutputType = {
    id: number | null
    user_id: number | null
    room_id: number | null
  }

  export type ReservationSumAggregateOutputType = {
    id: number | null
    user_id: number | null
    room_id: number | null
  }

  export type ReservationMinAggregateOutputType = {
    id: number | null
    user_id: number | null
    room_id: number | null
    check_in_date: Date | null
    check_out_date: Date | null
    status: string | null
  }

  export type ReservationMaxAggregateOutputType = {
    id: number | null
    user_id: number | null
    room_id: number | null
    check_in_date: Date | null
    check_out_date: Date | null
    status: string | null
  }

  export type ReservationCountAggregateOutputType = {
    id: number
    user_id: number
    room_id: number
    check_in_date: number
    check_out_date: number
    status: number
    _all: number
  }


  export type ReservationAvgAggregateInputType = {
    id?: true
    user_id?: true
    room_id?: true
  }

  export type ReservationSumAggregateInputType = {
    id?: true
    user_id?: true
    room_id?: true
  }

  export type ReservationMinAggregateInputType = {
    id?: true
    user_id?: true
    room_id?: true
    check_in_date?: true
    check_out_date?: true
    status?: true
  }

  export type ReservationMaxAggregateInputType = {
    id?: true
    user_id?: true
    room_id?: true
    check_in_date?: true
    check_out_date?: true
    status?: true
  }

  export type ReservationCountAggregateInputType = {
    id?: true
    user_id?: true
    room_id?: true
    check_in_date?: true
    check_out_date?: true
    status?: true
    _all?: true
  }

  export type ReservationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which reservation to aggregate.
     */
    where?: reservationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of reservations to fetch.
     */
    orderBy?: reservationOrderByWithRelationInput | reservationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: reservationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` reservations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` reservations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned reservations
    **/
    _count?: true | ReservationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ReservationAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ReservationSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ReservationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ReservationMaxAggregateInputType
  }

  export type GetReservationAggregateType<T extends ReservationAggregateArgs> = {
        [P in keyof T & keyof AggregateReservation]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateReservation[P]>
      : GetScalarType<T[P], AggregateReservation[P]>
  }




  export type reservationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: reservationWhereInput
    orderBy?: reservationOrderByWithAggregationInput | reservationOrderByWithAggregationInput[]
    by: ReservationScalarFieldEnum[] | ReservationScalarFieldEnum
    having?: reservationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ReservationCountAggregateInputType | true
    _avg?: ReservationAvgAggregateInputType
    _sum?: ReservationSumAggregateInputType
    _min?: ReservationMinAggregateInputType
    _max?: ReservationMaxAggregateInputType
  }

  export type ReservationGroupByOutputType = {
    id: number
    user_id: number
    room_id: number
    check_in_date: Date
    check_out_date: Date
    status: string
    _count: ReservationCountAggregateOutputType | null
    _avg: ReservationAvgAggregateOutputType | null
    _sum: ReservationSumAggregateOutputType | null
    _min: ReservationMinAggregateOutputType | null
    _max: ReservationMaxAggregateOutputType | null
  }

  type GetReservationGroupByPayload<T extends reservationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ReservationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ReservationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ReservationGroupByOutputType[P]>
            : GetScalarType<T[P], ReservationGroupByOutputType[P]>
        }
      >
    >


  export type reservationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    user_id?: boolean
    room_id?: boolean
    check_in_date?: boolean
    check_out_date?: boolean
    status?: boolean
    user?: boolean | userDefaultArgs<ExtArgs>
    room?: boolean | roomDefaultArgs<ExtArgs>
    services?: boolean | reservation$servicesArgs<ExtArgs>
    payment_records?: boolean | reservation$payment_recordsArgs<ExtArgs>
    _count?: boolean | ReservationCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["reservation"]>

  export type reservationSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    user_id?: boolean
    room_id?: boolean
    check_in_date?: boolean
    check_out_date?: boolean
    status?: boolean
    user?: boolean | userDefaultArgs<ExtArgs>
    room?: boolean | roomDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["reservation"]>

  export type reservationSelectScalar = {
    id?: boolean
    user_id?: boolean
    room_id?: boolean
    check_in_date?: boolean
    check_out_date?: boolean
    status?: boolean
  }

  export type reservationInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | userDefaultArgs<ExtArgs>
    room?: boolean | roomDefaultArgs<ExtArgs>
    services?: boolean | reservation$servicesArgs<ExtArgs>
    payment_records?: boolean | reservation$payment_recordsArgs<ExtArgs>
    _count?: boolean | ReservationCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type reservationIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | userDefaultArgs<ExtArgs>
    room?: boolean | roomDefaultArgs<ExtArgs>
  }

  export type $reservationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "reservation"
    objects: {
      user: Prisma.$userPayload<ExtArgs>
      room: Prisma.$roomPayload<ExtArgs>
      services: Prisma.$service_reservationPayload<ExtArgs>[]
      payment_records: Prisma.$payment_recordPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      user_id: number
      room_id: number
      check_in_date: Date
      check_out_date: Date
      status: string
    }, ExtArgs["result"]["reservation"]>
    composites: {}
  }

  type reservationGetPayload<S extends boolean | null | undefined | reservationDefaultArgs> = $Result.GetResult<Prisma.$reservationPayload, S>

  type reservationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<reservationFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ReservationCountAggregateInputType | true
    }

  export interface reservationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['reservation'], meta: { name: 'reservation' } }
    /**
     * Find zero or one Reservation that matches the filter.
     * @param {reservationFindUniqueArgs} args - Arguments to find a Reservation
     * @example
     * // Get one Reservation
     * const reservation = await prisma.reservation.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends reservationFindUniqueArgs>(args: SelectSubset<T, reservationFindUniqueArgs<ExtArgs>>): Prisma__reservationClient<$Result.GetResult<Prisma.$reservationPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Reservation that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {reservationFindUniqueOrThrowArgs} args - Arguments to find a Reservation
     * @example
     * // Get one Reservation
     * const reservation = await prisma.reservation.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends reservationFindUniqueOrThrowArgs>(args: SelectSubset<T, reservationFindUniqueOrThrowArgs<ExtArgs>>): Prisma__reservationClient<$Result.GetResult<Prisma.$reservationPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Reservation that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {reservationFindFirstArgs} args - Arguments to find a Reservation
     * @example
     * // Get one Reservation
     * const reservation = await prisma.reservation.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends reservationFindFirstArgs>(args?: SelectSubset<T, reservationFindFirstArgs<ExtArgs>>): Prisma__reservationClient<$Result.GetResult<Prisma.$reservationPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Reservation that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {reservationFindFirstOrThrowArgs} args - Arguments to find a Reservation
     * @example
     * // Get one Reservation
     * const reservation = await prisma.reservation.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends reservationFindFirstOrThrowArgs>(args?: SelectSubset<T, reservationFindFirstOrThrowArgs<ExtArgs>>): Prisma__reservationClient<$Result.GetResult<Prisma.$reservationPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Reservations that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {reservationFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Reservations
     * const reservations = await prisma.reservation.findMany()
     * 
     * // Get first 10 Reservations
     * const reservations = await prisma.reservation.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const reservationWithIdOnly = await prisma.reservation.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends reservationFindManyArgs>(args?: SelectSubset<T, reservationFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$reservationPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Reservation.
     * @param {reservationCreateArgs} args - Arguments to create a Reservation.
     * @example
     * // Create one Reservation
     * const Reservation = await prisma.reservation.create({
     *   data: {
     *     // ... data to create a Reservation
     *   }
     * })
     * 
     */
    create<T extends reservationCreateArgs>(args: SelectSubset<T, reservationCreateArgs<ExtArgs>>): Prisma__reservationClient<$Result.GetResult<Prisma.$reservationPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Reservations.
     * @param {reservationCreateManyArgs} args - Arguments to create many Reservations.
     * @example
     * // Create many Reservations
     * const reservation = await prisma.reservation.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends reservationCreateManyArgs>(args?: SelectSubset<T, reservationCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Reservations and returns the data saved in the database.
     * @param {reservationCreateManyAndReturnArgs} args - Arguments to create many Reservations.
     * @example
     * // Create many Reservations
     * const reservation = await prisma.reservation.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Reservations and only return the `id`
     * const reservationWithIdOnly = await prisma.reservation.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends reservationCreateManyAndReturnArgs>(args?: SelectSubset<T, reservationCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$reservationPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Reservation.
     * @param {reservationDeleteArgs} args - Arguments to delete one Reservation.
     * @example
     * // Delete one Reservation
     * const Reservation = await prisma.reservation.delete({
     *   where: {
     *     // ... filter to delete one Reservation
     *   }
     * })
     * 
     */
    delete<T extends reservationDeleteArgs>(args: SelectSubset<T, reservationDeleteArgs<ExtArgs>>): Prisma__reservationClient<$Result.GetResult<Prisma.$reservationPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Reservation.
     * @param {reservationUpdateArgs} args - Arguments to update one Reservation.
     * @example
     * // Update one Reservation
     * const reservation = await prisma.reservation.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends reservationUpdateArgs>(args: SelectSubset<T, reservationUpdateArgs<ExtArgs>>): Prisma__reservationClient<$Result.GetResult<Prisma.$reservationPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Reservations.
     * @param {reservationDeleteManyArgs} args - Arguments to filter Reservations to delete.
     * @example
     * // Delete a few Reservations
     * const { count } = await prisma.reservation.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends reservationDeleteManyArgs>(args?: SelectSubset<T, reservationDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Reservations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {reservationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Reservations
     * const reservation = await prisma.reservation.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends reservationUpdateManyArgs>(args: SelectSubset<T, reservationUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Reservation.
     * @param {reservationUpsertArgs} args - Arguments to update or create a Reservation.
     * @example
     * // Update or create a Reservation
     * const reservation = await prisma.reservation.upsert({
     *   create: {
     *     // ... data to create a Reservation
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Reservation we want to update
     *   }
     * })
     */
    upsert<T extends reservationUpsertArgs>(args: SelectSubset<T, reservationUpsertArgs<ExtArgs>>): Prisma__reservationClient<$Result.GetResult<Prisma.$reservationPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Reservations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {reservationCountArgs} args - Arguments to filter Reservations to count.
     * @example
     * // Count the number of Reservations
     * const count = await prisma.reservation.count({
     *   where: {
     *     // ... the filter for the Reservations we want to count
     *   }
     * })
    **/
    count<T extends reservationCountArgs>(
      args?: Subset<T, reservationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ReservationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Reservation.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReservationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ReservationAggregateArgs>(args: Subset<T, ReservationAggregateArgs>): Prisma.PrismaPromise<GetReservationAggregateType<T>>

    /**
     * Group by Reservation.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {reservationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends reservationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: reservationGroupByArgs['orderBy'] }
        : { orderBy?: reservationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, reservationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetReservationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the reservation model
   */
  readonly fields: reservationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for reservation.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__reservationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends userDefaultArgs<ExtArgs> = {}>(args?: Subset<T, userDefaultArgs<ExtArgs>>): Prisma__userClient<$Result.GetResult<Prisma.$userPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    room<T extends roomDefaultArgs<ExtArgs> = {}>(args?: Subset<T, roomDefaultArgs<ExtArgs>>): Prisma__roomClient<$Result.GetResult<Prisma.$roomPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    services<T extends reservation$servicesArgs<ExtArgs> = {}>(args?: Subset<T, reservation$servicesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$service_reservationPayload<ExtArgs>, T, "findMany"> | Null>
    payment_records<T extends reservation$payment_recordsArgs<ExtArgs> = {}>(args?: Subset<T, reservation$payment_recordsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$payment_recordPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the reservation model
   */ 
  interface reservationFieldRefs {
    readonly id: FieldRef<"reservation", 'Int'>
    readonly user_id: FieldRef<"reservation", 'Int'>
    readonly room_id: FieldRef<"reservation", 'Int'>
    readonly check_in_date: FieldRef<"reservation", 'DateTime'>
    readonly check_out_date: FieldRef<"reservation", 'DateTime'>
    readonly status: FieldRef<"reservation", 'String'>
  }
    

  // Custom InputTypes
  /**
   * reservation findUnique
   */
  export type reservationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the reservation
     */
    select?: reservationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: reservationInclude<ExtArgs> | null
    /**
     * Filter, which reservation to fetch.
     */
    where: reservationWhereUniqueInput
  }

  /**
   * reservation findUniqueOrThrow
   */
  export type reservationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the reservation
     */
    select?: reservationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: reservationInclude<ExtArgs> | null
    /**
     * Filter, which reservation to fetch.
     */
    where: reservationWhereUniqueInput
  }

  /**
   * reservation findFirst
   */
  export type reservationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the reservation
     */
    select?: reservationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: reservationInclude<ExtArgs> | null
    /**
     * Filter, which reservation to fetch.
     */
    where?: reservationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of reservations to fetch.
     */
    orderBy?: reservationOrderByWithRelationInput | reservationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for reservations.
     */
    cursor?: reservationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` reservations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` reservations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of reservations.
     */
    distinct?: ReservationScalarFieldEnum | ReservationScalarFieldEnum[]
  }

  /**
   * reservation findFirstOrThrow
   */
  export type reservationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the reservation
     */
    select?: reservationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: reservationInclude<ExtArgs> | null
    /**
     * Filter, which reservation to fetch.
     */
    where?: reservationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of reservations to fetch.
     */
    orderBy?: reservationOrderByWithRelationInput | reservationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for reservations.
     */
    cursor?: reservationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` reservations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` reservations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of reservations.
     */
    distinct?: ReservationScalarFieldEnum | ReservationScalarFieldEnum[]
  }

  /**
   * reservation findMany
   */
  export type reservationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the reservation
     */
    select?: reservationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: reservationInclude<ExtArgs> | null
    /**
     * Filter, which reservations to fetch.
     */
    where?: reservationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of reservations to fetch.
     */
    orderBy?: reservationOrderByWithRelationInput | reservationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing reservations.
     */
    cursor?: reservationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` reservations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` reservations.
     */
    skip?: number
    distinct?: ReservationScalarFieldEnum | ReservationScalarFieldEnum[]
  }

  /**
   * reservation create
   */
  export type reservationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the reservation
     */
    select?: reservationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: reservationInclude<ExtArgs> | null
    /**
     * The data needed to create a reservation.
     */
    data: XOR<reservationCreateInput, reservationUncheckedCreateInput>
  }

  /**
   * reservation createMany
   */
  export type reservationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many reservations.
     */
    data: reservationCreateManyInput | reservationCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * reservation createManyAndReturn
   */
  export type reservationCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the reservation
     */
    select?: reservationSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many reservations.
     */
    data: reservationCreateManyInput | reservationCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: reservationIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * reservation update
   */
  export type reservationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the reservation
     */
    select?: reservationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: reservationInclude<ExtArgs> | null
    /**
     * The data needed to update a reservation.
     */
    data: XOR<reservationUpdateInput, reservationUncheckedUpdateInput>
    /**
     * Choose, which reservation to update.
     */
    where: reservationWhereUniqueInput
  }

  /**
   * reservation updateMany
   */
  export type reservationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update reservations.
     */
    data: XOR<reservationUpdateManyMutationInput, reservationUncheckedUpdateManyInput>
    /**
     * Filter which reservations to update
     */
    where?: reservationWhereInput
  }

  /**
   * reservation upsert
   */
  export type reservationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the reservation
     */
    select?: reservationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: reservationInclude<ExtArgs> | null
    /**
     * The filter to search for the reservation to update in case it exists.
     */
    where: reservationWhereUniqueInput
    /**
     * In case the reservation found by the `where` argument doesn't exist, create a new reservation with this data.
     */
    create: XOR<reservationCreateInput, reservationUncheckedCreateInput>
    /**
     * In case the reservation was found with the provided `where` argument, update it with this data.
     */
    update: XOR<reservationUpdateInput, reservationUncheckedUpdateInput>
  }

  /**
   * reservation delete
   */
  export type reservationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the reservation
     */
    select?: reservationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: reservationInclude<ExtArgs> | null
    /**
     * Filter which reservation to delete.
     */
    where: reservationWhereUniqueInput
  }

  /**
   * reservation deleteMany
   */
  export type reservationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which reservations to delete
     */
    where?: reservationWhereInput
  }

  /**
   * reservation.services
   */
  export type reservation$servicesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the service_reservation
     */
    select?: service_reservationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: service_reservationInclude<ExtArgs> | null
    where?: service_reservationWhereInput
    orderBy?: service_reservationOrderByWithRelationInput | service_reservationOrderByWithRelationInput[]
    cursor?: service_reservationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Service_reservationScalarFieldEnum | Service_reservationScalarFieldEnum[]
  }

  /**
   * reservation.payment_records
   */
  export type reservation$payment_recordsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the payment_record
     */
    select?: payment_recordSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: payment_recordInclude<ExtArgs> | null
    where?: payment_recordWhereInput
    orderBy?: payment_recordOrderByWithRelationInput | payment_recordOrderByWithRelationInput[]
    cursor?: payment_recordWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Payment_recordScalarFieldEnum | Payment_recordScalarFieldEnum[]
  }

  /**
   * reservation without action
   */
  export type reservationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the reservation
     */
    select?: reservationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: reservationInclude<ExtArgs> | null
  }


  /**
   * Model user
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    id: number | null
  }

  export type UserSumAggregateOutputType = {
    id: number | null
  }

  export type UserMinAggregateOutputType = {
    id: number | null
    name: string | null
    email: string | null
    password: string | null
    phone: string | null
  }

  export type UserMaxAggregateOutputType = {
    id: number | null
    name: string | null
    email: string | null
    password: string | null
    phone: string | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    name: number
    email: number
    password: number
    phone: number
    _all: number
  }


  export type UserAvgAggregateInputType = {
    id?: true
  }

  export type UserSumAggregateInputType = {
    id?: true
  }

  export type UserMinAggregateInputType = {
    id?: true
    name?: true
    email?: true
    password?: true
    phone?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    name?: true
    email?: true
    password?: true
    phone?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    name?: true
    email?: true
    password?: true
    phone?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which user to aggregate.
     */
    where?: userWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     */
    orderBy?: userOrderByWithRelationInput | userOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: userWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type userGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: userWhereInput
    orderBy?: userOrderByWithAggregationInput | userOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: userScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _avg?: UserAvgAggregateInputType
    _sum?: UserSumAggregateInputType
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: number
    name: string
    email: string
    password: string
    phone: string
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends userGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type userSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    email?: boolean
    password?: boolean
    phone?: boolean
    reservations?: boolean | user$reservationsArgs<ExtArgs>
    reviews?: boolean | user$reviewsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type userSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    email?: boolean
    password?: boolean
    phone?: boolean
  }, ExtArgs["result"]["user"]>

  export type userSelectScalar = {
    id?: boolean
    name?: boolean
    email?: boolean
    password?: boolean
    phone?: boolean
  }

  export type userInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    reservations?: boolean | user$reservationsArgs<ExtArgs>
    reviews?: boolean | user$reviewsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type userIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $userPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "user"
    objects: {
      reservations: Prisma.$reservationPayload<ExtArgs>[]
      reviews: Prisma.$reviewPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      email: string
      password: string
      phone: string
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type userGetPayload<S extends boolean | null | undefined | userDefaultArgs> = $Result.GetResult<Prisma.$userPayload, S>

  type userCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<userFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface userDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['user'], meta: { name: 'user' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {userFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends userFindUniqueArgs>(args: SelectSubset<T, userFindUniqueArgs<ExtArgs>>): Prisma__userClient<$Result.GetResult<Prisma.$userPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {userFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends userFindUniqueOrThrowArgs>(args: SelectSubset<T, userFindUniqueOrThrowArgs<ExtArgs>>): Prisma__userClient<$Result.GetResult<Prisma.$userPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {userFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends userFindFirstArgs>(args?: SelectSubset<T, userFindFirstArgs<ExtArgs>>): Prisma__userClient<$Result.GetResult<Prisma.$userPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {userFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends userFindFirstOrThrowArgs>(args?: SelectSubset<T, userFindFirstOrThrowArgs<ExtArgs>>): Prisma__userClient<$Result.GetResult<Prisma.$userPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {userFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends userFindManyArgs>(args?: SelectSubset<T, userFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$userPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a User.
     * @param {userCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends userCreateArgs>(args: SelectSubset<T, userCreateArgs<ExtArgs>>): Prisma__userClient<$Result.GetResult<Prisma.$userPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Users.
     * @param {userCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends userCreateManyArgs>(args?: SelectSubset<T, userCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {userCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `id`
     * const userWithIdOnly = await prisma.user.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends userCreateManyAndReturnArgs>(args?: SelectSubset<T, userCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$userPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a User.
     * @param {userDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends userDeleteArgs>(args: SelectSubset<T, userDeleteArgs<ExtArgs>>): Prisma__userClient<$Result.GetResult<Prisma.$userPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one User.
     * @param {userUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends userUpdateArgs>(args: SelectSubset<T, userUpdateArgs<ExtArgs>>): Prisma__userClient<$Result.GetResult<Prisma.$userPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Users.
     * @param {userDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends userDeleteManyArgs>(args?: SelectSubset<T, userDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {userUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends userUpdateManyArgs>(args: SelectSubset<T, userUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {userUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends userUpsertArgs>(args: SelectSubset<T, userUpsertArgs<ExtArgs>>): Prisma__userClient<$Result.GetResult<Prisma.$userPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {userCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends userCountArgs>(
      args?: Subset<T, userCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {userGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends userGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: userGroupByArgs['orderBy'] }
        : { orderBy?: userGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, userGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the user model
   */
  readonly fields: userFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for user.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__userClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    reservations<T extends user$reservationsArgs<ExtArgs> = {}>(args?: Subset<T, user$reservationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$reservationPayload<ExtArgs>, T, "findMany"> | Null>
    reviews<T extends user$reviewsArgs<ExtArgs> = {}>(args?: Subset<T, user$reviewsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$reviewPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the user model
   */ 
  interface userFieldRefs {
    readonly id: FieldRef<"user", 'Int'>
    readonly name: FieldRef<"user", 'String'>
    readonly email: FieldRef<"user", 'String'>
    readonly password: FieldRef<"user", 'String'>
    readonly phone: FieldRef<"user", 'String'>
  }
    

  // Custom InputTypes
  /**
   * user findUnique
   */
  export type userFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: userInclude<ExtArgs> | null
    /**
     * Filter, which user to fetch.
     */
    where: userWhereUniqueInput
  }

  /**
   * user findUniqueOrThrow
   */
  export type userFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: userInclude<ExtArgs> | null
    /**
     * Filter, which user to fetch.
     */
    where: userWhereUniqueInput
  }

  /**
   * user findFirst
   */
  export type userFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: userInclude<ExtArgs> | null
    /**
     * Filter, which user to fetch.
     */
    where?: userWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     */
    orderBy?: userOrderByWithRelationInput | userOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for users.
     */
    cursor?: userWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * user findFirstOrThrow
   */
  export type userFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: userInclude<ExtArgs> | null
    /**
     * Filter, which user to fetch.
     */
    where?: userWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     */
    orderBy?: userOrderByWithRelationInput | userOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for users.
     */
    cursor?: userWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * user findMany
   */
  export type userFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: userInclude<ExtArgs> | null
    /**
     * Filter, which users to fetch.
     */
    where?: userWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     */
    orderBy?: userOrderByWithRelationInput | userOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing users.
     */
    cursor?: userWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * user create
   */
  export type userCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: userInclude<ExtArgs> | null
    /**
     * The data needed to create a user.
     */
    data: XOR<userCreateInput, userUncheckedCreateInput>
  }

  /**
   * user createMany
   */
  export type userCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many users.
     */
    data: userCreateManyInput | userCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * user createManyAndReturn
   */
  export type userCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many users.
     */
    data: userCreateManyInput | userCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * user update
   */
  export type userUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: userInclude<ExtArgs> | null
    /**
     * The data needed to update a user.
     */
    data: XOR<userUpdateInput, userUncheckedUpdateInput>
    /**
     * Choose, which user to update.
     */
    where: userWhereUniqueInput
  }

  /**
   * user updateMany
   */
  export type userUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update users.
     */
    data: XOR<userUpdateManyMutationInput, userUncheckedUpdateManyInput>
    /**
     * Filter which users to update
     */
    where?: userWhereInput
  }

  /**
   * user upsert
   */
  export type userUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: userInclude<ExtArgs> | null
    /**
     * The filter to search for the user to update in case it exists.
     */
    where: userWhereUniqueInput
    /**
     * In case the user found by the `where` argument doesn't exist, create a new user with this data.
     */
    create: XOR<userCreateInput, userUncheckedCreateInput>
    /**
     * In case the user was found with the provided `where` argument, update it with this data.
     */
    update: XOR<userUpdateInput, userUncheckedUpdateInput>
  }

  /**
   * user delete
   */
  export type userDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: userInclude<ExtArgs> | null
    /**
     * Filter which user to delete.
     */
    where: userWhereUniqueInput
  }

  /**
   * user deleteMany
   */
  export type userDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which users to delete
     */
    where?: userWhereInput
  }

  /**
   * user.reservations
   */
  export type user$reservationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the reservation
     */
    select?: reservationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: reservationInclude<ExtArgs> | null
    where?: reservationWhereInput
    orderBy?: reservationOrderByWithRelationInput | reservationOrderByWithRelationInput[]
    cursor?: reservationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ReservationScalarFieldEnum | ReservationScalarFieldEnum[]
  }

  /**
   * user.reviews
   */
  export type user$reviewsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the review
     */
    select?: reviewSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: reviewInclude<ExtArgs> | null
    where?: reviewWhereInput
    orderBy?: reviewOrderByWithRelationInput | reviewOrderByWithRelationInput[]
    cursor?: reviewWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ReviewScalarFieldEnum | ReviewScalarFieldEnum[]
  }

  /**
   * user without action
   */
  export type userDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: userInclude<ExtArgs> | null
  }


  /**
   * Model service
   */

  export type AggregateService = {
    _count: ServiceCountAggregateOutputType | null
    _avg: ServiceAvgAggregateOutputType | null
    _sum: ServiceSumAggregateOutputType | null
    _min: ServiceMinAggregateOutputType | null
    _max: ServiceMaxAggregateOutputType | null
  }

  export type ServiceAvgAggregateOutputType = {
    id: number | null
    hotel_id: number | null
    price: number | null
  }

  export type ServiceSumAggregateOutputType = {
    id: number | null
    hotel_id: number | null
    price: number | null
  }

  export type ServiceMinAggregateOutputType = {
    id: number | null
    hotel_id: number | null
    service_type: string | null
    price: number | null
  }

  export type ServiceMaxAggregateOutputType = {
    id: number | null
    hotel_id: number | null
    service_type: string | null
    price: number | null
  }

  export type ServiceCountAggregateOutputType = {
    id: number
    hotel_id: number
    service_type: number
    price: number
    _all: number
  }


  export type ServiceAvgAggregateInputType = {
    id?: true
    hotel_id?: true
    price?: true
  }

  export type ServiceSumAggregateInputType = {
    id?: true
    hotel_id?: true
    price?: true
  }

  export type ServiceMinAggregateInputType = {
    id?: true
    hotel_id?: true
    service_type?: true
    price?: true
  }

  export type ServiceMaxAggregateInputType = {
    id?: true
    hotel_id?: true
    service_type?: true
    price?: true
  }

  export type ServiceCountAggregateInputType = {
    id?: true
    hotel_id?: true
    service_type?: true
    price?: true
    _all?: true
  }

  export type ServiceAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which service to aggregate.
     */
    where?: serviceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of services to fetch.
     */
    orderBy?: serviceOrderByWithRelationInput | serviceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: serviceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` services from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` services.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned services
    **/
    _count?: true | ServiceCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ServiceAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ServiceSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ServiceMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ServiceMaxAggregateInputType
  }

  export type GetServiceAggregateType<T extends ServiceAggregateArgs> = {
        [P in keyof T & keyof AggregateService]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateService[P]>
      : GetScalarType<T[P], AggregateService[P]>
  }




  export type serviceGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: serviceWhereInput
    orderBy?: serviceOrderByWithAggregationInput | serviceOrderByWithAggregationInput[]
    by: ServiceScalarFieldEnum[] | ServiceScalarFieldEnum
    having?: serviceScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ServiceCountAggregateInputType | true
    _avg?: ServiceAvgAggregateInputType
    _sum?: ServiceSumAggregateInputType
    _min?: ServiceMinAggregateInputType
    _max?: ServiceMaxAggregateInputType
  }

  export type ServiceGroupByOutputType = {
    id: number
    hotel_id: number
    service_type: string
    price: number
    _count: ServiceCountAggregateOutputType | null
    _avg: ServiceAvgAggregateOutputType | null
    _sum: ServiceSumAggregateOutputType | null
    _min: ServiceMinAggregateOutputType | null
    _max: ServiceMaxAggregateOutputType | null
  }

  type GetServiceGroupByPayload<T extends serviceGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ServiceGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ServiceGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ServiceGroupByOutputType[P]>
            : GetScalarType<T[P], ServiceGroupByOutputType[P]>
        }
      >
    >


  export type serviceSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    hotel_id?: boolean
    service_type?: boolean
    price?: boolean
    hotel?: boolean | hotelDefaultArgs<ExtArgs>
    reservations?: boolean | service$reservationsArgs<ExtArgs>
    _count?: boolean | ServiceCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["service"]>

  export type serviceSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    hotel_id?: boolean
    service_type?: boolean
    price?: boolean
    hotel?: boolean | hotelDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["service"]>

  export type serviceSelectScalar = {
    id?: boolean
    hotel_id?: boolean
    service_type?: boolean
    price?: boolean
  }

  export type serviceInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    hotel?: boolean | hotelDefaultArgs<ExtArgs>
    reservations?: boolean | service$reservationsArgs<ExtArgs>
    _count?: boolean | ServiceCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type serviceIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    hotel?: boolean | hotelDefaultArgs<ExtArgs>
  }

  export type $servicePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "service"
    objects: {
      hotel: Prisma.$hotelPayload<ExtArgs>
      reservations: Prisma.$service_reservationPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      hotel_id: number
      service_type: string
      price: number
    }, ExtArgs["result"]["service"]>
    composites: {}
  }

  type serviceGetPayload<S extends boolean | null | undefined | serviceDefaultArgs> = $Result.GetResult<Prisma.$servicePayload, S>

  type serviceCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<serviceFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ServiceCountAggregateInputType | true
    }

  export interface serviceDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['service'], meta: { name: 'service' } }
    /**
     * Find zero or one Service that matches the filter.
     * @param {serviceFindUniqueArgs} args - Arguments to find a Service
     * @example
     * // Get one Service
     * const service = await prisma.service.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends serviceFindUniqueArgs>(args: SelectSubset<T, serviceFindUniqueArgs<ExtArgs>>): Prisma__serviceClient<$Result.GetResult<Prisma.$servicePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Service that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {serviceFindUniqueOrThrowArgs} args - Arguments to find a Service
     * @example
     * // Get one Service
     * const service = await prisma.service.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends serviceFindUniqueOrThrowArgs>(args: SelectSubset<T, serviceFindUniqueOrThrowArgs<ExtArgs>>): Prisma__serviceClient<$Result.GetResult<Prisma.$servicePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Service that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {serviceFindFirstArgs} args - Arguments to find a Service
     * @example
     * // Get one Service
     * const service = await prisma.service.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends serviceFindFirstArgs>(args?: SelectSubset<T, serviceFindFirstArgs<ExtArgs>>): Prisma__serviceClient<$Result.GetResult<Prisma.$servicePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Service that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {serviceFindFirstOrThrowArgs} args - Arguments to find a Service
     * @example
     * // Get one Service
     * const service = await prisma.service.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends serviceFindFirstOrThrowArgs>(args?: SelectSubset<T, serviceFindFirstOrThrowArgs<ExtArgs>>): Prisma__serviceClient<$Result.GetResult<Prisma.$servicePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Services that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {serviceFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Services
     * const services = await prisma.service.findMany()
     * 
     * // Get first 10 Services
     * const services = await prisma.service.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const serviceWithIdOnly = await prisma.service.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends serviceFindManyArgs>(args?: SelectSubset<T, serviceFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$servicePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Service.
     * @param {serviceCreateArgs} args - Arguments to create a Service.
     * @example
     * // Create one Service
     * const Service = await prisma.service.create({
     *   data: {
     *     // ... data to create a Service
     *   }
     * })
     * 
     */
    create<T extends serviceCreateArgs>(args: SelectSubset<T, serviceCreateArgs<ExtArgs>>): Prisma__serviceClient<$Result.GetResult<Prisma.$servicePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Services.
     * @param {serviceCreateManyArgs} args - Arguments to create many Services.
     * @example
     * // Create many Services
     * const service = await prisma.service.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends serviceCreateManyArgs>(args?: SelectSubset<T, serviceCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Services and returns the data saved in the database.
     * @param {serviceCreateManyAndReturnArgs} args - Arguments to create many Services.
     * @example
     * // Create many Services
     * const service = await prisma.service.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Services and only return the `id`
     * const serviceWithIdOnly = await prisma.service.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends serviceCreateManyAndReturnArgs>(args?: SelectSubset<T, serviceCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$servicePayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Service.
     * @param {serviceDeleteArgs} args - Arguments to delete one Service.
     * @example
     * // Delete one Service
     * const Service = await prisma.service.delete({
     *   where: {
     *     // ... filter to delete one Service
     *   }
     * })
     * 
     */
    delete<T extends serviceDeleteArgs>(args: SelectSubset<T, serviceDeleteArgs<ExtArgs>>): Prisma__serviceClient<$Result.GetResult<Prisma.$servicePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Service.
     * @param {serviceUpdateArgs} args - Arguments to update one Service.
     * @example
     * // Update one Service
     * const service = await prisma.service.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends serviceUpdateArgs>(args: SelectSubset<T, serviceUpdateArgs<ExtArgs>>): Prisma__serviceClient<$Result.GetResult<Prisma.$servicePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Services.
     * @param {serviceDeleteManyArgs} args - Arguments to filter Services to delete.
     * @example
     * // Delete a few Services
     * const { count } = await prisma.service.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends serviceDeleteManyArgs>(args?: SelectSubset<T, serviceDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Services.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {serviceUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Services
     * const service = await prisma.service.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends serviceUpdateManyArgs>(args: SelectSubset<T, serviceUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Service.
     * @param {serviceUpsertArgs} args - Arguments to update or create a Service.
     * @example
     * // Update or create a Service
     * const service = await prisma.service.upsert({
     *   create: {
     *     // ... data to create a Service
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Service we want to update
     *   }
     * })
     */
    upsert<T extends serviceUpsertArgs>(args: SelectSubset<T, serviceUpsertArgs<ExtArgs>>): Prisma__serviceClient<$Result.GetResult<Prisma.$servicePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Services.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {serviceCountArgs} args - Arguments to filter Services to count.
     * @example
     * // Count the number of Services
     * const count = await prisma.service.count({
     *   where: {
     *     // ... the filter for the Services we want to count
     *   }
     * })
    **/
    count<T extends serviceCountArgs>(
      args?: Subset<T, serviceCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ServiceCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Service.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServiceAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ServiceAggregateArgs>(args: Subset<T, ServiceAggregateArgs>): Prisma.PrismaPromise<GetServiceAggregateType<T>>

    /**
     * Group by Service.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {serviceGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends serviceGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: serviceGroupByArgs['orderBy'] }
        : { orderBy?: serviceGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, serviceGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetServiceGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the service model
   */
  readonly fields: serviceFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for service.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__serviceClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    hotel<T extends hotelDefaultArgs<ExtArgs> = {}>(args?: Subset<T, hotelDefaultArgs<ExtArgs>>): Prisma__hotelClient<$Result.GetResult<Prisma.$hotelPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    reservations<T extends service$reservationsArgs<ExtArgs> = {}>(args?: Subset<T, service$reservationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$service_reservationPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the service model
   */ 
  interface serviceFieldRefs {
    readonly id: FieldRef<"service", 'Int'>
    readonly hotel_id: FieldRef<"service", 'Int'>
    readonly service_type: FieldRef<"service", 'String'>
    readonly price: FieldRef<"service", 'Float'>
  }
    

  // Custom InputTypes
  /**
   * service findUnique
   */
  export type serviceFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the service
     */
    select?: serviceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: serviceInclude<ExtArgs> | null
    /**
     * Filter, which service to fetch.
     */
    where: serviceWhereUniqueInput
  }

  /**
   * service findUniqueOrThrow
   */
  export type serviceFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the service
     */
    select?: serviceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: serviceInclude<ExtArgs> | null
    /**
     * Filter, which service to fetch.
     */
    where: serviceWhereUniqueInput
  }

  /**
   * service findFirst
   */
  export type serviceFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the service
     */
    select?: serviceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: serviceInclude<ExtArgs> | null
    /**
     * Filter, which service to fetch.
     */
    where?: serviceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of services to fetch.
     */
    orderBy?: serviceOrderByWithRelationInput | serviceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for services.
     */
    cursor?: serviceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` services from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` services.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of services.
     */
    distinct?: ServiceScalarFieldEnum | ServiceScalarFieldEnum[]
  }

  /**
   * service findFirstOrThrow
   */
  export type serviceFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the service
     */
    select?: serviceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: serviceInclude<ExtArgs> | null
    /**
     * Filter, which service to fetch.
     */
    where?: serviceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of services to fetch.
     */
    orderBy?: serviceOrderByWithRelationInput | serviceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for services.
     */
    cursor?: serviceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` services from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` services.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of services.
     */
    distinct?: ServiceScalarFieldEnum | ServiceScalarFieldEnum[]
  }

  /**
   * service findMany
   */
  export type serviceFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the service
     */
    select?: serviceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: serviceInclude<ExtArgs> | null
    /**
     * Filter, which services to fetch.
     */
    where?: serviceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of services to fetch.
     */
    orderBy?: serviceOrderByWithRelationInput | serviceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing services.
     */
    cursor?: serviceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` services from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` services.
     */
    skip?: number
    distinct?: ServiceScalarFieldEnum | ServiceScalarFieldEnum[]
  }

  /**
   * service create
   */
  export type serviceCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the service
     */
    select?: serviceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: serviceInclude<ExtArgs> | null
    /**
     * The data needed to create a service.
     */
    data: XOR<serviceCreateInput, serviceUncheckedCreateInput>
  }

  /**
   * service createMany
   */
  export type serviceCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many services.
     */
    data: serviceCreateManyInput | serviceCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * service createManyAndReturn
   */
  export type serviceCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the service
     */
    select?: serviceSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many services.
     */
    data: serviceCreateManyInput | serviceCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: serviceIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * service update
   */
  export type serviceUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the service
     */
    select?: serviceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: serviceInclude<ExtArgs> | null
    /**
     * The data needed to update a service.
     */
    data: XOR<serviceUpdateInput, serviceUncheckedUpdateInput>
    /**
     * Choose, which service to update.
     */
    where: serviceWhereUniqueInput
  }

  /**
   * service updateMany
   */
  export type serviceUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update services.
     */
    data: XOR<serviceUpdateManyMutationInput, serviceUncheckedUpdateManyInput>
    /**
     * Filter which services to update
     */
    where?: serviceWhereInput
  }

  /**
   * service upsert
   */
  export type serviceUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the service
     */
    select?: serviceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: serviceInclude<ExtArgs> | null
    /**
     * The filter to search for the service to update in case it exists.
     */
    where: serviceWhereUniqueInput
    /**
     * In case the service found by the `where` argument doesn't exist, create a new service with this data.
     */
    create: XOR<serviceCreateInput, serviceUncheckedCreateInput>
    /**
     * In case the service was found with the provided `where` argument, update it with this data.
     */
    update: XOR<serviceUpdateInput, serviceUncheckedUpdateInput>
  }

  /**
   * service delete
   */
  export type serviceDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the service
     */
    select?: serviceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: serviceInclude<ExtArgs> | null
    /**
     * Filter which service to delete.
     */
    where: serviceWhereUniqueInput
  }

  /**
   * service deleteMany
   */
  export type serviceDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which services to delete
     */
    where?: serviceWhereInput
  }

  /**
   * service.reservations
   */
  export type service$reservationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the service_reservation
     */
    select?: service_reservationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: service_reservationInclude<ExtArgs> | null
    where?: service_reservationWhereInput
    orderBy?: service_reservationOrderByWithRelationInput | service_reservationOrderByWithRelationInput[]
    cursor?: service_reservationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Service_reservationScalarFieldEnum | Service_reservationScalarFieldEnum[]
  }

  /**
   * service without action
   */
  export type serviceDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the service
     */
    select?: serviceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: serviceInclude<ExtArgs> | null
  }


  /**
   * Model service_reservation
   */

  export type AggregateService_reservation = {
    _count: Service_reservationCountAggregateOutputType | null
    _avg: Service_reservationAvgAggregateOutputType | null
    _sum: Service_reservationSumAggregateOutputType | null
    _min: Service_reservationMinAggregateOutputType | null
    _max: Service_reservationMaxAggregateOutputType | null
  }

  export type Service_reservationAvgAggregateOutputType = {
    id: number | null
    reservation_id: number | null
    service_id: number | null
    quantity: number | null
    price: number | null
  }

  export type Service_reservationSumAggregateOutputType = {
    id: number | null
    reservation_id: number | null
    service_id: number | null
    quantity: number | null
    price: number | null
  }

  export type Service_reservationMinAggregateOutputType = {
    id: number | null
    reservation_id: number | null
    service_id: number | null
    quantity: number | null
    price: number | null
  }

  export type Service_reservationMaxAggregateOutputType = {
    id: number | null
    reservation_id: number | null
    service_id: number | null
    quantity: number | null
    price: number | null
  }

  export type Service_reservationCountAggregateOutputType = {
    id: number
    reservation_id: number
    service_id: number
    quantity: number
    price: number
    _all: number
  }


  export type Service_reservationAvgAggregateInputType = {
    id?: true
    reservation_id?: true
    service_id?: true
    quantity?: true
    price?: true
  }

  export type Service_reservationSumAggregateInputType = {
    id?: true
    reservation_id?: true
    service_id?: true
    quantity?: true
    price?: true
  }

  export type Service_reservationMinAggregateInputType = {
    id?: true
    reservation_id?: true
    service_id?: true
    quantity?: true
    price?: true
  }

  export type Service_reservationMaxAggregateInputType = {
    id?: true
    reservation_id?: true
    service_id?: true
    quantity?: true
    price?: true
  }

  export type Service_reservationCountAggregateInputType = {
    id?: true
    reservation_id?: true
    service_id?: true
    quantity?: true
    price?: true
    _all?: true
  }

  export type Service_reservationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which service_reservation to aggregate.
     */
    where?: service_reservationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of service_reservations to fetch.
     */
    orderBy?: service_reservationOrderByWithRelationInput | service_reservationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: service_reservationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` service_reservations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` service_reservations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned service_reservations
    **/
    _count?: true | Service_reservationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Service_reservationAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Service_reservationSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Service_reservationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Service_reservationMaxAggregateInputType
  }

  export type GetService_reservationAggregateType<T extends Service_reservationAggregateArgs> = {
        [P in keyof T & keyof AggregateService_reservation]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateService_reservation[P]>
      : GetScalarType<T[P], AggregateService_reservation[P]>
  }




  export type service_reservationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: service_reservationWhereInput
    orderBy?: service_reservationOrderByWithAggregationInput | service_reservationOrderByWithAggregationInput[]
    by: Service_reservationScalarFieldEnum[] | Service_reservationScalarFieldEnum
    having?: service_reservationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Service_reservationCountAggregateInputType | true
    _avg?: Service_reservationAvgAggregateInputType
    _sum?: Service_reservationSumAggregateInputType
    _min?: Service_reservationMinAggregateInputType
    _max?: Service_reservationMaxAggregateInputType
  }

  export type Service_reservationGroupByOutputType = {
    id: number
    reservation_id: number
    service_id: number
    quantity: number
    price: number
    _count: Service_reservationCountAggregateOutputType | null
    _avg: Service_reservationAvgAggregateOutputType | null
    _sum: Service_reservationSumAggregateOutputType | null
    _min: Service_reservationMinAggregateOutputType | null
    _max: Service_reservationMaxAggregateOutputType | null
  }

  type GetService_reservationGroupByPayload<T extends service_reservationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<Service_reservationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Service_reservationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Service_reservationGroupByOutputType[P]>
            : GetScalarType<T[P], Service_reservationGroupByOutputType[P]>
        }
      >
    >


  export type service_reservationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    reservation_id?: boolean
    service_id?: boolean
    quantity?: boolean
    price?: boolean
    reservation?: boolean | reservationDefaultArgs<ExtArgs>
    service?: boolean | serviceDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["service_reservation"]>

  export type service_reservationSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    reservation_id?: boolean
    service_id?: boolean
    quantity?: boolean
    price?: boolean
    reservation?: boolean | reservationDefaultArgs<ExtArgs>
    service?: boolean | serviceDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["service_reservation"]>

  export type service_reservationSelectScalar = {
    id?: boolean
    reservation_id?: boolean
    service_id?: boolean
    quantity?: boolean
    price?: boolean
  }

  export type service_reservationInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    reservation?: boolean | reservationDefaultArgs<ExtArgs>
    service?: boolean | serviceDefaultArgs<ExtArgs>
  }
  export type service_reservationIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    reservation?: boolean | reservationDefaultArgs<ExtArgs>
    service?: boolean | serviceDefaultArgs<ExtArgs>
  }

  export type $service_reservationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "service_reservation"
    objects: {
      reservation: Prisma.$reservationPayload<ExtArgs>
      service: Prisma.$servicePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      reservation_id: number
      service_id: number
      quantity: number
      price: number
    }, ExtArgs["result"]["service_reservation"]>
    composites: {}
  }

  type service_reservationGetPayload<S extends boolean | null | undefined | service_reservationDefaultArgs> = $Result.GetResult<Prisma.$service_reservationPayload, S>

  type service_reservationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<service_reservationFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: Service_reservationCountAggregateInputType | true
    }

  export interface service_reservationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['service_reservation'], meta: { name: 'service_reservation' } }
    /**
     * Find zero or one Service_reservation that matches the filter.
     * @param {service_reservationFindUniqueArgs} args - Arguments to find a Service_reservation
     * @example
     * // Get one Service_reservation
     * const service_reservation = await prisma.service_reservation.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends service_reservationFindUniqueArgs>(args: SelectSubset<T, service_reservationFindUniqueArgs<ExtArgs>>): Prisma__service_reservationClient<$Result.GetResult<Prisma.$service_reservationPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Service_reservation that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {service_reservationFindUniqueOrThrowArgs} args - Arguments to find a Service_reservation
     * @example
     * // Get one Service_reservation
     * const service_reservation = await prisma.service_reservation.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends service_reservationFindUniqueOrThrowArgs>(args: SelectSubset<T, service_reservationFindUniqueOrThrowArgs<ExtArgs>>): Prisma__service_reservationClient<$Result.GetResult<Prisma.$service_reservationPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Service_reservation that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {service_reservationFindFirstArgs} args - Arguments to find a Service_reservation
     * @example
     * // Get one Service_reservation
     * const service_reservation = await prisma.service_reservation.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends service_reservationFindFirstArgs>(args?: SelectSubset<T, service_reservationFindFirstArgs<ExtArgs>>): Prisma__service_reservationClient<$Result.GetResult<Prisma.$service_reservationPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Service_reservation that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {service_reservationFindFirstOrThrowArgs} args - Arguments to find a Service_reservation
     * @example
     * // Get one Service_reservation
     * const service_reservation = await prisma.service_reservation.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends service_reservationFindFirstOrThrowArgs>(args?: SelectSubset<T, service_reservationFindFirstOrThrowArgs<ExtArgs>>): Prisma__service_reservationClient<$Result.GetResult<Prisma.$service_reservationPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Service_reservations that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {service_reservationFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Service_reservations
     * const service_reservations = await prisma.service_reservation.findMany()
     * 
     * // Get first 10 Service_reservations
     * const service_reservations = await prisma.service_reservation.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const service_reservationWithIdOnly = await prisma.service_reservation.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends service_reservationFindManyArgs>(args?: SelectSubset<T, service_reservationFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$service_reservationPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Service_reservation.
     * @param {service_reservationCreateArgs} args - Arguments to create a Service_reservation.
     * @example
     * // Create one Service_reservation
     * const Service_reservation = await prisma.service_reservation.create({
     *   data: {
     *     // ... data to create a Service_reservation
     *   }
     * })
     * 
     */
    create<T extends service_reservationCreateArgs>(args: SelectSubset<T, service_reservationCreateArgs<ExtArgs>>): Prisma__service_reservationClient<$Result.GetResult<Prisma.$service_reservationPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Service_reservations.
     * @param {service_reservationCreateManyArgs} args - Arguments to create many Service_reservations.
     * @example
     * // Create many Service_reservations
     * const service_reservation = await prisma.service_reservation.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends service_reservationCreateManyArgs>(args?: SelectSubset<T, service_reservationCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Service_reservations and returns the data saved in the database.
     * @param {service_reservationCreateManyAndReturnArgs} args - Arguments to create many Service_reservations.
     * @example
     * // Create many Service_reservations
     * const service_reservation = await prisma.service_reservation.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Service_reservations and only return the `id`
     * const service_reservationWithIdOnly = await prisma.service_reservation.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends service_reservationCreateManyAndReturnArgs>(args?: SelectSubset<T, service_reservationCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$service_reservationPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Service_reservation.
     * @param {service_reservationDeleteArgs} args - Arguments to delete one Service_reservation.
     * @example
     * // Delete one Service_reservation
     * const Service_reservation = await prisma.service_reservation.delete({
     *   where: {
     *     // ... filter to delete one Service_reservation
     *   }
     * })
     * 
     */
    delete<T extends service_reservationDeleteArgs>(args: SelectSubset<T, service_reservationDeleteArgs<ExtArgs>>): Prisma__service_reservationClient<$Result.GetResult<Prisma.$service_reservationPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Service_reservation.
     * @param {service_reservationUpdateArgs} args - Arguments to update one Service_reservation.
     * @example
     * // Update one Service_reservation
     * const service_reservation = await prisma.service_reservation.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends service_reservationUpdateArgs>(args: SelectSubset<T, service_reservationUpdateArgs<ExtArgs>>): Prisma__service_reservationClient<$Result.GetResult<Prisma.$service_reservationPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Service_reservations.
     * @param {service_reservationDeleteManyArgs} args - Arguments to filter Service_reservations to delete.
     * @example
     * // Delete a few Service_reservations
     * const { count } = await prisma.service_reservation.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends service_reservationDeleteManyArgs>(args?: SelectSubset<T, service_reservationDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Service_reservations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {service_reservationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Service_reservations
     * const service_reservation = await prisma.service_reservation.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends service_reservationUpdateManyArgs>(args: SelectSubset<T, service_reservationUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Service_reservation.
     * @param {service_reservationUpsertArgs} args - Arguments to update or create a Service_reservation.
     * @example
     * // Update or create a Service_reservation
     * const service_reservation = await prisma.service_reservation.upsert({
     *   create: {
     *     // ... data to create a Service_reservation
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Service_reservation we want to update
     *   }
     * })
     */
    upsert<T extends service_reservationUpsertArgs>(args: SelectSubset<T, service_reservationUpsertArgs<ExtArgs>>): Prisma__service_reservationClient<$Result.GetResult<Prisma.$service_reservationPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Service_reservations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {service_reservationCountArgs} args - Arguments to filter Service_reservations to count.
     * @example
     * // Count the number of Service_reservations
     * const count = await prisma.service_reservation.count({
     *   where: {
     *     // ... the filter for the Service_reservations we want to count
     *   }
     * })
    **/
    count<T extends service_reservationCountArgs>(
      args?: Subset<T, service_reservationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Service_reservationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Service_reservation.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Service_reservationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Service_reservationAggregateArgs>(args: Subset<T, Service_reservationAggregateArgs>): Prisma.PrismaPromise<GetService_reservationAggregateType<T>>

    /**
     * Group by Service_reservation.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {service_reservationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends service_reservationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: service_reservationGroupByArgs['orderBy'] }
        : { orderBy?: service_reservationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, service_reservationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetService_reservationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the service_reservation model
   */
  readonly fields: service_reservationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for service_reservation.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__service_reservationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    reservation<T extends reservationDefaultArgs<ExtArgs> = {}>(args?: Subset<T, reservationDefaultArgs<ExtArgs>>): Prisma__reservationClient<$Result.GetResult<Prisma.$reservationPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    service<T extends serviceDefaultArgs<ExtArgs> = {}>(args?: Subset<T, serviceDefaultArgs<ExtArgs>>): Prisma__serviceClient<$Result.GetResult<Prisma.$servicePayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the service_reservation model
   */ 
  interface service_reservationFieldRefs {
    readonly id: FieldRef<"service_reservation", 'Int'>
    readonly reservation_id: FieldRef<"service_reservation", 'Int'>
    readonly service_id: FieldRef<"service_reservation", 'Int'>
    readonly quantity: FieldRef<"service_reservation", 'Int'>
    readonly price: FieldRef<"service_reservation", 'Float'>
  }
    

  // Custom InputTypes
  /**
   * service_reservation findUnique
   */
  export type service_reservationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the service_reservation
     */
    select?: service_reservationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: service_reservationInclude<ExtArgs> | null
    /**
     * Filter, which service_reservation to fetch.
     */
    where: service_reservationWhereUniqueInput
  }

  /**
   * service_reservation findUniqueOrThrow
   */
  export type service_reservationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the service_reservation
     */
    select?: service_reservationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: service_reservationInclude<ExtArgs> | null
    /**
     * Filter, which service_reservation to fetch.
     */
    where: service_reservationWhereUniqueInput
  }

  /**
   * service_reservation findFirst
   */
  export type service_reservationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the service_reservation
     */
    select?: service_reservationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: service_reservationInclude<ExtArgs> | null
    /**
     * Filter, which service_reservation to fetch.
     */
    where?: service_reservationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of service_reservations to fetch.
     */
    orderBy?: service_reservationOrderByWithRelationInput | service_reservationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for service_reservations.
     */
    cursor?: service_reservationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` service_reservations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` service_reservations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of service_reservations.
     */
    distinct?: Service_reservationScalarFieldEnum | Service_reservationScalarFieldEnum[]
  }

  /**
   * service_reservation findFirstOrThrow
   */
  export type service_reservationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the service_reservation
     */
    select?: service_reservationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: service_reservationInclude<ExtArgs> | null
    /**
     * Filter, which service_reservation to fetch.
     */
    where?: service_reservationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of service_reservations to fetch.
     */
    orderBy?: service_reservationOrderByWithRelationInput | service_reservationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for service_reservations.
     */
    cursor?: service_reservationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` service_reservations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` service_reservations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of service_reservations.
     */
    distinct?: Service_reservationScalarFieldEnum | Service_reservationScalarFieldEnum[]
  }

  /**
   * service_reservation findMany
   */
  export type service_reservationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the service_reservation
     */
    select?: service_reservationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: service_reservationInclude<ExtArgs> | null
    /**
     * Filter, which service_reservations to fetch.
     */
    where?: service_reservationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of service_reservations to fetch.
     */
    orderBy?: service_reservationOrderByWithRelationInput | service_reservationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing service_reservations.
     */
    cursor?: service_reservationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` service_reservations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` service_reservations.
     */
    skip?: number
    distinct?: Service_reservationScalarFieldEnum | Service_reservationScalarFieldEnum[]
  }

  /**
   * service_reservation create
   */
  export type service_reservationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the service_reservation
     */
    select?: service_reservationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: service_reservationInclude<ExtArgs> | null
    /**
     * The data needed to create a service_reservation.
     */
    data: XOR<service_reservationCreateInput, service_reservationUncheckedCreateInput>
  }

  /**
   * service_reservation createMany
   */
  export type service_reservationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many service_reservations.
     */
    data: service_reservationCreateManyInput | service_reservationCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * service_reservation createManyAndReturn
   */
  export type service_reservationCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the service_reservation
     */
    select?: service_reservationSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many service_reservations.
     */
    data: service_reservationCreateManyInput | service_reservationCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: service_reservationIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * service_reservation update
   */
  export type service_reservationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the service_reservation
     */
    select?: service_reservationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: service_reservationInclude<ExtArgs> | null
    /**
     * The data needed to update a service_reservation.
     */
    data: XOR<service_reservationUpdateInput, service_reservationUncheckedUpdateInput>
    /**
     * Choose, which service_reservation to update.
     */
    where: service_reservationWhereUniqueInput
  }

  /**
   * service_reservation updateMany
   */
  export type service_reservationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update service_reservations.
     */
    data: XOR<service_reservationUpdateManyMutationInput, service_reservationUncheckedUpdateManyInput>
    /**
     * Filter which service_reservations to update
     */
    where?: service_reservationWhereInput
  }

  /**
   * service_reservation upsert
   */
  export type service_reservationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the service_reservation
     */
    select?: service_reservationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: service_reservationInclude<ExtArgs> | null
    /**
     * The filter to search for the service_reservation to update in case it exists.
     */
    where: service_reservationWhereUniqueInput
    /**
     * In case the service_reservation found by the `where` argument doesn't exist, create a new service_reservation with this data.
     */
    create: XOR<service_reservationCreateInput, service_reservationUncheckedCreateInput>
    /**
     * In case the service_reservation was found with the provided `where` argument, update it with this data.
     */
    update: XOR<service_reservationUpdateInput, service_reservationUncheckedUpdateInput>
  }

  /**
   * service_reservation delete
   */
  export type service_reservationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the service_reservation
     */
    select?: service_reservationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: service_reservationInclude<ExtArgs> | null
    /**
     * Filter which service_reservation to delete.
     */
    where: service_reservationWhereUniqueInput
  }

  /**
   * service_reservation deleteMany
   */
  export type service_reservationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which service_reservations to delete
     */
    where?: service_reservationWhereInput
  }

  /**
   * service_reservation without action
   */
  export type service_reservationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the service_reservation
     */
    select?: service_reservationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: service_reservationInclude<ExtArgs> | null
  }


  /**
   * Model review
   */

  export type AggregateReview = {
    _count: ReviewCountAggregateOutputType | null
    _avg: ReviewAvgAggregateOutputType | null
    _sum: ReviewSumAggregateOutputType | null
    _min: ReviewMinAggregateOutputType | null
    _max: ReviewMaxAggregateOutputType | null
  }

  export type ReviewAvgAggregateOutputType = {
    id: number | null
    user_id: number | null
    hotel_id: number | null
    rating: number | null
  }

  export type ReviewSumAggregateOutputType = {
    id: number | null
    user_id: number | null
    hotel_id: number | null
    rating: number | null
  }

  export type ReviewMinAggregateOutputType = {
    id: number | null
    user_id: number | null
    hotel_id: number | null
    rating: number | null
    comment: string | null
    review_date: Date | null
  }

  export type ReviewMaxAggregateOutputType = {
    id: number | null
    user_id: number | null
    hotel_id: number | null
    rating: number | null
    comment: string | null
    review_date: Date | null
  }

  export type ReviewCountAggregateOutputType = {
    id: number
    user_id: number
    hotel_id: number
    rating: number
    comment: number
    review_date: number
    _all: number
  }


  export type ReviewAvgAggregateInputType = {
    id?: true
    user_id?: true
    hotel_id?: true
    rating?: true
  }

  export type ReviewSumAggregateInputType = {
    id?: true
    user_id?: true
    hotel_id?: true
    rating?: true
  }

  export type ReviewMinAggregateInputType = {
    id?: true
    user_id?: true
    hotel_id?: true
    rating?: true
    comment?: true
    review_date?: true
  }

  export type ReviewMaxAggregateInputType = {
    id?: true
    user_id?: true
    hotel_id?: true
    rating?: true
    comment?: true
    review_date?: true
  }

  export type ReviewCountAggregateInputType = {
    id?: true
    user_id?: true
    hotel_id?: true
    rating?: true
    comment?: true
    review_date?: true
    _all?: true
  }

  export type ReviewAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which review to aggregate.
     */
    where?: reviewWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of reviews to fetch.
     */
    orderBy?: reviewOrderByWithRelationInput | reviewOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: reviewWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` reviews from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` reviews.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned reviews
    **/
    _count?: true | ReviewCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ReviewAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ReviewSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ReviewMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ReviewMaxAggregateInputType
  }

  export type GetReviewAggregateType<T extends ReviewAggregateArgs> = {
        [P in keyof T & keyof AggregateReview]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateReview[P]>
      : GetScalarType<T[P], AggregateReview[P]>
  }




  export type reviewGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: reviewWhereInput
    orderBy?: reviewOrderByWithAggregationInput | reviewOrderByWithAggregationInput[]
    by: ReviewScalarFieldEnum[] | ReviewScalarFieldEnum
    having?: reviewScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ReviewCountAggregateInputType | true
    _avg?: ReviewAvgAggregateInputType
    _sum?: ReviewSumAggregateInputType
    _min?: ReviewMinAggregateInputType
    _max?: ReviewMaxAggregateInputType
  }

  export type ReviewGroupByOutputType = {
    id: number
    user_id: number
    hotel_id: number
    rating: number
    comment: string
    review_date: Date
    _count: ReviewCountAggregateOutputType | null
    _avg: ReviewAvgAggregateOutputType | null
    _sum: ReviewSumAggregateOutputType | null
    _min: ReviewMinAggregateOutputType | null
    _max: ReviewMaxAggregateOutputType | null
  }

  type GetReviewGroupByPayload<T extends reviewGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ReviewGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ReviewGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ReviewGroupByOutputType[P]>
            : GetScalarType<T[P], ReviewGroupByOutputType[P]>
        }
      >
    >


  export type reviewSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    user_id?: boolean
    hotel_id?: boolean
    rating?: boolean
    comment?: boolean
    review_date?: boolean
    user?: boolean | userDefaultArgs<ExtArgs>
    hotel?: boolean | hotelDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["review"]>

  export type reviewSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    user_id?: boolean
    hotel_id?: boolean
    rating?: boolean
    comment?: boolean
    review_date?: boolean
    user?: boolean | userDefaultArgs<ExtArgs>
    hotel?: boolean | hotelDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["review"]>

  export type reviewSelectScalar = {
    id?: boolean
    user_id?: boolean
    hotel_id?: boolean
    rating?: boolean
    comment?: boolean
    review_date?: boolean
  }

  export type reviewInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | userDefaultArgs<ExtArgs>
    hotel?: boolean | hotelDefaultArgs<ExtArgs>
  }
  export type reviewIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | userDefaultArgs<ExtArgs>
    hotel?: boolean | hotelDefaultArgs<ExtArgs>
  }

  export type $reviewPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "review"
    objects: {
      user: Prisma.$userPayload<ExtArgs>
      hotel: Prisma.$hotelPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      user_id: number
      hotel_id: number
      rating: number
      comment: string
      review_date: Date
    }, ExtArgs["result"]["review"]>
    composites: {}
  }

  type reviewGetPayload<S extends boolean | null | undefined | reviewDefaultArgs> = $Result.GetResult<Prisma.$reviewPayload, S>

  type reviewCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<reviewFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ReviewCountAggregateInputType | true
    }

  export interface reviewDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['review'], meta: { name: 'review' } }
    /**
     * Find zero or one Review that matches the filter.
     * @param {reviewFindUniqueArgs} args - Arguments to find a Review
     * @example
     * // Get one Review
     * const review = await prisma.review.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends reviewFindUniqueArgs>(args: SelectSubset<T, reviewFindUniqueArgs<ExtArgs>>): Prisma__reviewClient<$Result.GetResult<Prisma.$reviewPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Review that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {reviewFindUniqueOrThrowArgs} args - Arguments to find a Review
     * @example
     * // Get one Review
     * const review = await prisma.review.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends reviewFindUniqueOrThrowArgs>(args: SelectSubset<T, reviewFindUniqueOrThrowArgs<ExtArgs>>): Prisma__reviewClient<$Result.GetResult<Prisma.$reviewPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Review that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {reviewFindFirstArgs} args - Arguments to find a Review
     * @example
     * // Get one Review
     * const review = await prisma.review.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends reviewFindFirstArgs>(args?: SelectSubset<T, reviewFindFirstArgs<ExtArgs>>): Prisma__reviewClient<$Result.GetResult<Prisma.$reviewPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Review that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {reviewFindFirstOrThrowArgs} args - Arguments to find a Review
     * @example
     * // Get one Review
     * const review = await prisma.review.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends reviewFindFirstOrThrowArgs>(args?: SelectSubset<T, reviewFindFirstOrThrowArgs<ExtArgs>>): Prisma__reviewClient<$Result.GetResult<Prisma.$reviewPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Reviews that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {reviewFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Reviews
     * const reviews = await prisma.review.findMany()
     * 
     * // Get first 10 Reviews
     * const reviews = await prisma.review.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const reviewWithIdOnly = await prisma.review.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends reviewFindManyArgs>(args?: SelectSubset<T, reviewFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$reviewPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Review.
     * @param {reviewCreateArgs} args - Arguments to create a Review.
     * @example
     * // Create one Review
     * const Review = await prisma.review.create({
     *   data: {
     *     // ... data to create a Review
     *   }
     * })
     * 
     */
    create<T extends reviewCreateArgs>(args: SelectSubset<T, reviewCreateArgs<ExtArgs>>): Prisma__reviewClient<$Result.GetResult<Prisma.$reviewPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Reviews.
     * @param {reviewCreateManyArgs} args - Arguments to create many Reviews.
     * @example
     * // Create many Reviews
     * const review = await prisma.review.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends reviewCreateManyArgs>(args?: SelectSubset<T, reviewCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Reviews and returns the data saved in the database.
     * @param {reviewCreateManyAndReturnArgs} args - Arguments to create many Reviews.
     * @example
     * // Create many Reviews
     * const review = await prisma.review.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Reviews and only return the `id`
     * const reviewWithIdOnly = await prisma.review.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends reviewCreateManyAndReturnArgs>(args?: SelectSubset<T, reviewCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$reviewPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Review.
     * @param {reviewDeleteArgs} args - Arguments to delete one Review.
     * @example
     * // Delete one Review
     * const Review = await prisma.review.delete({
     *   where: {
     *     // ... filter to delete one Review
     *   }
     * })
     * 
     */
    delete<T extends reviewDeleteArgs>(args: SelectSubset<T, reviewDeleteArgs<ExtArgs>>): Prisma__reviewClient<$Result.GetResult<Prisma.$reviewPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Review.
     * @param {reviewUpdateArgs} args - Arguments to update one Review.
     * @example
     * // Update one Review
     * const review = await prisma.review.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends reviewUpdateArgs>(args: SelectSubset<T, reviewUpdateArgs<ExtArgs>>): Prisma__reviewClient<$Result.GetResult<Prisma.$reviewPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Reviews.
     * @param {reviewDeleteManyArgs} args - Arguments to filter Reviews to delete.
     * @example
     * // Delete a few Reviews
     * const { count } = await prisma.review.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends reviewDeleteManyArgs>(args?: SelectSubset<T, reviewDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Reviews.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {reviewUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Reviews
     * const review = await prisma.review.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends reviewUpdateManyArgs>(args: SelectSubset<T, reviewUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Review.
     * @param {reviewUpsertArgs} args - Arguments to update or create a Review.
     * @example
     * // Update or create a Review
     * const review = await prisma.review.upsert({
     *   create: {
     *     // ... data to create a Review
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Review we want to update
     *   }
     * })
     */
    upsert<T extends reviewUpsertArgs>(args: SelectSubset<T, reviewUpsertArgs<ExtArgs>>): Prisma__reviewClient<$Result.GetResult<Prisma.$reviewPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Reviews.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {reviewCountArgs} args - Arguments to filter Reviews to count.
     * @example
     * // Count the number of Reviews
     * const count = await prisma.review.count({
     *   where: {
     *     // ... the filter for the Reviews we want to count
     *   }
     * })
    **/
    count<T extends reviewCountArgs>(
      args?: Subset<T, reviewCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ReviewCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Review.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReviewAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ReviewAggregateArgs>(args: Subset<T, ReviewAggregateArgs>): Prisma.PrismaPromise<GetReviewAggregateType<T>>

    /**
     * Group by Review.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {reviewGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends reviewGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: reviewGroupByArgs['orderBy'] }
        : { orderBy?: reviewGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, reviewGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetReviewGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the review model
   */
  readonly fields: reviewFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for review.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__reviewClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends userDefaultArgs<ExtArgs> = {}>(args?: Subset<T, userDefaultArgs<ExtArgs>>): Prisma__userClient<$Result.GetResult<Prisma.$userPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    hotel<T extends hotelDefaultArgs<ExtArgs> = {}>(args?: Subset<T, hotelDefaultArgs<ExtArgs>>): Prisma__hotelClient<$Result.GetResult<Prisma.$hotelPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the review model
   */ 
  interface reviewFieldRefs {
    readonly id: FieldRef<"review", 'Int'>
    readonly user_id: FieldRef<"review", 'Int'>
    readonly hotel_id: FieldRef<"review", 'Int'>
    readonly rating: FieldRef<"review", 'Float'>
    readonly comment: FieldRef<"review", 'String'>
    readonly review_date: FieldRef<"review", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * review findUnique
   */
  export type reviewFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the review
     */
    select?: reviewSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: reviewInclude<ExtArgs> | null
    /**
     * Filter, which review to fetch.
     */
    where: reviewWhereUniqueInput
  }

  /**
   * review findUniqueOrThrow
   */
  export type reviewFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the review
     */
    select?: reviewSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: reviewInclude<ExtArgs> | null
    /**
     * Filter, which review to fetch.
     */
    where: reviewWhereUniqueInput
  }

  /**
   * review findFirst
   */
  export type reviewFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the review
     */
    select?: reviewSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: reviewInclude<ExtArgs> | null
    /**
     * Filter, which review to fetch.
     */
    where?: reviewWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of reviews to fetch.
     */
    orderBy?: reviewOrderByWithRelationInput | reviewOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for reviews.
     */
    cursor?: reviewWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` reviews from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` reviews.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of reviews.
     */
    distinct?: ReviewScalarFieldEnum | ReviewScalarFieldEnum[]
  }

  /**
   * review findFirstOrThrow
   */
  export type reviewFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the review
     */
    select?: reviewSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: reviewInclude<ExtArgs> | null
    /**
     * Filter, which review to fetch.
     */
    where?: reviewWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of reviews to fetch.
     */
    orderBy?: reviewOrderByWithRelationInput | reviewOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for reviews.
     */
    cursor?: reviewWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` reviews from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` reviews.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of reviews.
     */
    distinct?: ReviewScalarFieldEnum | ReviewScalarFieldEnum[]
  }

  /**
   * review findMany
   */
  export type reviewFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the review
     */
    select?: reviewSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: reviewInclude<ExtArgs> | null
    /**
     * Filter, which reviews to fetch.
     */
    where?: reviewWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of reviews to fetch.
     */
    orderBy?: reviewOrderByWithRelationInput | reviewOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing reviews.
     */
    cursor?: reviewWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` reviews from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` reviews.
     */
    skip?: number
    distinct?: ReviewScalarFieldEnum | ReviewScalarFieldEnum[]
  }

  /**
   * review create
   */
  export type reviewCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the review
     */
    select?: reviewSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: reviewInclude<ExtArgs> | null
    /**
     * The data needed to create a review.
     */
    data: XOR<reviewCreateInput, reviewUncheckedCreateInput>
  }

  /**
   * review createMany
   */
  export type reviewCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many reviews.
     */
    data: reviewCreateManyInput | reviewCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * review createManyAndReturn
   */
  export type reviewCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the review
     */
    select?: reviewSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many reviews.
     */
    data: reviewCreateManyInput | reviewCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: reviewIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * review update
   */
  export type reviewUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the review
     */
    select?: reviewSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: reviewInclude<ExtArgs> | null
    /**
     * The data needed to update a review.
     */
    data: XOR<reviewUpdateInput, reviewUncheckedUpdateInput>
    /**
     * Choose, which review to update.
     */
    where: reviewWhereUniqueInput
  }

  /**
   * review updateMany
   */
  export type reviewUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update reviews.
     */
    data: XOR<reviewUpdateManyMutationInput, reviewUncheckedUpdateManyInput>
    /**
     * Filter which reviews to update
     */
    where?: reviewWhereInput
  }

  /**
   * review upsert
   */
  export type reviewUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the review
     */
    select?: reviewSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: reviewInclude<ExtArgs> | null
    /**
     * The filter to search for the review to update in case it exists.
     */
    where: reviewWhereUniqueInput
    /**
     * In case the review found by the `where` argument doesn't exist, create a new review with this data.
     */
    create: XOR<reviewCreateInput, reviewUncheckedCreateInput>
    /**
     * In case the review was found with the provided `where` argument, update it with this data.
     */
    update: XOR<reviewUpdateInput, reviewUncheckedUpdateInput>
  }

  /**
   * review delete
   */
  export type reviewDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the review
     */
    select?: reviewSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: reviewInclude<ExtArgs> | null
    /**
     * Filter which review to delete.
     */
    where: reviewWhereUniqueInput
  }

  /**
   * review deleteMany
   */
  export type reviewDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which reviews to delete
     */
    where?: reviewWhereInput
  }

  /**
   * review without action
   */
  export type reviewDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the review
     */
    select?: reviewSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: reviewInclude<ExtArgs> | null
  }


  /**
   * Model promotion
   */

  export type AggregatePromotion = {
    _count: PromotionCountAggregateOutputType | null
    _avg: PromotionAvgAggregateOutputType | null
    _sum: PromotionSumAggregateOutputType | null
    _min: PromotionMinAggregateOutputType | null
    _max: PromotionMaxAggregateOutputType | null
  }

  export type PromotionAvgAggregateOutputType = {
    id: number | null
    hotel_id: number | null
    discount_percentage: number | null
  }

  export type PromotionSumAggregateOutputType = {
    id: number | null
    hotel_id: number | null
    discount_percentage: number | null
  }

  export type PromotionMinAggregateOutputType = {
    id: number | null
    hotel_id: number | null
    promotion_type: string | null
    discount_percentage: number | null
    start_date: Date | null
    end_date: Date | null
  }

  export type PromotionMaxAggregateOutputType = {
    id: number | null
    hotel_id: number | null
    promotion_type: string | null
    discount_percentage: number | null
    start_date: Date | null
    end_date: Date | null
  }

  export type PromotionCountAggregateOutputType = {
    id: number
    hotel_id: number
    promotion_type: number
    discount_percentage: number
    start_date: number
    end_date: number
    _all: number
  }


  export type PromotionAvgAggregateInputType = {
    id?: true
    hotel_id?: true
    discount_percentage?: true
  }

  export type PromotionSumAggregateInputType = {
    id?: true
    hotel_id?: true
    discount_percentage?: true
  }

  export type PromotionMinAggregateInputType = {
    id?: true
    hotel_id?: true
    promotion_type?: true
    discount_percentage?: true
    start_date?: true
    end_date?: true
  }

  export type PromotionMaxAggregateInputType = {
    id?: true
    hotel_id?: true
    promotion_type?: true
    discount_percentage?: true
    start_date?: true
    end_date?: true
  }

  export type PromotionCountAggregateInputType = {
    id?: true
    hotel_id?: true
    promotion_type?: true
    discount_percentage?: true
    start_date?: true
    end_date?: true
    _all?: true
  }

  export type PromotionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which promotion to aggregate.
     */
    where?: promotionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of promotions to fetch.
     */
    orderBy?: promotionOrderByWithRelationInput | promotionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: promotionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` promotions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` promotions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned promotions
    **/
    _count?: true | PromotionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PromotionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PromotionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PromotionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PromotionMaxAggregateInputType
  }

  export type GetPromotionAggregateType<T extends PromotionAggregateArgs> = {
        [P in keyof T & keyof AggregatePromotion]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePromotion[P]>
      : GetScalarType<T[P], AggregatePromotion[P]>
  }




  export type promotionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: promotionWhereInput
    orderBy?: promotionOrderByWithAggregationInput | promotionOrderByWithAggregationInput[]
    by: PromotionScalarFieldEnum[] | PromotionScalarFieldEnum
    having?: promotionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PromotionCountAggregateInputType | true
    _avg?: PromotionAvgAggregateInputType
    _sum?: PromotionSumAggregateInputType
    _min?: PromotionMinAggregateInputType
    _max?: PromotionMaxAggregateInputType
  }

  export type PromotionGroupByOutputType = {
    id: number
    hotel_id: number
    promotion_type: string
    discount_percentage: number
    start_date: Date
    end_date: Date
    _count: PromotionCountAggregateOutputType | null
    _avg: PromotionAvgAggregateOutputType | null
    _sum: PromotionSumAggregateOutputType | null
    _min: PromotionMinAggregateOutputType | null
    _max: PromotionMaxAggregateOutputType | null
  }

  type GetPromotionGroupByPayload<T extends promotionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PromotionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PromotionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PromotionGroupByOutputType[P]>
            : GetScalarType<T[P], PromotionGroupByOutputType[P]>
        }
      >
    >


  export type promotionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    hotel_id?: boolean
    promotion_type?: boolean
    discount_percentage?: boolean
    start_date?: boolean
    end_date?: boolean
    hotel?: boolean | hotelDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["promotion"]>

  export type promotionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    hotel_id?: boolean
    promotion_type?: boolean
    discount_percentage?: boolean
    start_date?: boolean
    end_date?: boolean
    hotel?: boolean | hotelDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["promotion"]>

  export type promotionSelectScalar = {
    id?: boolean
    hotel_id?: boolean
    promotion_type?: boolean
    discount_percentage?: boolean
    start_date?: boolean
    end_date?: boolean
  }

  export type promotionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    hotel?: boolean | hotelDefaultArgs<ExtArgs>
  }
  export type promotionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    hotel?: boolean | hotelDefaultArgs<ExtArgs>
  }

  export type $promotionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "promotion"
    objects: {
      hotel: Prisma.$hotelPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      hotel_id: number
      promotion_type: string
      discount_percentage: number
      start_date: Date
      end_date: Date
    }, ExtArgs["result"]["promotion"]>
    composites: {}
  }

  type promotionGetPayload<S extends boolean | null | undefined | promotionDefaultArgs> = $Result.GetResult<Prisma.$promotionPayload, S>

  type promotionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<promotionFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: PromotionCountAggregateInputType | true
    }

  export interface promotionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['promotion'], meta: { name: 'promotion' } }
    /**
     * Find zero or one Promotion that matches the filter.
     * @param {promotionFindUniqueArgs} args - Arguments to find a Promotion
     * @example
     * // Get one Promotion
     * const promotion = await prisma.promotion.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends promotionFindUniqueArgs>(args: SelectSubset<T, promotionFindUniqueArgs<ExtArgs>>): Prisma__promotionClient<$Result.GetResult<Prisma.$promotionPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Promotion that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {promotionFindUniqueOrThrowArgs} args - Arguments to find a Promotion
     * @example
     * // Get one Promotion
     * const promotion = await prisma.promotion.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends promotionFindUniqueOrThrowArgs>(args: SelectSubset<T, promotionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__promotionClient<$Result.GetResult<Prisma.$promotionPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Promotion that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {promotionFindFirstArgs} args - Arguments to find a Promotion
     * @example
     * // Get one Promotion
     * const promotion = await prisma.promotion.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends promotionFindFirstArgs>(args?: SelectSubset<T, promotionFindFirstArgs<ExtArgs>>): Prisma__promotionClient<$Result.GetResult<Prisma.$promotionPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Promotion that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {promotionFindFirstOrThrowArgs} args - Arguments to find a Promotion
     * @example
     * // Get one Promotion
     * const promotion = await prisma.promotion.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends promotionFindFirstOrThrowArgs>(args?: SelectSubset<T, promotionFindFirstOrThrowArgs<ExtArgs>>): Prisma__promotionClient<$Result.GetResult<Prisma.$promotionPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Promotions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {promotionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Promotions
     * const promotions = await prisma.promotion.findMany()
     * 
     * // Get first 10 Promotions
     * const promotions = await prisma.promotion.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const promotionWithIdOnly = await prisma.promotion.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends promotionFindManyArgs>(args?: SelectSubset<T, promotionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$promotionPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Promotion.
     * @param {promotionCreateArgs} args - Arguments to create a Promotion.
     * @example
     * // Create one Promotion
     * const Promotion = await prisma.promotion.create({
     *   data: {
     *     // ... data to create a Promotion
     *   }
     * })
     * 
     */
    create<T extends promotionCreateArgs>(args: SelectSubset<T, promotionCreateArgs<ExtArgs>>): Prisma__promotionClient<$Result.GetResult<Prisma.$promotionPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Promotions.
     * @param {promotionCreateManyArgs} args - Arguments to create many Promotions.
     * @example
     * // Create many Promotions
     * const promotion = await prisma.promotion.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends promotionCreateManyArgs>(args?: SelectSubset<T, promotionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Promotions and returns the data saved in the database.
     * @param {promotionCreateManyAndReturnArgs} args - Arguments to create many Promotions.
     * @example
     * // Create many Promotions
     * const promotion = await prisma.promotion.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Promotions and only return the `id`
     * const promotionWithIdOnly = await prisma.promotion.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends promotionCreateManyAndReturnArgs>(args?: SelectSubset<T, promotionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$promotionPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Promotion.
     * @param {promotionDeleteArgs} args - Arguments to delete one Promotion.
     * @example
     * // Delete one Promotion
     * const Promotion = await prisma.promotion.delete({
     *   where: {
     *     // ... filter to delete one Promotion
     *   }
     * })
     * 
     */
    delete<T extends promotionDeleteArgs>(args: SelectSubset<T, promotionDeleteArgs<ExtArgs>>): Prisma__promotionClient<$Result.GetResult<Prisma.$promotionPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Promotion.
     * @param {promotionUpdateArgs} args - Arguments to update one Promotion.
     * @example
     * // Update one Promotion
     * const promotion = await prisma.promotion.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends promotionUpdateArgs>(args: SelectSubset<T, promotionUpdateArgs<ExtArgs>>): Prisma__promotionClient<$Result.GetResult<Prisma.$promotionPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Promotions.
     * @param {promotionDeleteManyArgs} args - Arguments to filter Promotions to delete.
     * @example
     * // Delete a few Promotions
     * const { count } = await prisma.promotion.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends promotionDeleteManyArgs>(args?: SelectSubset<T, promotionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Promotions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {promotionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Promotions
     * const promotion = await prisma.promotion.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends promotionUpdateManyArgs>(args: SelectSubset<T, promotionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Promotion.
     * @param {promotionUpsertArgs} args - Arguments to update or create a Promotion.
     * @example
     * // Update or create a Promotion
     * const promotion = await prisma.promotion.upsert({
     *   create: {
     *     // ... data to create a Promotion
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Promotion we want to update
     *   }
     * })
     */
    upsert<T extends promotionUpsertArgs>(args: SelectSubset<T, promotionUpsertArgs<ExtArgs>>): Prisma__promotionClient<$Result.GetResult<Prisma.$promotionPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Promotions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {promotionCountArgs} args - Arguments to filter Promotions to count.
     * @example
     * // Count the number of Promotions
     * const count = await prisma.promotion.count({
     *   where: {
     *     // ... the filter for the Promotions we want to count
     *   }
     * })
    **/
    count<T extends promotionCountArgs>(
      args?: Subset<T, promotionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PromotionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Promotion.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PromotionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PromotionAggregateArgs>(args: Subset<T, PromotionAggregateArgs>): Prisma.PrismaPromise<GetPromotionAggregateType<T>>

    /**
     * Group by Promotion.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {promotionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends promotionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: promotionGroupByArgs['orderBy'] }
        : { orderBy?: promotionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, promotionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPromotionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the promotion model
   */
  readonly fields: promotionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for promotion.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__promotionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    hotel<T extends hotelDefaultArgs<ExtArgs> = {}>(args?: Subset<T, hotelDefaultArgs<ExtArgs>>): Prisma__hotelClient<$Result.GetResult<Prisma.$hotelPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the promotion model
   */ 
  interface promotionFieldRefs {
    readonly id: FieldRef<"promotion", 'Int'>
    readonly hotel_id: FieldRef<"promotion", 'Int'>
    readonly promotion_type: FieldRef<"promotion", 'String'>
    readonly discount_percentage: FieldRef<"promotion", 'Float'>
    readonly start_date: FieldRef<"promotion", 'DateTime'>
    readonly end_date: FieldRef<"promotion", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * promotion findUnique
   */
  export type promotionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the promotion
     */
    select?: promotionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: promotionInclude<ExtArgs> | null
    /**
     * Filter, which promotion to fetch.
     */
    where: promotionWhereUniqueInput
  }

  /**
   * promotion findUniqueOrThrow
   */
  export type promotionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the promotion
     */
    select?: promotionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: promotionInclude<ExtArgs> | null
    /**
     * Filter, which promotion to fetch.
     */
    where: promotionWhereUniqueInput
  }

  /**
   * promotion findFirst
   */
  export type promotionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the promotion
     */
    select?: promotionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: promotionInclude<ExtArgs> | null
    /**
     * Filter, which promotion to fetch.
     */
    where?: promotionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of promotions to fetch.
     */
    orderBy?: promotionOrderByWithRelationInput | promotionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for promotions.
     */
    cursor?: promotionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` promotions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` promotions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of promotions.
     */
    distinct?: PromotionScalarFieldEnum | PromotionScalarFieldEnum[]
  }

  /**
   * promotion findFirstOrThrow
   */
  export type promotionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the promotion
     */
    select?: promotionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: promotionInclude<ExtArgs> | null
    /**
     * Filter, which promotion to fetch.
     */
    where?: promotionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of promotions to fetch.
     */
    orderBy?: promotionOrderByWithRelationInput | promotionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for promotions.
     */
    cursor?: promotionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` promotions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` promotions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of promotions.
     */
    distinct?: PromotionScalarFieldEnum | PromotionScalarFieldEnum[]
  }

  /**
   * promotion findMany
   */
  export type promotionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the promotion
     */
    select?: promotionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: promotionInclude<ExtArgs> | null
    /**
     * Filter, which promotions to fetch.
     */
    where?: promotionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of promotions to fetch.
     */
    orderBy?: promotionOrderByWithRelationInput | promotionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing promotions.
     */
    cursor?: promotionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` promotions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` promotions.
     */
    skip?: number
    distinct?: PromotionScalarFieldEnum | PromotionScalarFieldEnum[]
  }

  /**
   * promotion create
   */
  export type promotionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the promotion
     */
    select?: promotionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: promotionInclude<ExtArgs> | null
    /**
     * The data needed to create a promotion.
     */
    data: XOR<promotionCreateInput, promotionUncheckedCreateInput>
  }

  /**
   * promotion createMany
   */
  export type promotionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many promotions.
     */
    data: promotionCreateManyInput | promotionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * promotion createManyAndReturn
   */
  export type promotionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the promotion
     */
    select?: promotionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many promotions.
     */
    data: promotionCreateManyInput | promotionCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: promotionIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * promotion update
   */
  export type promotionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the promotion
     */
    select?: promotionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: promotionInclude<ExtArgs> | null
    /**
     * The data needed to update a promotion.
     */
    data: XOR<promotionUpdateInput, promotionUncheckedUpdateInput>
    /**
     * Choose, which promotion to update.
     */
    where: promotionWhereUniqueInput
  }

  /**
   * promotion updateMany
   */
  export type promotionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update promotions.
     */
    data: XOR<promotionUpdateManyMutationInput, promotionUncheckedUpdateManyInput>
    /**
     * Filter which promotions to update
     */
    where?: promotionWhereInput
  }

  /**
   * promotion upsert
   */
  export type promotionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the promotion
     */
    select?: promotionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: promotionInclude<ExtArgs> | null
    /**
     * The filter to search for the promotion to update in case it exists.
     */
    where: promotionWhereUniqueInput
    /**
     * In case the promotion found by the `where` argument doesn't exist, create a new promotion with this data.
     */
    create: XOR<promotionCreateInput, promotionUncheckedCreateInput>
    /**
     * In case the promotion was found with the provided `where` argument, update it with this data.
     */
    update: XOR<promotionUpdateInput, promotionUncheckedUpdateInput>
  }

  /**
   * promotion delete
   */
  export type promotionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the promotion
     */
    select?: promotionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: promotionInclude<ExtArgs> | null
    /**
     * Filter which promotion to delete.
     */
    where: promotionWhereUniqueInput
  }

  /**
   * promotion deleteMany
   */
  export type promotionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which promotions to delete
     */
    where?: promotionWhereInput
  }

  /**
   * promotion without action
   */
  export type promotionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the promotion
     */
    select?: promotionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: promotionInclude<ExtArgs> | null
  }


  /**
   * Model payment_record
   */

  export type AggregatePayment_record = {
    _count: Payment_recordCountAggregateOutputType | null
    _avg: Payment_recordAvgAggregateOutputType | null
    _sum: Payment_recordSumAggregateOutputType | null
    _min: Payment_recordMinAggregateOutputType | null
    _max: Payment_recordMaxAggregateOutputType | null
  }

  export type Payment_recordAvgAggregateOutputType = {
    id: number | null
    reservation_id: number | null
    amount: number | null
  }

  export type Payment_recordSumAggregateOutputType = {
    id: number | null
    reservation_id: number | null
    amount: number | null
  }

  export type Payment_recordMinAggregateOutputType = {
    id: number | null
    reservation_id: number | null
    amount: number | null
    payment_date: Date | null
    payment_method: string | null
  }

  export type Payment_recordMaxAggregateOutputType = {
    id: number | null
    reservation_id: number | null
    amount: number | null
    payment_date: Date | null
    payment_method: string | null
  }

  export type Payment_recordCountAggregateOutputType = {
    id: number
    reservation_id: number
    amount: number
    payment_date: number
    payment_method: number
    _all: number
  }


  export type Payment_recordAvgAggregateInputType = {
    id?: true
    reservation_id?: true
    amount?: true
  }

  export type Payment_recordSumAggregateInputType = {
    id?: true
    reservation_id?: true
    amount?: true
  }

  export type Payment_recordMinAggregateInputType = {
    id?: true
    reservation_id?: true
    amount?: true
    payment_date?: true
    payment_method?: true
  }

  export type Payment_recordMaxAggregateInputType = {
    id?: true
    reservation_id?: true
    amount?: true
    payment_date?: true
    payment_method?: true
  }

  export type Payment_recordCountAggregateInputType = {
    id?: true
    reservation_id?: true
    amount?: true
    payment_date?: true
    payment_method?: true
    _all?: true
  }

  export type Payment_recordAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which payment_record to aggregate.
     */
    where?: payment_recordWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of payment_records to fetch.
     */
    orderBy?: payment_recordOrderByWithRelationInput | payment_recordOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: payment_recordWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` payment_records from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` payment_records.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned payment_records
    **/
    _count?: true | Payment_recordCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Payment_recordAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Payment_recordSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Payment_recordMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Payment_recordMaxAggregateInputType
  }

  export type GetPayment_recordAggregateType<T extends Payment_recordAggregateArgs> = {
        [P in keyof T & keyof AggregatePayment_record]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePayment_record[P]>
      : GetScalarType<T[P], AggregatePayment_record[P]>
  }




  export type payment_recordGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: payment_recordWhereInput
    orderBy?: payment_recordOrderByWithAggregationInput | payment_recordOrderByWithAggregationInput[]
    by: Payment_recordScalarFieldEnum[] | Payment_recordScalarFieldEnum
    having?: payment_recordScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Payment_recordCountAggregateInputType | true
    _avg?: Payment_recordAvgAggregateInputType
    _sum?: Payment_recordSumAggregateInputType
    _min?: Payment_recordMinAggregateInputType
    _max?: Payment_recordMaxAggregateInputType
  }

  export type Payment_recordGroupByOutputType = {
    id: number
    reservation_id: number
    amount: number
    payment_date: Date
    payment_method: string
    _count: Payment_recordCountAggregateOutputType | null
    _avg: Payment_recordAvgAggregateOutputType | null
    _sum: Payment_recordSumAggregateOutputType | null
    _min: Payment_recordMinAggregateOutputType | null
    _max: Payment_recordMaxAggregateOutputType | null
  }

  type GetPayment_recordGroupByPayload<T extends payment_recordGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<Payment_recordGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Payment_recordGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Payment_recordGroupByOutputType[P]>
            : GetScalarType<T[P], Payment_recordGroupByOutputType[P]>
        }
      >
    >


  export type payment_recordSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    reservation_id?: boolean
    amount?: boolean
    payment_date?: boolean
    payment_method?: boolean
    reservation?: boolean | reservationDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["payment_record"]>

  export type payment_recordSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    reservation_id?: boolean
    amount?: boolean
    payment_date?: boolean
    payment_method?: boolean
    reservation?: boolean | reservationDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["payment_record"]>

  export type payment_recordSelectScalar = {
    id?: boolean
    reservation_id?: boolean
    amount?: boolean
    payment_date?: boolean
    payment_method?: boolean
  }

  export type payment_recordInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    reservation?: boolean | reservationDefaultArgs<ExtArgs>
  }
  export type payment_recordIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    reservation?: boolean | reservationDefaultArgs<ExtArgs>
  }

  export type $payment_recordPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "payment_record"
    objects: {
      reservation: Prisma.$reservationPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      reservation_id: number
      amount: number
      payment_date: Date
      payment_method: string
    }, ExtArgs["result"]["payment_record"]>
    composites: {}
  }

  type payment_recordGetPayload<S extends boolean | null | undefined | payment_recordDefaultArgs> = $Result.GetResult<Prisma.$payment_recordPayload, S>

  type payment_recordCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<payment_recordFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: Payment_recordCountAggregateInputType | true
    }

  export interface payment_recordDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['payment_record'], meta: { name: 'payment_record' } }
    /**
     * Find zero or one Payment_record that matches the filter.
     * @param {payment_recordFindUniqueArgs} args - Arguments to find a Payment_record
     * @example
     * // Get one Payment_record
     * const payment_record = await prisma.payment_record.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends payment_recordFindUniqueArgs>(args: SelectSubset<T, payment_recordFindUniqueArgs<ExtArgs>>): Prisma__payment_recordClient<$Result.GetResult<Prisma.$payment_recordPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Payment_record that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {payment_recordFindUniqueOrThrowArgs} args - Arguments to find a Payment_record
     * @example
     * // Get one Payment_record
     * const payment_record = await prisma.payment_record.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends payment_recordFindUniqueOrThrowArgs>(args: SelectSubset<T, payment_recordFindUniqueOrThrowArgs<ExtArgs>>): Prisma__payment_recordClient<$Result.GetResult<Prisma.$payment_recordPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Payment_record that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {payment_recordFindFirstArgs} args - Arguments to find a Payment_record
     * @example
     * // Get one Payment_record
     * const payment_record = await prisma.payment_record.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends payment_recordFindFirstArgs>(args?: SelectSubset<T, payment_recordFindFirstArgs<ExtArgs>>): Prisma__payment_recordClient<$Result.GetResult<Prisma.$payment_recordPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Payment_record that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {payment_recordFindFirstOrThrowArgs} args - Arguments to find a Payment_record
     * @example
     * // Get one Payment_record
     * const payment_record = await prisma.payment_record.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends payment_recordFindFirstOrThrowArgs>(args?: SelectSubset<T, payment_recordFindFirstOrThrowArgs<ExtArgs>>): Prisma__payment_recordClient<$Result.GetResult<Prisma.$payment_recordPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Payment_records that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {payment_recordFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Payment_records
     * const payment_records = await prisma.payment_record.findMany()
     * 
     * // Get first 10 Payment_records
     * const payment_records = await prisma.payment_record.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const payment_recordWithIdOnly = await prisma.payment_record.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends payment_recordFindManyArgs>(args?: SelectSubset<T, payment_recordFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$payment_recordPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Payment_record.
     * @param {payment_recordCreateArgs} args - Arguments to create a Payment_record.
     * @example
     * // Create one Payment_record
     * const Payment_record = await prisma.payment_record.create({
     *   data: {
     *     // ... data to create a Payment_record
     *   }
     * })
     * 
     */
    create<T extends payment_recordCreateArgs>(args: SelectSubset<T, payment_recordCreateArgs<ExtArgs>>): Prisma__payment_recordClient<$Result.GetResult<Prisma.$payment_recordPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Payment_records.
     * @param {payment_recordCreateManyArgs} args - Arguments to create many Payment_records.
     * @example
     * // Create many Payment_records
     * const payment_record = await prisma.payment_record.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends payment_recordCreateManyArgs>(args?: SelectSubset<T, payment_recordCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Payment_records and returns the data saved in the database.
     * @param {payment_recordCreateManyAndReturnArgs} args - Arguments to create many Payment_records.
     * @example
     * // Create many Payment_records
     * const payment_record = await prisma.payment_record.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Payment_records and only return the `id`
     * const payment_recordWithIdOnly = await prisma.payment_record.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends payment_recordCreateManyAndReturnArgs>(args?: SelectSubset<T, payment_recordCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$payment_recordPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Payment_record.
     * @param {payment_recordDeleteArgs} args - Arguments to delete one Payment_record.
     * @example
     * // Delete one Payment_record
     * const Payment_record = await prisma.payment_record.delete({
     *   where: {
     *     // ... filter to delete one Payment_record
     *   }
     * })
     * 
     */
    delete<T extends payment_recordDeleteArgs>(args: SelectSubset<T, payment_recordDeleteArgs<ExtArgs>>): Prisma__payment_recordClient<$Result.GetResult<Prisma.$payment_recordPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Payment_record.
     * @param {payment_recordUpdateArgs} args - Arguments to update one Payment_record.
     * @example
     * // Update one Payment_record
     * const payment_record = await prisma.payment_record.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends payment_recordUpdateArgs>(args: SelectSubset<T, payment_recordUpdateArgs<ExtArgs>>): Prisma__payment_recordClient<$Result.GetResult<Prisma.$payment_recordPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Payment_records.
     * @param {payment_recordDeleteManyArgs} args - Arguments to filter Payment_records to delete.
     * @example
     * // Delete a few Payment_records
     * const { count } = await prisma.payment_record.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends payment_recordDeleteManyArgs>(args?: SelectSubset<T, payment_recordDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Payment_records.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {payment_recordUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Payment_records
     * const payment_record = await prisma.payment_record.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends payment_recordUpdateManyArgs>(args: SelectSubset<T, payment_recordUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Payment_record.
     * @param {payment_recordUpsertArgs} args - Arguments to update or create a Payment_record.
     * @example
     * // Update or create a Payment_record
     * const payment_record = await prisma.payment_record.upsert({
     *   create: {
     *     // ... data to create a Payment_record
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Payment_record we want to update
     *   }
     * })
     */
    upsert<T extends payment_recordUpsertArgs>(args: SelectSubset<T, payment_recordUpsertArgs<ExtArgs>>): Prisma__payment_recordClient<$Result.GetResult<Prisma.$payment_recordPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Payment_records.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {payment_recordCountArgs} args - Arguments to filter Payment_records to count.
     * @example
     * // Count the number of Payment_records
     * const count = await prisma.payment_record.count({
     *   where: {
     *     // ... the filter for the Payment_records we want to count
     *   }
     * })
    **/
    count<T extends payment_recordCountArgs>(
      args?: Subset<T, payment_recordCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Payment_recordCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Payment_record.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Payment_recordAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Payment_recordAggregateArgs>(args: Subset<T, Payment_recordAggregateArgs>): Prisma.PrismaPromise<GetPayment_recordAggregateType<T>>

    /**
     * Group by Payment_record.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {payment_recordGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends payment_recordGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: payment_recordGroupByArgs['orderBy'] }
        : { orderBy?: payment_recordGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, payment_recordGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPayment_recordGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the payment_record model
   */
  readonly fields: payment_recordFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for payment_record.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__payment_recordClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    reservation<T extends reservationDefaultArgs<ExtArgs> = {}>(args?: Subset<T, reservationDefaultArgs<ExtArgs>>): Prisma__reservationClient<$Result.GetResult<Prisma.$reservationPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the payment_record model
   */ 
  interface payment_recordFieldRefs {
    readonly id: FieldRef<"payment_record", 'Int'>
    readonly reservation_id: FieldRef<"payment_record", 'Int'>
    readonly amount: FieldRef<"payment_record", 'Float'>
    readonly payment_date: FieldRef<"payment_record", 'DateTime'>
    readonly payment_method: FieldRef<"payment_record", 'String'>
  }
    

  // Custom InputTypes
  /**
   * payment_record findUnique
   */
  export type payment_recordFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the payment_record
     */
    select?: payment_recordSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: payment_recordInclude<ExtArgs> | null
    /**
     * Filter, which payment_record to fetch.
     */
    where: payment_recordWhereUniqueInput
  }

  /**
   * payment_record findUniqueOrThrow
   */
  export type payment_recordFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the payment_record
     */
    select?: payment_recordSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: payment_recordInclude<ExtArgs> | null
    /**
     * Filter, which payment_record to fetch.
     */
    where: payment_recordWhereUniqueInput
  }

  /**
   * payment_record findFirst
   */
  export type payment_recordFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the payment_record
     */
    select?: payment_recordSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: payment_recordInclude<ExtArgs> | null
    /**
     * Filter, which payment_record to fetch.
     */
    where?: payment_recordWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of payment_records to fetch.
     */
    orderBy?: payment_recordOrderByWithRelationInput | payment_recordOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for payment_records.
     */
    cursor?: payment_recordWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` payment_records from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` payment_records.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of payment_records.
     */
    distinct?: Payment_recordScalarFieldEnum | Payment_recordScalarFieldEnum[]
  }

  /**
   * payment_record findFirstOrThrow
   */
  export type payment_recordFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the payment_record
     */
    select?: payment_recordSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: payment_recordInclude<ExtArgs> | null
    /**
     * Filter, which payment_record to fetch.
     */
    where?: payment_recordWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of payment_records to fetch.
     */
    orderBy?: payment_recordOrderByWithRelationInput | payment_recordOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for payment_records.
     */
    cursor?: payment_recordWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` payment_records from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` payment_records.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of payment_records.
     */
    distinct?: Payment_recordScalarFieldEnum | Payment_recordScalarFieldEnum[]
  }

  /**
   * payment_record findMany
   */
  export type payment_recordFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the payment_record
     */
    select?: payment_recordSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: payment_recordInclude<ExtArgs> | null
    /**
     * Filter, which payment_records to fetch.
     */
    where?: payment_recordWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of payment_records to fetch.
     */
    orderBy?: payment_recordOrderByWithRelationInput | payment_recordOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing payment_records.
     */
    cursor?: payment_recordWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` payment_records from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` payment_records.
     */
    skip?: number
    distinct?: Payment_recordScalarFieldEnum | Payment_recordScalarFieldEnum[]
  }

  /**
   * payment_record create
   */
  export type payment_recordCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the payment_record
     */
    select?: payment_recordSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: payment_recordInclude<ExtArgs> | null
    /**
     * The data needed to create a payment_record.
     */
    data: XOR<payment_recordCreateInput, payment_recordUncheckedCreateInput>
  }

  /**
   * payment_record createMany
   */
  export type payment_recordCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many payment_records.
     */
    data: payment_recordCreateManyInput | payment_recordCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * payment_record createManyAndReturn
   */
  export type payment_recordCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the payment_record
     */
    select?: payment_recordSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many payment_records.
     */
    data: payment_recordCreateManyInput | payment_recordCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: payment_recordIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * payment_record update
   */
  export type payment_recordUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the payment_record
     */
    select?: payment_recordSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: payment_recordInclude<ExtArgs> | null
    /**
     * The data needed to update a payment_record.
     */
    data: XOR<payment_recordUpdateInput, payment_recordUncheckedUpdateInput>
    /**
     * Choose, which payment_record to update.
     */
    where: payment_recordWhereUniqueInput
  }

  /**
   * payment_record updateMany
   */
  export type payment_recordUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update payment_records.
     */
    data: XOR<payment_recordUpdateManyMutationInput, payment_recordUncheckedUpdateManyInput>
    /**
     * Filter which payment_records to update
     */
    where?: payment_recordWhereInput
  }

  /**
   * payment_record upsert
   */
  export type payment_recordUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the payment_record
     */
    select?: payment_recordSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: payment_recordInclude<ExtArgs> | null
    /**
     * The filter to search for the payment_record to update in case it exists.
     */
    where: payment_recordWhereUniqueInput
    /**
     * In case the payment_record found by the `where` argument doesn't exist, create a new payment_record with this data.
     */
    create: XOR<payment_recordCreateInput, payment_recordUncheckedCreateInput>
    /**
     * In case the payment_record was found with the provided `where` argument, update it with this data.
     */
    update: XOR<payment_recordUpdateInput, payment_recordUncheckedUpdateInput>
  }

  /**
   * payment_record delete
   */
  export type payment_recordDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the payment_record
     */
    select?: payment_recordSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: payment_recordInclude<ExtArgs> | null
    /**
     * Filter which payment_record to delete.
     */
    where: payment_recordWhereUniqueInput
  }

  /**
   * payment_record deleteMany
   */
  export type payment_recordDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which payment_records to delete
     */
    where?: payment_recordWhereInput
  }

  /**
   * payment_record without action
   */
  export type payment_recordDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the payment_record
     */
    select?: payment_recordSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: payment_recordInclude<ExtArgs> | null
  }


  /**
   * Model room_amenity
   */

  export type AggregateRoom_amenity = {
    _count: Room_amenityCountAggregateOutputType | null
    _avg: Room_amenityAvgAggregateOutputType | null
    _sum: Room_amenitySumAggregateOutputType | null
    _min: Room_amenityMinAggregateOutputType | null
    _max: Room_amenityMaxAggregateOutputType | null
  }

  export type Room_amenityAvgAggregateOutputType = {
    id: number | null
    room_id: number | null
  }

  export type Room_amenitySumAggregateOutputType = {
    id: number | null
    room_id: number | null
  }

  export type Room_amenityMinAggregateOutputType = {
    id: number | null
    room_id: number | null
    amenity_type: string | null
  }

  export type Room_amenityMaxAggregateOutputType = {
    id: number | null
    room_id: number | null
    amenity_type: string | null
  }

  export type Room_amenityCountAggregateOutputType = {
    id: number
    room_id: number
    amenity_type: number
    _all: number
  }


  export type Room_amenityAvgAggregateInputType = {
    id?: true
    room_id?: true
  }

  export type Room_amenitySumAggregateInputType = {
    id?: true
    room_id?: true
  }

  export type Room_amenityMinAggregateInputType = {
    id?: true
    room_id?: true
    amenity_type?: true
  }

  export type Room_amenityMaxAggregateInputType = {
    id?: true
    room_id?: true
    amenity_type?: true
  }

  export type Room_amenityCountAggregateInputType = {
    id?: true
    room_id?: true
    amenity_type?: true
    _all?: true
  }

  export type Room_amenityAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which room_amenity to aggregate.
     */
    where?: room_amenityWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of room_amenities to fetch.
     */
    orderBy?: room_amenityOrderByWithRelationInput | room_amenityOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: room_amenityWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` room_amenities from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` room_amenities.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned room_amenities
    **/
    _count?: true | Room_amenityCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Room_amenityAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Room_amenitySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Room_amenityMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Room_amenityMaxAggregateInputType
  }

  export type GetRoom_amenityAggregateType<T extends Room_amenityAggregateArgs> = {
        [P in keyof T & keyof AggregateRoom_amenity]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRoom_amenity[P]>
      : GetScalarType<T[P], AggregateRoom_amenity[P]>
  }




  export type room_amenityGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: room_amenityWhereInput
    orderBy?: room_amenityOrderByWithAggregationInput | room_amenityOrderByWithAggregationInput[]
    by: Room_amenityScalarFieldEnum[] | Room_amenityScalarFieldEnum
    having?: room_amenityScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Room_amenityCountAggregateInputType | true
    _avg?: Room_amenityAvgAggregateInputType
    _sum?: Room_amenitySumAggregateInputType
    _min?: Room_amenityMinAggregateInputType
    _max?: Room_amenityMaxAggregateInputType
  }

  export type Room_amenityGroupByOutputType = {
    id: number
    room_id: number
    amenity_type: string
    _count: Room_amenityCountAggregateOutputType | null
    _avg: Room_amenityAvgAggregateOutputType | null
    _sum: Room_amenitySumAggregateOutputType | null
    _min: Room_amenityMinAggregateOutputType | null
    _max: Room_amenityMaxAggregateOutputType | null
  }

  type GetRoom_amenityGroupByPayload<T extends room_amenityGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<Room_amenityGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Room_amenityGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Room_amenityGroupByOutputType[P]>
            : GetScalarType<T[P], Room_amenityGroupByOutputType[P]>
        }
      >
    >


  export type room_amenitySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    room_id?: boolean
    amenity_type?: boolean
    room?: boolean | roomDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["room_amenity"]>

  export type room_amenitySelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    room_id?: boolean
    amenity_type?: boolean
    room?: boolean | roomDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["room_amenity"]>

  export type room_amenitySelectScalar = {
    id?: boolean
    room_id?: boolean
    amenity_type?: boolean
  }

  export type room_amenityInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    room?: boolean | roomDefaultArgs<ExtArgs>
  }
  export type room_amenityIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    room?: boolean | roomDefaultArgs<ExtArgs>
  }

  export type $room_amenityPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "room_amenity"
    objects: {
      room: Prisma.$roomPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      room_id: number
      amenity_type: string
    }, ExtArgs["result"]["room_amenity"]>
    composites: {}
  }

  type room_amenityGetPayload<S extends boolean | null | undefined | room_amenityDefaultArgs> = $Result.GetResult<Prisma.$room_amenityPayload, S>

  type room_amenityCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<room_amenityFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: Room_amenityCountAggregateInputType | true
    }

  export interface room_amenityDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['room_amenity'], meta: { name: 'room_amenity' } }
    /**
     * Find zero or one Room_amenity that matches the filter.
     * @param {room_amenityFindUniqueArgs} args - Arguments to find a Room_amenity
     * @example
     * // Get one Room_amenity
     * const room_amenity = await prisma.room_amenity.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends room_amenityFindUniqueArgs>(args: SelectSubset<T, room_amenityFindUniqueArgs<ExtArgs>>): Prisma__room_amenityClient<$Result.GetResult<Prisma.$room_amenityPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Room_amenity that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {room_amenityFindUniqueOrThrowArgs} args - Arguments to find a Room_amenity
     * @example
     * // Get one Room_amenity
     * const room_amenity = await prisma.room_amenity.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends room_amenityFindUniqueOrThrowArgs>(args: SelectSubset<T, room_amenityFindUniqueOrThrowArgs<ExtArgs>>): Prisma__room_amenityClient<$Result.GetResult<Prisma.$room_amenityPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Room_amenity that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {room_amenityFindFirstArgs} args - Arguments to find a Room_amenity
     * @example
     * // Get one Room_amenity
     * const room_amenity = await prisma.room_amenity.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends room_amenityFindFirstArgs>(args?: SelectSubset<T, room_amenityFindFirstArgs<ExtArgs>>): Prisma__room_amenityClient<$Result.GetResult<Prisma.$room_amenityPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Room_amenity that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {room_amenityFindFirstOrThrowArgs} args - Arguments to find a Room_amenity
     * @example
     * // Get one Room_amenity
     * const room_amenity = await prisma.room_amenity.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends room_amenityFindFirstOrThrowArgs>(args?: SelectSubset<T, room_amenityFindFirstOrThrowArgs<ExtArgs>>): Prisma__room_amenityClient<$Result.GetResult<Prisma.$room_amenityPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Room_amenities that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {room_amenityFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Room_amenities
     * const room_amenities = await prisma.room_amenity.findMany()
     * 
     * // Get first 10 Room_amenities
     * const room_amenities = await prisma.room_amenity.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const room_amenityWithIdOnly = await prisma.room_amenity.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends room_amenityFindManyArgs>(args?: SelectSubset<T, room_amenityFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$room_amenityPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Room_amenity.
     * @param {room_amenityCreateArgs} args - Arguments to create a Room_amenity.
     * @example
     * // Create one Room_amenity
     * const Room_amenity = await prisma.room_amenity.create({
     *   data: {
     *     // ... data to create a Room_amenity
     *   }
     * })
     * 
     */
    create<T extends room_amenityCreateArgs>(args: SelectSubset<T, room_amenityCreateArgs<ExtArgs>>): Prisma__room_amenityClient<$Result.GetResult<Prisma.$room_amenityPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Room_amenities.
     * @param {room_amenityCreateManyArgs} args - Arguments to create many Room_amenities.
     * @example
     * // Create many Room_amenities
     * const room_amenity = await prisma.room_amenity.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends room_amenityCreateManyArgs>(args?: SelectSubset<T, room_amenityCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Room_amenities and returns the data saved in the database.
     * @param {room_amenityCreateManyAndReturnArgs} args - Arguments to create many Room_amenities.
     * @example
     * // Create many Room_amenities
     * const room_amenity = await prisma.room_amenity.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Room_amenities and only return the `id`
     * const room_amenityWithIdOnly = await prisma.room_amenity.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends room_amenityCreateManyAndReturnArgs>(args?: SelectSubset<T, room_amenityCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$room_amenityPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Room_amenity.
     * @param {room_amenityDeleteArgs} args - Arguments to delete one Room_amenity.
     * @example
     * // Delete one Room_amenity
     * const Room_amenity = await prisma.room_amenity.delete({
     *   where: {
     *     // ... filter to delete one Room_amenity
     *   }
     * })
     * 
     */
    delete<T extends room_amenityDeleteArgs>(args: SelectSubset<T, room_amenityDeleteArgs<ExtArgs>>): Prisma__room_amenityClient<$Result.GetResult<Prisma.$room_amenityPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Room_amenity.
     * @param {room_amenityUpdateArgs} args - Arguments to update one Room_amenity.
     * @example
     * // Update one Room_amenity
     * const room_amenity = await prisma.room_amenity.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends room_amenityUpdateArgs>(args: SelectSubset<T, room_amenityUpdateArgs<ExtArgs>>): Prisma__room_amenityClient<$Result.GetResult<Prisma.$room_amenityPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Room_amenities.
     * @param {room_amenityDeleteManyArgs} args - Arguments to filter Room_amenities to delete.
     * @example
     * // Delete a few Room_amenities
     * const { count } = await prisma.room_amenity.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends room_amenityDeleteManyArgs>(args?: SelectSubset<T, room_amenityDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Room_amenities.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {room_amenityUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Room_amenities
     * const room_amenity = await prisma.room_amenity.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends room_amenityUpdateManyArgs>(args: SelectSubset<T, room_amenityUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Room_amenity.
     * @param {room_amenityUpsertArgs} args - Arguments to update or create a Room_amenity.
     * @example
     * // Update or create a Room_amenity
     * const room_amenity = await prisma.room_amenity.upsert({
     *   create: {
     *     // ... data to create a Room_amenity
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Room_amenity we want to update
     *   }
     * })
     */
    upsert<T extends room_amenityUpsertArgs>(args: SelectSubset<T, room_amenityUpsertArgs<ExtArgs>>): Prisma__room_amenityClient<$Result.GetResult<Prisma.$room_amenityPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Room_amenities.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {room_amenityCountArgs} args - Arguments to filter Room_amenities to count.
     * @example
     * // Count the number of Room_amenities
     * const count = await prisma.room_amenity.count({
     *   where: {
     *     // ... the filter for the Room_amenities we want to count
     *   }
     * })
    **/
    count<T extends room_amenityCountArgs>(
      args?: Subset<T, room_amenityCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Room_amenityCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Room_amenity.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Room_amenityAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Room_amenityAggregateArgs>(args: Subset<T, Room_amenityAggregateArgs>): Prisma.PrismaPromise<GetRoom_amenityAggregateType<T>>

    /**
     * Group by Room_amenity.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {room_amenityGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends room_amenityGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: room_amenityGroupByArgs['orderBy'] }
        : { orderBy?: room_amenityGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, room_amenityGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRoom_amenityGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the room_amenity model
   */
  readonly fields: room_amenityFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for room_amenity.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__room_amenityClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    room<T extends roomDefaultArgs<ExtArgs> = {}>(args?: Subset<T, roomDefaultArgs<ExtArgs>>): Prisma__roomClient<$Result.GetResult<Prisma.$roomPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the room_amenity model
   */ 
  interface room_amenityFieldRefs {
    readonly id: FieldRef<"room_amenity", 'Int'>
    readonly room_id: FieldRef<"room_amenity", 'Int'>
    readonly amenity_type: FieldRef<"room_amenity", 'String'>
  }
    

  // Custom InputTypes
  /**
   * room_amenity findUnique
   */
  export type room_amenityFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the room_amenity
     */
    select?: room_amenitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: room_amenityInclude<ExtArgs> | null
    /**
     * Filter, which room_amenity to fetch.
     */
    where: room_amenityWhereUniqueInput
  }

  /**
   * room_amenity findUniqueOrThrow
   */
  export type room_amenityFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the room_amenity
     */
    select?: room_amenitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: room_amenityInclude<ExtArgs> | null
    /**
     * Filter, which room_amenity to fetch.
     */
    where: room_amenityWhereUniqueInput
  }

  /**
   * room_amenity findFirst
   */
  export type room_amenityFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the room_amenity
     */
    select?: room_amenitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: room_amenityInclude<ExtArgs> | null
    /**
     * Filter, which room_amenity to fetch.
     */
    where?: room_amenityWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of room_amenities to fetch.
     */
    orderBy?: room_amenityOrderByWithRelationInput | room_amenityOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for room_amenities.
     */
    cursor?: room_amenityWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` room_amenities from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` room_amenities.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of room_amenities.
     */
    distinct?: Room_amenityScalarFieldEnum | Room_amenityScalarFieldEnum[]
  }

  /**
   * room_amenity findFirstOrThrow
   */
  export type room_amenityFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the room_amenity
     */
    select?: room_amenitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: room_amenityInclude<ExtArgs> | null
    /**
     * Filter, which room_amenity to fetch.
     */
    where?: room_amenityWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of room_amenities to fetch.
     */
    orderBy?: room_amenityOrderByWithRelationInput | room_amenityOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for room_amenities.
     */
    cursor?: room_amenityWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` room_amenities from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` room_amenities.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of room_amenities.
     */
    distinct?: Room_amenityScalarFieldEnum | Room_amenityScalarFieldEnum[]
  }

  /**
   * room_amenity findMany
   */
  export type room_amenityFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the room_amenity
     */
    select?: room_amenitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: room_amenityInclude<ExtArgs> | null
    /**
     * Filter, which room_amenities to fetch.
     */
    where?: room_amenityWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of room_amenities to fetch.
     */
    orderBy?: room_amenityOrderByWithRelationInput | room_amenityOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing room_amenities.
     */
    cursor?: room_amenityWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` room_amenities from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` room_amenities.
     */
    skip?: number
    distinct?: Room_amenityScalarFieldEnum | Room_amenityScalarFieldEnum[]
  }

  /**
   * room_amenity create
   */
  export type room_amenityCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the room_amenity
     */
    select?: room_amenitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: room_amenityInclude<ExtArgs> | null
    /**
     * The data needed to create a room_amenity.
     */
    data: XOR<room_amenityCreateInput, room_amenityUncheckedCreateInput>
  }

  /**
   * room_amenity createMany
   */
  export type room_amenityCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many room_amenities.
     */
    data: room_amenityCreateManyInput | room_amenityCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * room_amenity createManyAndReturn
   */
  export type room_amenityCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the room_amenity
     */
    select?: room_amenitySelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many room_amenities.
     */
    data: room_amenityCreateManyInput | room_amenityCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: room_amenityIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * room_amenity update
   */
  export type room_amenityUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the room_amenity
     */
    select?: room_amenitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: room_amenityInclude<ExtArgs> | null
    /**
     * The data needed to update a room_amenity.
     */
    data: XOR<room_amenityUpdateInput, room_amenityUncheckedUpdateInput>
    /**
     * Choose, which room_amenity to update.
     */
    where: room_amenityWhereUniqueInput
  }

  /**
   * room_amenity updateMany
   */
  export type room_amenityUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update room_amenities.
     */
    data: XOR<room_amenityUpdateManyMutationInput, room_amenityUncheckedUpdateManyInput>
    /**
     * Filter which room_amenities to update
     */
    where?: room_amenityWhereInput
  }

  /**
   * room_amenity upsert
   */
  export type room_amenityUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the room_amenity
     */
    select?: room_amenitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: room_amenityInclude<ExtArgs> | null
    /**
     * The filter to search for the room_amenity to update in case it exists.
     */
    where: room_amenityWhereUniqueInput
    /**
     * In case the room_amenity found by the `where` argument doesn't exist, create a new room_amenity with this data.
     */
    create: XOR<room_amenityCreateInput, room_amenityUncheckedCreateInput>
    /**
     * In case the room_amenity was found with the provided `where` argument, update it with this data.
     */
    update: XOR<room_amenityUpdateInput, room_amenityUncheckedUpdateInput>
  }

  /**
   * room_amenity delete
   */
  export type room_amenityDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the room_amenity
     */
    select?: room_amenitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: room_amenityInclude<ExtArgs> | null
    /**
     * Filter which room_amenity to delete.
     */
    where: room_amenityWhereUniqueInput
  }

  /**
   * room_amenity deleteMany
   */
  export type room_amenityDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which room_amenities to delete
     */
    where?: room_amenityWhereInput
  }

  /**
   * room_amenity without action
   */
  export type room_amenityDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the room_amenity
     */
    select?: room_amenitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: room_amenityInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const HotelScalarFieldEnum: {
    id: 'id',
    name: 'name',
    location: 'location',
    description: 'description',
    rating: 'rating'
  };

  export type HotelScalarFieldEnum = (typeof HotelScalarFieldEnum)[keyof typeof HotelScalarFieldEnum]


  export const RoomScalarFieldEnum: {
    id: 'id',
    hotel_id: 'hotel_id',
    room_type: 'room_type',
    roomNumber: 'roomNumber',
    price: 'price',
    availability: 'availability'
  };

  export type RoomScalarFieldEnum = (typeof RoomScalarFieldEnum)[keyof typeof RoomScalarFieldEnum]


  export const ReservationScalarFieldEnum: {
    id: 'id',
    user_id: 'user_id',
    room_id: 'room_id',
    check_in_date: 'check_in_date',
    check_out_date: 'check_out_date',
    status: 'status'
  };

  export type ReservationScalarFieldEnum = (typeof ReservationScalarFieldEnum)[keyof typeof ReservationScalarFieldEnum]


  export const UserScalarFieldEnum: {
    id: 'id',
    name: 'name',
    email: 'email',
    password: 'password',
    phone: 'phone'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const ServiceScalarFieldEnum: {
    id: 'id',
    hotel_id: 'hotel_id',
    service_type: 'service_type',
    price: 'price'
  };

  export type ServiceScalarFieldEnum = (typeof ServiceScalarFieldEnum)[keyof typeof ServiceScalarFieldEnum]


  export const Service_reservationScalarFieldEnum: {
    id: 'id',
    reservation_id: 'reservation_id',
    service_id: 'service_id',
    quantity: 'quantity',
    price: 'price'
  };

  export type Service_reservationScalarFieldEnum = (typeof Service_reservationScalarFieldEnum)[keyof typeof Service_reservationScalarFieldEnum]


  export const ReviewScalarFieldEnum: {
    id: 'id',
    user_id: 'user_id',
    hotel_id: 'hotel_id',
    rating: 'rating',
    comment: 'comment',
    review_date: 'review_date'
  };

  export type ReviewScalarFieldEnum = (typeof ReviewScalarFieldEnum)[keyof typeof ReviewScalarFieldEnum]


  export const PromotionScalarFieldEnum: {
    id: 'id',
    hotel_id: 'hotel_id',
    promotion_type: 'promotion_type',
    discount_percentage: 'discount_percentage',
    start_date: 'start_date',
    end_date: 'end_date'
  };

  export type PromotionScalarFieldEnum = (typeof PromotionScalarFieldEnum)[keyof typeof PromotionScalarFieldEnum]


  export const Payment_recordScalarFieldEnum: {
    id: 'id',
    reservation_id: 'reservation_id',
    amount: 'amount',
    payment_date: 'payment_date',
    payment_method: 'payment_method'
  };

  export type Payment_recordScalarFieldEnum = (typeof Payment_recordScalarFieldEnum)[keyof typeof Payment_recordScalarFieldEnum]


  export const Room_amenityScalarFieldEnum: {
    id: 'id',
    room_id: 'room_id',
    amenity_type: 'amenity_type'
  };

  export type Room_amenityScalarFieldEnum = (typeof Room_amenityScalarFieldEnum)[keyof typeof Room_amenityScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    
  /**
   * Deep Input Types
   */


  export type hotelWhereInput = {
    AND?: hotelWhereInput | hotelWhereInput[]
    OR?: hotelWhereInput[]
    NOT?: hotelWhereInput | hotelWhereInput[]
    id?: IntFilter<"hotel"> | number
    name?: StringFilter<"hotel"> | string
    location?: StringFilter<"hotel"> | string
    description?: StringFilter<"hotel"> | string
    rating?: FloatFilter<"hotel"> | number
    rooms?: RoomListRelationFilter
    services?: ServiceListRelationFilter
    promotions?: PromotionListRelationFilter
    reviews?: ReviewListRelationFilter
  }

  export type hotelOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    location?: SortOrder
    description?: SortOrder
    rating?: SortOrder
    rooms?: roomOrderByRelationAggregateInput
    services?: serviceOrderByRelationAggregateInput
    promotions?: promotionOrderByRelationAggregateInput
    reviews?: reviewOrderByRelationAggregateInput
  }

  export type hotelWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    name?: string
    AND?: hotelWhereInput | hotelWhereInput[]
    OR?: hotelWhereInput[]
    NOT?: hotelWhereInput | hotelWhereInput[]
    location?: StringFilter<"hotel"> | string
    description?: StringFilter<"hotel"> | string
    rating?: FloatFilter<"hotel"> | number
    rooms?: RoomListRelationFilter
    services?: ServiceListRelationFilter
    promotions?: PromotionListRelationFilter
    reviews?: ReviewListRelationFilter
  }, "id" | "name">

  export type hotelOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    location?: SortOrder
    description?: SortOrder
    rating?: SortOrder
    _count?: hotelCountOrderByAggregateInput
    _avg?: hotelAvgOrderByAggregateInput
    _max?: hotelMaxOrderByAggregateInput
    _min?: hotelMinOrderByAggregateInput
    _sum?: hotelSumOrderByAggregateInput
  }

  export type hotelScalarWhereWithAggregatesInput = {
    AND?: hotelScalarWhereWithAggregatesInput | hotelScalarWhereWithAggregatesInput[]
    OR?: hotelScalarWhereWithAggregatesInput[]
    NOT?: hotelScalarWhereWithAggregatesInput | hotelScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"hotel"> | number
    name?: StringWithAggregatesFilter<"hotel"> | string
    location?: StringWithAggregatesFilter<"hotel"> | string
    description?: StringWithAggregatesFilter<"hotel"> | string
    rating?: FloatWithAggregatesFilter<"hotel"> | number
  }

  export type roomWhereInput = {
    AND?: roomWhereInput | roomWhereInput[]
    OR?: roomWhereInput[]
    NOT?: roomWhereInput | roomWhereInput[]
    id?: IntFilter<"room"> | number
    hotel_id?: IntFilter<"room"> | number
    room_type?: StringFilter<"room"> | string
    roomNumber?: IntFilter<"room"> | number
    price?: FloatFilter<"room"> | number
    availability?: BoolFilter<"room"> | boolean
    amenities?: Room_amenityListRelationFilter
    reservations?: ReservationListRelationFilter
    hotel?: XOR<HotelRelationFilter, hotelWhereInput>
  }

  export type roomOrderByWithRelationInput = {
    id?: SortOrder
    hotel_id?: SortOrder
    room_type?: SortOrder
    roomNumber?: SortOrder
    price?: SortOrder
    availability?: SortOrder
    amenities?: room_amenityOrderByRelationAggregateInput
    reservations?: reservationOrderByRelationAggregateInput
    hotel?: hotelOrderByWithRelationInput
  }

  export type roomWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: roomWhereInput | roomWhereInput[]
    OR?: roomWhereInput[]
    NOT?: roomWhereInput | roomWhereInput[]
    hotel_id?: IntFilter<"room"> | number
    room_type?: StringFilter<"room"> | string
    roomNumber?: IntFilter<"room"> | number
    price?: FloatFilter<"room"> | number
    availability?: BoolFilter<"room"> | boolean
    amenities?: Room_amenityListRelationFilter
    reservations?: ReservationListRelationFilter
    hotel?: XOR<HotelRelationFilter, hotelWhereInput>
  }, "id">

  export type roomOrderByWithAggregationInput = {
    id?: SortOrder
    hotel_id?: SortOrder
    room_type?: SortOrder
    roomNumber?: SortOrder
    price?: SortOrder
    availability?: SortOrder
    _count?: roomCountOrderByAggregateInput
    _avg?: roomAvgOrderByAggregateInput
    _max?: roomMaxOrderByAggregateInput
    _min?: roomMinOrderByAggregateInput
    _sum?: roomSumOrderByAggregateInput
  }

  export type roomScalarWhereWithAggregatesInput = {
    AND?: roomScalarWhereWithAggregatesInput | roomScalarWhereWithAggregatesInput[]
    OR?: roomScalarWhereWithAggregatesInput[]
    NOT?: roomScalarWhereWithAggregatesInput | roomScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"room"> | number
    hotel_id?: IntWithAggregatesFilter<"room"> | number
    room_type?: StringWithAggregatesFilter<"room"> | string
    roomNumber?: IntWithAggregatesFilter<"room"> | number
    price?: FloatWithAggregatesFilter<"room"> | number
    availability?: BoolWithAggregatesFilter<"room"> | boolean
  }

  export type reservationWhereInput = {
    AND?: reservationWhereInput | reservationWhereInput[]
    OR?: reservationWhereInput[]
    NOT?: reservationWhereInput | reservationWhereInput[]
    id?: IntFilter<"reservation"> | number
    user_id?: IntFilter<"reservation"> | number
    room_id?: IntFilter<"reservation"> | number
    check_in_date?: DateTimeFilter<"reservation"> | Date | string
    check_out_date?: DateTimeFilter<"reservation"> | Date | string
    status?: StringFilter<"reservation"> | string
    user?: XOR<UserRelationFilter, userWhereInput>
    room?: XOR<RoomRelationFilter, roomWhereInput>
    services?: Service_reservationListRelationFilter
    payment_records?: Payment_recordListRelationFilter
  }

  export type reservationOrderByWithRelationInput = {
    id?: SortOrder
    user_id?: SortOrder
    room_id?: SortOrder
    check_in_date?: SortOrder
    check_out_date?: SortOrder
    status?: SortOrder
    user?: userOrderByWithRelationInput
    room?: roomOrderByWithRelationInput
    services?: service_reservationOrderByRelationAggregateInput
    payment_records?: payment_recordOrderByRelationAggregateInput
  }

  export type reservationWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: reservationWhereInput | reservationWhereInput[]
    OR?: reservationWhereInput[]
    NOT?: reservationWhereInput | reservationWhereInput[]
    user_id?: IntFilter<"reservation"> | number
    room_id?: IntFilter<"reservation"> | number
    check_in_date?: DateTimeFilter<"reservation"> | Date | string
    check_out_date?: DateTimeFilter<"reservation"> | Date | string
    status?: StringFilter<"reservation"> | string
    user?: XOR<UserRelationFilter, userWhereInput>
    room?: XOR<RoomRelationFilter, roomWhereInput>
    services?: Service_reservationListRelationFilter
    payment_records?: Payment_recordListRelationFilter
  }, "id">

  export type reservationOrderByWithAggregationInput = {
    id?: SortOrder
    user_id?: SortOrder
    room_id?: SortOrder
    check_in_date?: SortOrder
    check_out_date?: SortOrder
    status?: SortOrder
    _count?: reservationCountOrderByAggregateInput
    _avg?: reservationAvgOrderByAggregateInput
    _max?: reservationMaxOrderByAggregateInput
    _min?: reservationMinOrderByAggregateInput
    _sum?: reservationSumOrderByAggregateInput
  }

  export type reservationScalarWhereWithAggregatesInput = {
    AND?: reservationScalarWhereWithAggregatesInput | reservationScalarWhereWithAggregatesInput[]
    OR?: reservationScalarWhereWithAggregatesInput[]
    NOT?: reservationScalarWhereWithAggregatesInput | reservationScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"reservation"> | number
    user_id?: IntWithAggregatesFilter<"reservation"> | number
    room_id?: IntWithAggregatesFilter<"reservation"> | number
    check_in_date?: DateTimeWithAggregatesFilter<"reservation"> | Date | string
    check_out_date?: DateTimeWithAggregatesFilter<"reservation"> | Date | string
    status?: StringWithAggregatesFilter<"reservation"> | string
  }

  export type userWhereInput = {
    AND?: userWhereInput | userWhereInput[]
    OR?: userWhereInput[]
    NOT?: userWhereInput | userWhereInput[]
    id?: IntFilter<"user"> | number
    name?: StringFilter<"user"> | string
    email?: StringFilter<"user"> | string
    password?: StringFilter<"user"> | string
    phone?: StringFilter<"user"> | string
    reservations?: ReservationListRelationFilter
    reviews?: ReviewListRelationFilter
  }

  export type userOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    phone?: SortOrder
    reservations?: reservationOrderByRelationAggregateInput
    reviews?: reviewOrderByRelationAggregateInput
  }

  export type userWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    email?: string
    AND?: userWhereInput | userWhereInput[]
    OR?: userWhereInput[]
    NOT?: userWhereInput | userWhereInput[]
    name?: StringFilter<"user"> | string
    password?: StringFilter<"user"> | string
    phone?: StringFilter<"user"> | string
    reservations?: ReservationListRelationFilter
    reviews?: ReviewListRelationFilter
  }, "id" | "email">

  export type userOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    phone?: SortOrder
    _count?: userCountOrderByAggregateInput
    _avg?: userAvgOrderByAggregateInput
    _max?: userMaxOrderByAggregateInput
    _min?: userMinOrderByAggregateInput
    _sum?: userSumOrderByAggregateInput
  }

  export type userScalarWhereWithAggregatesInput = {
    AND?: userScalarWhereWithAggregatesInput | userScalarWhereWithAggregatesInput[]
    OR?: userScalarWhereWithAggregatesInput[]
    NOT?: userScalarWhereWithAggregatesInput | userScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"user"> | number
    name?: StringWithAggregatesFilter<"user"> | string
    email?: StringWithAggregatesFilter<"user"> | string
    password?: StringWithAggregatesFilter<"user"> | string
    phone?: StringWithAggregatesFilter<"user"> | string
  }

  export type serviceWhereInput = {
    AND?: serviceWhereInput | serviceWhereInput[]
    OR?: serviceWhereInput[]
    NOT?: serviceWhereInput | serviceWhereInput[]
    id?: IntFilter<"service"> | number
    hotel_id?: IntFilter<"service"> | number
    service_type?: StringFilter<"service"> | string
    price?: FloatFilter<"service"> | number
    hotel?: XOR<HotelRelationFilter, hotelWhereInput>
    reservations?: Service_reservationListRelationFilter
  }

  export type serviceOrderByWithRelationInput = {
    id?: SortOrder
    hotel_id?: SortOrder
    service_type?: SortOrder
    price?: SortOrder
    hotel?: hotelOrderByWithRelationInput
    reservations?: service_reservationOrderByRelationAggregateInput
  }

  export type serviceWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: serviceWhereInput | serviceWhereInput[]
    OR?: serviceWhereInput[]
    NOT?: serviceWhereInput | serviceWhereInput[]
    hotel_id?: IntFilter<"service"> | number
    service_type?: StringFilter<"service"> | string
    price?: FloatFilter<"service"> | number
    hotel?: XOR<HotelRelationFilter, hotelWhereInput>
    reservations?: Service_reservationListRelationFilter
  }, "id">

  export type serviceOrderByWithAggregationInput = {
    id?: SortOrder
    hotel_id?: SortOrder
    service_type?: SortOrder
    price?: SortOrder
    _count?: serviceCountOrderByAggregateInput
    _avg?: serviceAvgOrderByAggregateInput
    _max?: serviceMaxOrderByAggregateInput
    _min?: serviceMinOrderByAggregateInput
    _sum?: serviceSumOrderByAggregateInput
  }

  export type serviceScalarWhereWithAggregatesInput = {
    AND?: serviceScalarWhereWithAggregatesInput | serviceScalarWhereWithAggregatesInput[]
    OR?: serviceScalarWhereWithAggregatesInput[]
    NOT?: serviceScalarWhereWithAggregatesInput | serviceScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"service"> | number
    hotel_id?: IntWithAggregatesFilter<"service"> | number
    service_type?: StringWithAggregatesFilter<"service"> | string
    price?: FloatWithAggregatesFilter<"service"> | number
  }

  export type service_reservationWhereInput = {
    AND?: service_reservationWhereInput | service_reservationWhereInput[]
    OR?: service_reservationWhereInput[]
    NOT?: service_reservationWhereInput | service_reservationWhereInput[]
    id?: IntFilter<"service_reservation"> | number
    reservation_id?: IntFilter<"service_reservation"> | number
    service_id?: IntFilter<"service_reservation"> | number
    quantity?: IntFilter<"service_reservation"> | number
    price?: FloatFilter<"service_reservation"> | number
    reservation?: XOR<ReservationRelationFilter, reservationWhereInput>
    service?: XOR<ServiceRelationFilter, serviceWhereInput>
  }

  export type service_reservationOrderByWithRelationInput = {
    id?: SortOrder
    reservation_id?: SortOrder
    service_id?: SortOrder
    quantity?: SortOrder
    price?: SortOrder
    reservation?: reservationOrderByWithRelationInput
    service?: serviceOrderByWithRelationInput
  }

  export type service_reservationWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: service_reservationWhereInput | service_reservationWhereInput[]
    OR?: service_reservationWhereInput[]
    NOT?: service_reservationWhereInput | service_reservationWhereInput[]
    reservation_id?: IntFilter<"service_reservation"> | number
    service_id?: IntFilter<"service_reservation"> | number
    quantity?: IntFilter<"service_reservation"> | number
    price?: FloatFilter<"service_reservation"> | number
    reservation?: XOR<ReservationRelationFilter, reservationWhereInput>
    service?: XOR<ServiceRelationFilter, serviceWhereInput>
  }, "id">

  export type service_reservationOrderByWithAggregationInput = {
    id?: SortOrder
    reservation_id?: SortOrder
    service_id?: SortOrder
    quantity?: SortOrder
    price?: SortOrder
    _count?: service_reservationCountOrderByAggregateInput
    _avg?: service_reservationAvgOrderByAggregateInput
    _max?: service_reservationMaxOrderByAggregateInput
    _min?: service_reservationMinOrderByAggregateInput
    _sum?: service_reservationSumOrderByAggregateInput
  }

  export type service_reservationScalarWhereWithAggregatesInput = {
    AND?: service_reservationScalarWhereWithAggregatesInput | service_reservationScalarWhereWithAggregatesInput[]
    OR?: service_reservationScalarWhereWithAggregatesInput[]
    NOT?: service_reservationScalarWhereWithAggregatesInput | service_reservationScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"service_reservation"> | number
    reservation_id?: IntWithAggregatesFilter<"service_reservation"> | number
    service_id?: IntWithAggregatesFilter<"service_reservation"> | number
    quantity?: IntWithAggregatesFilter<"service_reservation"> | number
    price?: FloatWithAggregatesFilter<"service_reservation"> | number
  }

  export type reviewWhereInput = {
    AND?: reviewWhereInput | reviewWhereInput[]
    OR?: reviewWhereInput[]
    NOT?: reviewWhereInput | reviewWhereInput[]
    id?: IntFilter<"review"> | number
    user_id?: IntFilter<"review"> | number
    hotel_id?: IntFilter<"review"> | number
    rating?: FloatFilter<"review"> | number
    comment?: StringFilter<"review"> | string
    review_date?: DateTimeFilter<"review"> | Date | string
    user?: XOR<UserRelationFilter, userWhereInput>
    hotel?: XOR<HotelRelationFilter, hotelWhereInput>
  }

  export type reviewOrderByWithRelationInput = {
    id?: SortOrder
    user_id?: SortOrder
    hotel_id?: SortOrder
    rating?: SortOrder
    comment?: SortOrder
    review_date?: SortOrder
    user?: userOrderByWithRelationInput
    hotel?: hotelOrderByWithRelationInput
  }

  export type reviewWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: reviewWhereInput | reviewWhereInput[]
    OR?: reviewWhereInput[]
    NOT?: reviewWhereInput | reviewWhereInput[]
    user_id?: IntFilter<"review"> | number
    hotel_id?: IntFilter<"review"> | number
    rating?: FloatFilter<"review"> | number
    comment?: StringFilter<"review"> | string
    review_date?: DateTimeFilter<"review"> | Date | string
    user?: XOR<UserRelationFilter, userWhereInput>
    hotel?: XOR<HotelRelationFilter, hotelWhereInput>
  }, "id">

  export type reviewOrderByWithAggregationInput = {
    id?: SortOrder
    user_id?: SortOrder
    hotel_id?: SortOrder
    rating?: SortOrder
    comment?: SortOrder
    review_date?: SortOrder
    _count?: reviewCountOrderByAggregateInput
    _avg?: reviewAvgOrderByAggregateInput
    _max?: reviewMaxOrderByAggregateInput
    _min?: reviewMinOrderByAggregateInput
    _sum?: reviewSumOrderByAggregateInput
  }

  export type reviewScalarWhereWithAggregatesInput = {
    AND?: reviewScalarWhereWithAggregatesInput | reviewScalarWhereWithAggregatesInput[]
    OR?: reviewScalarWhereWithAggregatesInput[]
    NOT?: reviewScalarWhereWithAggregatesInput | reviewScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"review"> | number
    user_id?: IntWithAggregatesFilter<"review"> | number
    hotel_id?: IntWithAggregatesFilter<"review"> | number
    rating?: FloatWithAggregatesFilter<"review"> | number
    comment?: StringWithAggregatesFilter<"review"> | string
    review_date?: DateTimeWithAggregatesFilter<"review"> | Date | string
  }

  export type promotionWhereInput = {
    AND?: promotionWhereInput | promotionWhereInput[]
    OR?: promotionWhereInput[]
    NOT?: promotionWhereInput | promotionWhereInput[]
    id?: IntFilter<"promotion"> | number
    hotel_id?: IntFilter<"promotion"> | number
    promotion_type?: StringFilter<"promotion"> | string
    discount_percentage?: FloatFilter<"promotion"> | number
    start_date?: DateTimeFilter<"promotion"> | Date | string
    end_date?: DateTimeFilter<"promotion"> | Date | string
    hotel?: XOR<HotelRelationFilter, hotelWhereInput>
  }

  export type promotionOrderByWithRelationInput = {
    id?: SortOrder
    hotel_id?: SortOrder
    promotion_type?: SortOrder
    discount_percentage?: SortOrder
    start_date?: SortOrder
    end_date?: SortOrder
    hotel?: hotelOrderByWithRelationInput
  }

  export type promotionWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: promotionWhereInput | promotionWhereInput[]
    OR?: promotionWhereInput[]
    NOT?: promotionWhereInput | promotionWhereInput[]
    hotel_id?: IntFilter<"promotion"> | number
    promotion_type?: StringFilter<"promotion"> | string
    discount_percentage?: FloatFilter<"promotion"> | number
    start_date?: DateTimeFilter<"promotion"> | Date | string
    end_date?: DateTimeFilter<"promotion"> | Date | string
    hotel?: XOR<HotelRelationFilter, hotelWhereInput>
  }, "id">

  export type promotionOrderByWithAggregationInput = {
    id?: SortOrder
    hotel_id?: SortOrder
    promotion_type?: SortOrder
    discount_percentage?: SortOrder
    start_date?: SortOrder
    end_date?: SortOrder
    _count?: promotionCountOrderByAggregateInput
    _avg?: promotionAvgOrderByAggregateInput
    _max?: promotionMaxOrderByAggregateInput
    _min?: promotionMinOrderByAggregateInput
    _sum?: promotionSumOrderByAggregateInput
  }

  export type promotionScalarWhereWithAggregatesInput = {
    AND?: promotionScalarWhereWithAggregatesInput | promotionScalarWhereWithAggregatesInput[]
    OR?: promotionScalarWhereWithAggregatesInput[]
    NOT?: promotionScalarWhereWithAggregatesInput | promotionScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"promotion"> | number
    hotel_id?: IntWithAggregatesFilter<"promotion"> | number
    promotion_type?: StringWithAggregatesFilter<"promotion"> | string
    discount_percentage?: FloatWithAggregatesFilter<"promotion"> | number
    start_date?: DateTimeWithAggregatesFilter<"promotion"> | Date | string
    end_date?: DateTimeWithAggregatesFilter<"promotion"> | Date | string
  }

  export type payment_recordWhereInput = {
    AND?: payment_recordWhereInput | payment_recordWhereInput[]
    OR?: payment_recordWhereInput[]
    NOT?: payment_recordWhereInput | payment_recordWhereInput[]
    id?: IntFilter<"payment_record"> | number
    reservation_id?: IntFilter<"payment_record"> | number
    amount?: FloatFilter<"payment_record"> | number
    payment_date?: DateTimeFilter<"payment_record"> | Date | string
    payment_method?: StringFilter<"payment_record"> | string
    reservation?: XOR<ReservationRelationFilter, reservationWhereInput>
  }

  export type payment_recordOrderByWithRelationInput = {
    id?: SortOrder
    reservation_id?: SortOrder
    amount?: SortOrder
    payment_date?: SortOrder
    payment_method?: SortOrder
    reservation?: reservationOrderByWithRelationInput
  }

  export type payment_recordWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: payment_recordWhereInput | payment_recordWhereInput[]
    OR?: payment_recordWhereInput[]
    NOT?: payment_recordWhereInput | payment_recordWhereInput[]
    reservation_id?: IntFilter<"payment_record"> | number
    amount?: FloatFilter<"payment_record"> | number
    payment_date?: DateTimeFilter<"payment_record"> | Date | string
    payment_method?: StringFilter<"payment_record"> | string
    reservation?: XOR<ReservationRelationFilter, reservationWhereInput>
  }, "id">

  export type payment_recordOrderByWithAggregationInput = {
    id?: SortOrder
    reservation_id?: SortOrder
    amount?: SortOrder
    payment_date?: SortOrder
    payment_method?: SortOrder
    _count?: payment_recordCountOrderByAggregateInput
    _avg?: payment_recordAvgOrderByAggregateInput
    _max?: payment_recordMaxOrderByAggregateInput
    _min?: payment_recordMinOrderByAggregateInput
    _sum?: payment_recordSumOrderByAggregateInput
  }

  export type payment_recordScalarWhereWithAggregatesInput = {
    AND?: payment_recordScalarWhereWithAggregatesInput | payment_recordScalarWhereWithAggregatesInput[]
    OR?: payment_recordScalarWhereWithAggregatesInput[]
    NOT?: payment_recordScalarWhereWithAggregatesInput | payment_recordScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"payment_record"> | number
    reservation_id?: IntWithAggregatesFilter<"payment_record"> | number
    amount?: FloatWithAggregatesFilter<"payment_record"> | number
    payment_date?: DateTimeWithAggregatesFilter<"payment_record"> | Date | string
    payment_method?: StringWithAggregatesFilter<"payment_record"> | string
  }

  export type room_amenityWhereInput = {
    AND?: room_amenityWhereInput | room_amenityWhereInput[]
    OR?: room_amenityWhereInput[]
    NOT?: room_amenityWhereInput | room_amenityWhereInput[]
    id?: IntFilter<"room_amenity"> | number
    room_id?: IntFilter<"room_amenity"> | number
    amenity_type?: StringFilter<"room_amenity"> | string
    room?: XOR<RoomRelationFilter, roomWhereInput>
  }

  export type room_amenityOrderByWithRelationInput = {
    id?: SortOrder
    room_id?: SortOrder
    amenity_type?: SortOrder
    room?: roomOrderByWithRelationInput
  }

  export type room_amenityWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: room_amenityWhereInput | room_amenityWhereInput[]
    OR?: room_amenityWhereInput[]
    NOT?: room_amenityWhereInput | room_amenityWhereInput[]
    room_id?: IntFilter<"room_amenity"> | number
    amenity_type?: StringFilter<"room_amenity"> | string
    room?: XOR<RoomRelationFilter, roomWhereInput>
  }, "id">

  export type room_amenityOrderByWithAggregationInput = {
    id?: SortOrder
    room_id?: SortOrder
    amenity_type?: SortOrder
    _count?: room_amenityCountOrderByAggregateInput
    _avg?: room_amenityAvgOrderByAggregateInput
    _max?: room_amenityMaxOrderByAggregateInput
    _min?: room_amenityMinOrderByAggregateInput
    _sum?: room_amenitySumOrderByAggregateInput
  }

  export type room_amenityScalarWhereWithAggregatesInput = {
    AND?: room_amenityScalarWhereWithAggregatesInput | room_amenityScalarWhereWithAggregatesInput[]
    OR?: room_amenityScalarWhereWithAggregatesInput[]
    NOT?: room_amenityScalarWhereWithAggregatesInput | room_amenityScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"room_amenity"> | number
    room_id?: IntWithAggregatesFilter<"room_amenity"> | number
    amenity_type?: StringWithAggregatesFilter<"room_amenity"> | string
  }

  export type hotelCreateInput = {
    name: string
    location: string
    description: string
    rating: number
    rooms?: roomCreateNestedManyWithoutHotelInput
    services?: serviceCreateNestedManyWithoutHotelInput
    promotions?: promotionCreateNestedManyWithoutHotelInput
    reviews?: reviewCreateNestedManyWithoutHotelInput
  }

  export type hotelUncheckedCreateInput = {
    id?: number
    name: string
    location: string
    description: string
    rating: number
    rooms?: roomUncheckedCreateNestedManyWithoutHotelInput
    services?: serviceUncheckedCreateNestedManyWithoutHotelInput
    promotions?: promotionUncheckedCreateNestedManyWithoutHotelInput
    reviews?: reviewUncheckedCreateNestedManyWithoutHotelInput
  }

  export type hotelUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    rating?: FloatFieldUpdateOperationsInput | number
    rooms?: roomUpdateManyWithoutHotelNestedInput
    services?: serviceUpdateManyWithoutHotelNestedInput
    promotions?: promotionUpdateManyWithoutHotelNestedInput
    reviews?: reviewUpdateManyWithoutHotelNestedInput
  }

  export type hotelUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    rating?: FloatFieldUpdateOperationsInput | number
    rooms?: roomUncheckedUpdateManyWithoutHotelNestedInput
    services?: serviceUncheckedUpdateManyWithoutHotelNestedInput
    promotions?: promotionUncheckedUpdateManyWithoutHotelNestedInput
    reviews?: reviewUncheckedUpdateManyWithoutHotelNestedInput
  }

  export type hotelCreateManyInput = {
    id?: number
    name: string
    location: string
    description: string
    rating: number
  }

  export type hotelUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    rating?: FloatFieldUpdateOperationsInput | number
  }

  export type hotelUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    rating?: FloatFieldUpdateOperationsInput | number
  }

  export type roomCreateInput = {
    room_type: string
    roomNumber: number
    price: number
    availability: boolean
    amenities?: room_amenityCreateNestedManyWithoutRoomInput
    reservations?: reservationCreateNestedManyWithoutRoomInput
    hotel: hotelCreateNestedOneWithoutRoomsInput
  }

  export type roomUncheckedCreateInput = {
    id?: number
    hotel_id: number
    room_type: string
    roomNumber: number
    price: number
    availability: boolean
    amenities?: room_amenityUncheckedCreateNestedManyWithoutRoomInput
    reservations?: reservationUncheckedCreateNestedManyWithoutRoomInput
  }

  export type roomUpdateInput = {
    room_type?: StringFieldUpdateOperationsInput | string
    roomNumber?: IntFieldUpdateOperationsInput | number
    price?: FloatFieldUpdateOperationsInput | number
    availability?: BoolFieldUpdateOperationsInput | boolean
    amenities?: room_amenityUpdateManyWithoutRoomNestedInput
    reservations?: reservationUpdateManyWithoutRoomNestedInput
    hotel?: hotelUpdateOneRequiredWithoutRoomsNestedInput
  }

  export type roomUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    hotel_id?: IntFieldUpdateOperationsInput | number
    room_type?: StringFieldUpdateOperationsInput | string
    roomNumber?: IntFieldUpdateOperationsInput | number
    price?: FloatFieldUpdateOperationsInput | number
    availability?: BoolFieldUpdateOperationsInput | boolean
    amenities?: room_amenityUncheckedUpdateManyWithoutRoomNestedInput
    reservations?: reservationUncheckedUpdateManyWithoutRoomNestedInput
  }

  export type roomCreateManyInput = {
    id?: number
    hotel_id: number
    room_type: string
    roomNumber: number
    price: number
    availability: boolean
  }

  export type roomUpdateManyMutationInput = {
    room_type?: StringFieldUpdateOperationsInput | string
    roomNumber?: IntFieldUpdateOperationsInput | number
    price?: FloatFieldUpdateOperationsInput | number
    availability?: BoolFieldUpdateOperationsInput | boolean
  }

  export type roomUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    hotel_id?: IntFieldUpdateOperationsInput | number
    room_type?: StringFieldUpdateOperationsInput | string
    roomNumber?: IntFieldUpdateOperationsInput | number
    price?: FloatFieldUpdateOperationsInput | number
    availability?: BoolFieldUpdateOperationsInput | boolean
  }

  export type reservationCreateInput = {
    check_in_date: Date | string
    check_out_date: Date | string
    status: string
    user: userCreateNestedOneWithoutReservationsInput
    room: roomCreateNestedOneWithoutReservationsInput
    services?: service_reservationCreateNestedManyWithoutReservationInput
    payment_records?: payment_recordCreateNestedManyWithoutReservationInput
  }

  export type reservationUncheckedCreateInput = {
    id?: number
    user_id: number
    room_id: number
    check_in_date: Date | string
    check_out_date: Date | string
    status: string
    services?: service_reservationUncheckedCreateNestedManyWithoutReservationInput
    payment_records?: payment_recordUncheckedCreateNestedManyWithoutReservationInput
  }

  export type reservationUpdateInput = {
    check_in_date?: DateTimeFieldUpdateOperationsInput | Date | string
    check_out_date?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    user?: userUpdateOneRequiredWithoutReservationsNestedInput
    room?: roomUpdateOneRequiredWithoutReservationsNestedInput
    services?: service_reservationUpdateManyWithoutReservationNestedInput
    payment_records?: payment_recordUpdateManyWithoutReservationNestedInput
  }

  export type reservationUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
    room_id?: IntFieldUpdateOperationsInput | number
    check_in_date?: DateTimeFieldUpdateOperationsInput | Date | string
    check_out_date?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    services?: service_reservationUncheckedUpdateManyWithoutReservationNestedInput
    payment_records?: payment_recordUncheckedUpdateManyWithoutReservationNestedInput
  }

  export type reservationCreateManyInput = {
    id?: number
    user_id: number
    room_id: number
    check_in_date: Date | string
    check_out_date: Date | string
    status: string
  }

  export type reservationUpdateManyMutationInput = {
    check_in_date?: DateTimeFieldUpdateOperationsInput | Date | string
    check_out_date?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
  }

  export type reservationUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
    room_id?: IntFieldUpdateOperationsInput | number
    check_in_date?: DateTimeFieldUpdateOperationsInput | Date | string
    check_out_date?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
  }

  export type userCreateInput = {
    name: string
    email: string
    password: string
    phone: string
    reservations?: reservationCreateNestedManyWithoutUserInput
    reviews?: reviewCreateNestedManyWithoutUserInput
  }

  export type userUncheckedCreateInput = {
    id?: number
    name: string
    email: string
    password: string
    phone: string
    reservations?: reservationUncheckedCreateNestedManyWithoutUserInput
    reviews?: reviewUncheckedCreateNestedManyWithoutUserInput
  }

  export type userUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    reservations?: reservationUpdateManyWithoutUserNestedInput
    reviews?: reviewUpdateManyWithoutUserNestedInput
  }

  export type userUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    reservations?: reservationUncheckedUpdateManyWithoutUserNestedInput
    reviews?: reviewUncheckedUpdateManyWithoutUserNestedInput
  }

  export type userCreateManyInput = {
    id?: number
    name: string
    email: string
    password: string
    phone: string
  }

  export type userUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
  }

  export type userUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
  }

  export type serviceCreateInput = {
    service_type: string
    price: number
    hotel: hotelCreateNestedOneWithoutServicesInput
    reservations?: service_reservationCreateNestedManyWithoutServiceInput
  }

  export type serviceUncheckedCreateInput = {
    id?: number
    hotel_id: number
    service_type: string
    price: number
    reservations?: service_reservationUncheckedCreateNestedManyWithoutServiceInput
  }

  export type serviceUpdateInput = {
    service_type?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    hotel?: hotelUpdateOneRequiredWithoutServicesNestedInput
    reservations?: service_reservationUpdateManyWithoutServiceNestedInput
  }

  export type serviceUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    hotel_id?: IntFieldUpdateOperationsInput | number
    service_type?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    reservations?: service_reservationUncheckedUpdateManyWithoutServiceNestedInput
  }

  export type serviceCreateManyInput = {
    id?: number
    hotel_id: number
    service_type: string
    price: number
  }

  export type serviceUpdateManyMutationInput = {
    service_type?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
  }

  export type serviceUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    hotel_id?: IntFieldUpdateOperationsInput | number
    service_type?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
  }

  export type service_reservationCreateInput = {
    quantity: number
    price: number
    reservation: reservationCreateNestedOneWithoutServicesInput
    service: serviceCreateNestedOneWithoutReservationsInput
  }

  export type service_reservationUncheckedCreateInput = {
    id?: number
    reservation_id: number
    service_id: number
    quantity: number
    price: number
  }

  export type service_reservationUpdateInput = {
    quantity?: IntFieldUpdateOperationsInput | number
    price?: FloatFieldUpdateOperationsInput | number
    reservation?: reservationUpdateOneRequiredWithoutServicesNestedInput
    service?: serviceUpdateOneRequiredWithoutReservationsNestedInput
  }

  export type service_reservationUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    reservation_id?: IntFieldUpdateOperationsInput | number
    service_id?: IntFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    price?: FloatFieldUpdateOperationsInput | number
  }

  export type service_reservationCreateManyInput = {
    id?: number
    reservation_id: number
    service_id: number
    quantity: number
    price: number
  }

  export type service_reservationUpdateManyMutationInput = {
    quantity?: IntFieldUpdateOperationsInput | number
    price?: FloatFieldUpdateOperationsInput | number
  }

  export type service_reservationUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    reservation_id?: IntFieldUpdateOperationsInput | number
    service_id?: IntFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    price?: FloatFieldUpdateOperationsInput | number
  }

  export type reviewCreateInput = {
    rating: number
    comment: string
    review_date: Date | string
    user: userCreateNestedOneWithoutReviewsInput
    hotel: hotelCreateNestedOneWithoutReviewsInput
  }

  export type reviewUncheckedCreateInput = {
    id?: number
    user_id: number
    hotel_id: number
    rating: number
    comment: string
    review_date: Date | string
  }

  export type reviewUpdateInput = {
    rating?: FloatFieldUpdateOperationsInput | number
    comment?: StringFieldUpdateOperationsInput | string
    review_date?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: userUpdateOneRequiredWithoutReviewsNestedInput
    hotel?: hotelUpdateOneRequiredWithoutReviewsNestedInput
  }

  export type reviewUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
    hotel_id?: IntFieldUpdateOperationsInput | number
    rating?: FloatFieldUpdateOperationsInput | number
    comment?: StringFieldUpdateOperationsInput | string
    review_date?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type reviewCreateManyInput = {
    id?: number
    user_id: number
    hotel_id: number
    rating: number
    comment: string
    review_date: Date | string
  }

  export type reviewUpdateManyMutationInput = {
    rating?: FloatFieldUpdateOperationsInput | number
    comment?: StringFieldUpdateOperationsInput | string
    review_date?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type reviewUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
    hotel_id?: IntFieldUpdateOperationsInput | number
    rating?: FloatFieldUpdateOperationsInput | number
    comment?: StringFieldUpdateOperationsInput | string
    review_date?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type promotionCreateInput = {
    promotion_type: string
    discount_percentage: number
    start_date: Date | string
    end_date: Date | string
    hotel: hotelCreateNestedOneWithoutPromotionsInput
  }

  export type promotionUncheckedCreateInput = {
    id?: number
    hotel_id: number
    promotion_type: string
    discount_percentage: number
    start_date: Date | string
    end_date: Date | string
  }

  export type promotionUpdateInput = {
    promotion_type?: StringFieldUpdateOperationsInput | string
    discount_percentage?: FloatFieldUpdateOperationsInput | number
    start_date?: DateTimeFieldUpdateOperationsInput | Date | string
    end_date?: DateTimeFieldUpdateOperationsInput | Date | string
    hotel?: hotelUpdateOneRequiredWithoutPromotionsNestedInput
  }

  export type promotionUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    hotel_id?: IntFieldUpdateOperationsInput | number
    promotion_type?: StringFieldUpdateOperationsInput | string
    discount_percentage?: FloatFieldUpdateOperationsInput | number
    start_date?: DateTimeFieldUpdateOperationsInput | Date | string
    end_date?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type promotionCreateManyInput = {
    id?: number
    hotel_id: number
    promotion_type: string
    discount_percentage: number
    start_date: Date | string
    end_date: Date | string
  }

  export type promotionUpdateManyMutationInput = {
    promotion_type?: StringFieldUpdateOperationsInput | string
    discount_percentage?: FloatFieldUpdateOperationsInput | number
    start_date?: DateTimeFieldUpdateOperationsInput | Date | string
    end_date?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type promotionUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    hotel_id?: IntFieldUpdateOperationsInput | number
    promotion_type?: StringFieldUpdateOperationsInput | string
    discount_percentage?: FloatFieldUpdateOperationsInput | number
    start_date?: DateTimeFieldUpdateOperationsInput | Date | string
    end_date?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type payment_recordCreateInput = {
    amount: number
    payment_date: Date | string
    payment_method: string
    reservation: reservationCreateNestedOneWithoutPayment_recordsInput
  }

  export type payment_recordUncheckedCreateInput = {
    id?: number
    reservation_id: number
    amount: number
    payment_date: Date | string
    payment_method: string
  }

  export type payment_recordUpdateInput = {
    amount?: FloatFieldUpdateOperationsInput | number
    payment_date?: DateTimeFieldUpdateOperationsInput | Date | string
    payment_method?: StringFieldUpdateOperationsInput | string
    reservation?: reservationUpdateOneRequiredWithoutPayment_recordsNestedInput
  }

  export type payment_recordUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    reservation_id?: IntFieldUpdateOperationsInput | number
    amount?: FloatFieldUpdateOperationsInput | number
    payment_date?: DateTimeFieldUpdateOperationsInput | Date | string
    payment_method?: StringFieldUpdateOperationsInput | string
  }

  export type payment_recordCreateManyInput = {
    id?: number
    reservation_id: number
    amount: number
    payment_date: Date | string
    payment_method: string
  }

  export type payment_recordUpdateManyMutationInput = {
    amount?: FloatFieldUpdateOperationsInput | number
    payment_date?: DateTimeFieldUpdateOperationsInput | Date | string
    payment_method?: StringFieldUpdateOperationsInput | string
  }

  export type payment_recordUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    reservation_id?: IntFieldUpdateOperationsInput | number
    amount?: FloatFieldUpdateOperationsInput | number
    payment_date?: DateTimeFieldUpdateOperationsInput | Date | string
    payment_method?: StringFieldUpdateOperationsInput | string
  }

  export type room_amenityCreateInput = {
    amenity_type: string
    room: roomCreateNestedOneWithoutAmenitiesInput
  }

  export type room_amenityUncheckedCreateInput = {
    id?: number
    room_id: number
    amenity_type: string
  }

  export type room_amenityUpdateInput = {
    amenity_type?: StringFieldUpdateOperationsInput | string
    room?: roomUpdateOneRequiredWithoutAmenitiesNestedInput
  }

  export type room_amenityUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    room_id?: IntFieldUpdateOperationsInput | number
    amenity_type?: StringFieldUpdateOperationsInput | string
  }

  export type room_amenityCreateManyInput = {
    id?: number
    room_id: number
    amenity_type: string
  }

  export type room_amenityUpdateManyMutationInput = {
    amenity_type?: StringFieldUpdateOperationsInput | string
  }

  export type room_amenityUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    room_id?: IntFieldUpdateOperationsInput | number
    amenity_type?: StringFieldUpdateOperationsInput | string
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type FloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type RoomListRelationFilter = {
    every?: roomWhereInput
    some?: roomWhereInput
    none?: roomWhereInput
  }

  export type ServiceListRelationFilter = {
    every?: serviceWhereInput
    some?: serviceWhereInput
    none?: serviceWhereInput
  }

  export type PromotionListRelationFilter = {
    every?: promotionWhereInput
    some?: promotionWhereInput
    none?: promotionWhereInput
  }

  export type ReviewListRelationFilter = {
    every?: reviewWhereInput
    some?: reviewWhereInput
    none?: reviewWhereInput
  }

  export type roomOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type serviceOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type promotionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type reviewOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type hotelCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    location?: SortOrder
    description?: SortOrder
    rating?: SortOrder
  }

  export type hotelAvgOrderByAggregateInput = {
    id?: SortOrder
    rating?: SortOrder
  }

  export type hotelMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    location?: SortOrder
    description?: SortOrder
    rating?: SortOrder
  }

  export type hotelMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    location?: SortOrder
    description?: SortOrder
    rating?: SortOrder
  }

  export type hotelSumOrderByAggregateInput = {
    id?: SortOrder
    rating?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type FloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type Room_amenityListRelationFilter = {
    every?: room_amenityWhereInput
    some?: room_amenityWhereInput
    none?: room_amenityWhereInput
  }

  export type ReservationListRelationFilter = {
    every?: reservationWhereInput
    some?: reservationWhereInput
    none?: reservationWhereInput
  }

  export type HotelRelationFilter = {
    is?: hotelWhereInput
    isNot?: hotelWhereInput
  }

  export type room_amenityOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type reservationOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type roomCountOrderByAggregateInput = {
    id?: SortOrder
    hotel_id?: SortOrder
    room_type?: SortOrder
    roomNumber?: SortOrder
    price?: SortOrder
    availability?: SortOrder
  }

  export type roomAvgOrderByAggregateInput = {
    id?: SortOrder
    hotel_id?: SortOrder
    roomNumber?: SortOrder
    price?: SortOrder
  }

  export type roomMaxOrderByAggregateInput = {
    id?: SortOrder
    hotel_id?: SortOrder
    room_type?: SortOrder
    roomNumber?: SortOrder
    price?: SortOrder
    availability?: SortOrder
  }

  export type roomMinOrderByAggregateInput = {
    id?: SortOrder
    hotel_id?: SortOrder
    room_type?: SortOrder
    roomNumber?: SortOrder
    price?: SortOrder
    availability?: SortOrder
  }

  export type roomSumOrderByAggregateInput = {
    id?: SortOrder
    hotel_id?: SortOrder
    roomNumber?: SortOrder
    price?: SortOrder
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type UserRelationFilter = {
    is?: userWhereInput
    isNot?: userWhereInput
  }

  export type RoomRelationFilter = {
    is?: roomWhereInput
    isNot?: roomWhereInput
  }

  export type Service_reservationListRelationFilter = {
    every?: service_reservationWhereInput
    some?: service_reservationWhereInput
    none?: service_reservationWhereInput
  }

  export type Payment_recordListRelationFilter = {
    every?: payment_recordWhereInput
    some?: payment_recordWhereInput
    none?: payment_recordWhereInput
  }

  export type service_reservationOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type payment_recordOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type reservationCountOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    room_id?: SortOrder
    check_in_date?: SortOrder
    check_out_date?: SortOrder
    status?: SortOrder
  }

  export type reservationAvgOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    room_id?: SortOrder
  }

  export type reservationMaxOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    room_id?: SortOrder
    check_in_date?: SortOrder
    check_out_date?: SortOrder
    status?: SortOrder
  }

  export type reservationMinOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    room_id?: SortOrder
    check_in_date?: SortOrder
    check_out_date?: SortOrder
    status?: SortOrder
  }

  export type reservationSumOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    room_id?: SortOrder
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type userCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    phone?: SortOrder
  }

  export type userAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type userMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    phone?: SortOrder
  }

  export type userMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    phone?: SortOrder
  }

  export type userSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type serviceCountOrderByAggregateInput = {
    id?: SortOrder
    hotel_id?: SortOrder
    service_type?: SortOrder
    price?: SortOrder
  }

  export type serviceAvgOrderByAggregateInput = {
    id?: SortOrder
    hotel_id?: SortOrder
    price?: SortOrder
  }

  export type serviceMaxOrderByAggregateInput = {
    id?: SortOrder
    hotel_id?: SortOrder
    service_type?: SortOrder
    price?: SortOrder
  }

  export type serviceMinOrderByAggregateInput = {
    id?: SortOrder
    hotel_id?: SortOrder
    service_type?: SortOrder
    price?: SortOrder
  }

  export type serviceSumOrderByAggregateInput = {
    id?: SortOrder
    hotel_id?: SortOrder
    price?: SortOrder
  }

  export type ReservationRelationFilter = {
    is?: reservationWhereInput
    isNot?: reservationWhereInput
  }

  export type ServiceRelationFilter = {
    is?: serviceWhereInput
    isNot?: serviceWhereInput
  }

  export type service_reservationCountOrderByAggregateInput = {
    id?: SortOrder
    reservation_id?: SortOrder
    service_id?: SortOrder
    quantity?: SortOrder
    price?: SortOrder
  }

  export type service_reservationAvgOrderByAggregateInput = {
    id?: SortOrder
    reservation_id?: SortOrder
    service_id?: SortOrder
    quantity?: SortOrder
    price?: SortOrder
  }

  export type service_reservationMaxOrderByAggregateInput = {
    id?: SortOrder
    reservation_id?: SortOrder
    service_id?: SortOrder
    quantity?: SortOrder
    price?: SortOrder
  }

  export type service_reservationMinOrderByAggregateInput = {
    id?: SortOrder
    reservation_id?: SortOrder
    service_id?: SortOrder
    quantity?: SortOrder
    price?: SortOrder
  }

  export type service_reservationSumOrderByAggregateInput = {
    id?: SortOrder
    reservation_id?: SortOrder
    service_id?: SortOrder
    quantity?: SortOrder
    price?: SortOrder
  }

  export type reviewCountOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    hotel_id?: SortOrder
    rating?: SortOrder
    comment?: SortOrder
    review_date?: SortOrder
  }

  export type reviewAvgOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    hotel_id?: SortOrder
    rating?: SortOrder
  }

  export type reviewMaxOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    hotel_id?: SortOrder
    rating?: SortOrder
    comment?: SortOrder
    review_date?: SortOrder
  }

  export type reviewMinOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    hotel_id?: SortOrder
    rating?: SortOrder
    comment?: SortOrder
    review_date?: SortOrder
  }

  export type reviewSumOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    hotel_id?: SortOrder
    rating?: SortOrder
  }

  export type promotionCountOrderByAggregateInput = {
    id?: SortOrder
    hotel_id?: SortOrder
    promotion_type?: SortOrder
    discount_percentage?: SortOrder
    start_date?: SortOrder
    end_date?: SortOrder
  }

  export type promotionAvgOrderByAggregateInput = {
    id?: SortOrder
    hotel_id?: SortOrder
    discount_percentage?: SortOrder
  }

  export type promotionMaxOrderByAggregateInput = {
    id?: SortOrder
    hotel_id?: SortOrder
    promotion_type?: SortOrder
    discount_percentage?: SortOrder
    start_date?: SortOrder
    end_date?: SortOrder
  }

  export type promotionMinOrderByAggregateInput = {
    id?: SortOrder
    hotel_id?: SortOrder
    promotion_type?: SortOrder
    discount_percentage?: SortOrder
    start_date?: SortOrder
    end_date?: SortOrder
  }

  export type promotionSumOrderByAggregateInput = {
    id?: SortOrder
    hotel_id?: SortOrder
    discount_percentage?: SortOrder
  }

  export type payment_recordCountOrderByAggregateInput = {
    id?: SortOrder
    reservation_id?: SortOrder
    amount?: SortOrder
    payment_date?: SortOrder
    payment_method?: SortOrder
  }

  export type payment_recordAvgOrderByAggregateInput = {
    id?: SortOrder
    reservation_id?: SortOrder
    amount?: SortOrder
  }

  export type payment_recordMaxOrderByAggregateInput = {
    id?: SortOrder
    reservation_id?: SortOrder
    amount?: SortOrder
    payment_date?: SortOrder
    payment_method?: SortOrder
  }

  export type payment_recordMinOrderByAggregateInput = {
    id?: SortOrder
    reservation_id?: SortOrder
    amount?: SortOrder
    payment_date?: SortOrder
    payment_method?: SortOrder
  }

  export type payment_recordSumOrderByAggregateInput = {
    id?: SortOrder
    reservation_id?: SortOrder
    amount?: SortOrder
  }

  export type room_amenityCountOrderByAggregateInput = {
    id?: SortOrder
    room_id?: SortOrder
    amenity_type?: SortOrder
  }

  export type room_amenityAvgOrderByAggregateInput = {
    id?: SortOrder
    room_id?: SortOrder
  }

  export type room_amenityMaxOrderByAggregateInput = {
    id?: SortOrder
    room_id?: SortOrder
    amenity_type?: SortOrder
  }

  export type room_amenityMinOrderByAggregateInput = {
    id?: SortOrder
    room_id?: SortOrder
    amenity_type?: SortOrder
  }

  export type room_amenitySumOrderByAggregateInput = {
    id?: SortOrder
    room_id?: SortOrder
  }

  export type roomCreateNestedManyWithoutHotelInput = {
    create?: XOR<roomCreateWithoutHotelInput, roomUncheckedCreateWithoutHotelInput> | roomCreateWithoutHotelInput[] | roomUncheckedCreateWithoutHotelInput[]
    connectOrCreate?: roomCreateOrConnectWithoutHotelInput | roomCreateOrConnectWithoutHotelInput[]
    createMany?: roomCreateManyHotelInputEnvelope
    connect?: roomWhereUniqueInput | roomWhereUniqueInput[]
  }

  export type serviceCreateNestedManyWithoutHotelInput = {
    create?: XOR<serviceCreateWithoutHotelInput, serviceUncheckedCreateWithoutHotelInput> | serviceCreateWithoutHotelInput[] | serviceUncheckedCreateWithoutHotelInput[]
    connectOrCreate?: serviceCreateOrConnectWithoutHotelInput | serviceCreateOrConnectWithoutHotelInput[]
    createMany?: serviceCreateManyHotelInputEnvelope
    connect?: serviceWhereUniqueInput | serviceWhereUniqueInput[]
  }

  export type promotionCreateNestedManyWithoutHotelInput = {
    create?: XOR<promotionCreateWithoutHotelInput, promotionUncheckedCreateWithoutHotelInput> | promotionCreateWithoutHotelInput[] | promotionUncheckedCreateWithoutHotelInput[]
    connectOrCreate?: promotionCreateOrConnectWithoutHotelInput | promotionCreateOrConnectWithoutHotelInput[]
    createMany?: promotionCreateManyHotelInputEnvelope
    connect?: promotionWhereUniqueInput | promotionWhereUniqueInput[]
  }

  export type reviewCreateNestedManyWithoutHotelInput = {
    create?: XOR<reviewCreateWithoutHotelInput, reviewUncheckedCreateWithoutHotelInput> | reviewCreateWithoutHotelInput[] | reviewUncheckedCreateWithoutHotelInput[]
    connectOrCreate?: reviewCreateOrConnectWithoutHotelInput | reviewCreateOrConnectWithoutHotelInput[]
    createMany?: reviewCreateManyHotelInputEnvelope
    connect?: reviewWhereUniqueInput | reviewWhereUniqueInput[]
  }

  export type roomUncheckedCreateNestedManyWithoutHotelInput = {
    create?: XOR<roomCreateWithoutHotelInput, roomUncheckedCreateWithoutHotelInput> | roomCreateWithoutHotelInput[] | roomUncheckedCreateWithoutHotelInput[]
    connectOrCreate?: roomCreateOrConnectWithoutHotelInput | roomCreateOrConnectWithoutHotelInput[]
    createMany?: roomCreateManyHotelInputEnvelope
    connect?: roomWhereUniqueInput | roomWhereUniqueInput[]
  }

  export type serviceUncheckedCreateNestedManyWithoutHotelInput = {
    create?: XOR<serviceCreateWithoutHotelInput, serviceUncheckedCreateWithoutHotelInput> | serviceCreateWithoutHotelInput[] | serviceUncheckedCreateWithoutHotelInput[]
    connectOrCreate?: serviceCreateOrConnectWithoutHotelInput | serviceCreateOrConnectWithoutHotelInput[]
    createMany?: serviceCreateManyHotelInputEnvelope
    connect?: serviceWhereUniqueInput | serviceWhereUniqueInput[]
  }

  export type promotionUncheckedCreateNestedManyWithoutHotelInput = {
    create?: XOR<promotionCreateWithoutHotelInput, promotionUncheckedCreateWithoutHotelInput> | promotionCreateWithoutHotelInput[] | promotionUncheckedCreateWithoutHotelInput[]
    connectOrCreate?: promotionCreateOrConnectWithoutHotelInput | promotionCreateOrConnectWithoutHotelInput[]
    createMany?: promotionCreateManyHotelInputEnvelope
    connect?: promotionWhereUniqueInput | promotionWhereUniqueInput[]
  }

  export type reviewUncheckedCreateNestedManyWithoutHotelInput = {
    create?: XOR<reviewCreateWithoutHotelInput, reviewUncheckedCreateWithoutHotelInput> | reviewCreateWithoutHotelInput[] | reviewUncheckedCreateWithoutHotelInput[]
    connectOrCreate?: reviewCreateOrConnectWithoutHotelInput | reviewCreateOrConnectWithoutHotelInput[]
    createMany?: reviewCreateManyHotelInputEnvelope
    connect?: reviewWhereUniqueInput | reviewWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type roomUpdateManyWithoutHotelNestedInput = {
    create?: XOR<roomCreateWithoutHotelInput, roomUncheckedCreateWithoutHotelInput> | roomCreateWithoutHotelInput[] | roomUncheckedCreateWithoutHotelInput[]
    connectOrCreate?: roomCreateOrConnectWithoutHotelInput | roomCreateOrConnectWithoutHotelInput[]
    upsert?: roomUpsertWithWhereUniqueWithoutHotelInput | roomUpsertWithWhereUniqueWithoutHotelInput[]
    createMany?: roomCreateManyHotelInputEnvelope
    set?: roomWhereUniqueInput | roomWhereUniqueInput[]
    disconnect?: roomWhereUniqueInput | roomWhereUniqueInput[]
    delete?: roomWhereUniqueInput | roomWhereUniqueInput[]
    connect?: roomWhereUniqueInput | roomWhereUniqueInput[]
    update?: roomUpdateWithWhereUniqueWithoutHotelInput | roomUpdateWithWhereUniqueWithoutHotelInput[]
    updateMany?: roomUpdateManyWithWhereWithoutHotelInput | roomUpdateManyWithWhereWithoutHotelInput[]
    deleteMany?: roomScalarWhereInput | roomScalarWhereInput[]
  }

  export type serviceUpdateManyWithoutHotelNestedInput = {
    create?: XOR<serviceCreateWithoutHotelInput, serviceUncheckedCreateWithoutHotelInput> | serviceCreateWithoutHotelInput[] | serviceUncheckedCreateWithoutHotelInput[]
    connectOrCreate?: serviceCreateOrConnectWithoutHotelInput | serviceCreateOrConnectWithoutHotelInput[]
    upsert?: serviceUpsertWithWhereUniqueWithoutHotelInput | serviceUpsertWithWhereUniqueWithoutHotelInput[]
    createMany?: serviceCreateManyHotelInputEnvelope
    set?: serviceWhereUniqueInput | serviceWhereUniqueInput[]
    disconnect?: serviceWhereUniqueInput | serviceWhereUniqueInput[]
    delete?: serviceWhereUniqueInput | serviceWhereUniqueInput[]
    connect?: serviceWhereUniqueInput | serviceWhereUniqueInput[]
    update?: serviceUpdateWithWhereUniqueWithoutHotelInput | serviceUpdateWithWhereUniqueWithoutHotelInput[]
    updateMany?: serviceUpdateManyWithWhereWithoutHotelInput | serviceUpdateManyWithWhereWithoutHotelInput[]
    deleteMany?: serviceScalarWhereInput | serviceScalarWhereInput[]
  }

  export type promotionUpdateManyWithoutHotelNestedInput = {
    create?: XOR<promotionCreateWithoutHotelInput, promotionUncheckedCreateWithoutHotelInput> | promotionCreateWithoutHotelInput[] | promotionUncheckedCreateWithoutHotelInput[]
    connectOrCreate?: promotionCreateOrConnectWithoutHotelInput | promotionCreateOrConnectWithoutHotelInput[]
    upsert?: promotionUpsertWithWhereUniqueWithoutHotelInput | promotionUpsertWithWhereUniqueWithoutHotelInput[]
    createMany?: promotionCreateManyHotelInputEnvelope
    set?: promotionWhereUniqueInput | promotionWhereUniqueInput[]
    disconnect?: promotionWhereUniqueInput | promotionWhereUniqueInput[]
    delete?: promotionWhereUniqueInput | promotionWhereUniqueInput[]
    connect?: promotionWhereUniqueInput | promotionWhereUniqueInput[]
    update?: promotionUpdateWithWhereUniqueWithoutHotelInput | promotionUpdateWithWhereUniqueWithoutHotelInput[]
    updateMany?: promotionUpdateManyWithWhereWithoutHotelInput | promotionUpdateManyWithWhereWithoutHotelInput[]
    deleteMany?: promotionScalarWhereInput | promotionScalarWhereInput[]
  }

  export type reviewUpdateManyWithoutHotelNestedInput = {
    create?: XOR<reviewCreateWithoutHotelInput, reviewUncheckedCreateWithoutHotelInput> | reviewCreateWithoutHotelInput[] | reviewUncheckedCreateWithoutHotelInput[]
    connectOrCreate?: reviewCreateOrConnectWithoutHotelInput | reviewCreateOrConnectWithoutHotelInput[]
    upsert?: reviewUpsertWithWhereUniqueWithoutHotelInput | reviewUpsertWithWhereUniqueWithoutHotelInput[]
    createMany?: reviewCreateManyHotelInputEnvelope
    set?: reviewWhereUniqueInput | reviewWhereUniqueInput[]
    disconnect?: reviewWhereUniqueInput | reviewWhereUniqueInput[]
    delete?: reviewWhereUniqueInput | reviewWhereUniqueInput[]
    connect?: reviewWhereUniqueInput | reviewWhereUniqueInput[]
    update?: reviewUpdateWithWhereUniqueWithoutHotelInput | reviewUpdateWithWhereUniqueWithoutHotelInput[]
    updateMany?: reviewUpdateManyWithWhereWithoutHotelInput | reviewUpdateManyWithWhereWithoutHotelInput[]
    deleteMany?: reviewScalarWhereInput | reviewScalarWhereInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type roomUncheckedUpdateManyWithoutHotelNestedInput = {
    create?: XOR<roomCreateWithoutHotelInput, roomUncheckedCreateWithoutHotelInput> | roomCreateWithoutHotelInput[] | roomUncheckedCreateWithoutHotelInput[]
    connectOrCreate?: roomCreateOrConnectWithoutHotelInput | roomCreateOrConnectWithoutHotelInput[]
    upsert?: roomUpsertWithWhereUniqueWithoutHotelInput | roomUpsertWithWhereUniqueWithoutHotelInput[]
    createMany?: roomCreateManyHotelInputEnvelope
    set?: roomWhereUniqueInput | roomWhereUniqueInput[]
    disconnect?: roomWhereUniqueInput | roomWhereUniqueInput[]
    delete?: roomWhereUniqueInput | roomWhereUniqueInput[]
    connect?: roomWhereUniqueInput | roomWhereUniqueInput[]
    update?: roomUpdateWithWhereUniqueWithoutHotelInput | roomUpdateWithWhereUniqueWithoutHotelInput[]
    updateMany?: roomUpdateManyWithWhereWithoutHotelInput | roomUpdateManyWithWhereWithoutHotelInput[]
    deleteMany?: roomScalarWhereInput | roomScalarWhereInput[]
  }

  export type serviceUncheckedUpdateManyWithoutHotelNestedInput = {
    create?: XOR<serviceCreateWithoutHotelInput, serviceUncheckedCreateWithoutHotelInput> | serviceCreateWithoutHotelInput[] | serviceUncheckedCreateWithoutHotelInput[]
    connectOrCreate?: serviceCreateOrConnectWithoutHotelInput | serviceCreateOrConnectWithoutHotelInput[]
    upsert?: serviceUpsertWithWhereUniqueWithoutHotelInput | serviceUpsertWithWhereUniqueWithoutHotelInput[]
    createMany?: serviceCreateManyHotelInputEnvelope
    set?: serviceWhereUniqueInput | serviceWhereUniqueInput[]
    disconnect?: serviceWhereUniqueInput | serviceWhereUniqueInput[]
    delete?: serviceWhereUniqueInput | serviceWhereUniqueInput[]
    connect?: serviceWhereUniqueInput | serviceWhereUniqueInput[]
    update?: serviceUpdateWithWhereUniqueWithoutHotelInput | serviceUpdateWithWhereUniqueWithoutHotelInput[]
    updateMany?: serviceUpdateManyWithWhereWithoutHotelInput | serviceUpdateManyWithWhereWithoutHotelInput[]
    deleteMany?: serviceScalarWhereInput | serviceScalarWhereInput[]
  }

  export type promotionUncheckedUpdateManyWithoutHotelNestedInput = {
    create?: XOR<promotionCreateWithoutHotelInput, promotionUncheckedCreateWithoutHotelInput> | promotionCreateWithoutHotelInput[] | promotionUncheckedCreateWithoutHotelInput[]
    connectOrCreate?: promotionCreateOrConnectWithoutHotelInput | promotionCreateOrConnectWithoutHotelInput[]
    upsert?: promotionUpsertWithWhereUniqueWithoutHotelInput | promotionUpsertWithWhereUniqueWithoutHotelInput[]
    createMany?: promotionCreateManyHotelInputEnvelope
    set?: promotionWhereUniqueInput | promotionWhereUniqueInput[]
    disconnect?: promotionWhereUniqueInput | promotionWhereUniqueInput[]
    delete?: promotionWhereUniqueInput | promotionWhereUniqueInput[]
    connect?: promotionWhereUniqueInput | promotionWhereUniqueInput[]
    update?: promotionUpdateWithWhereUniqueWithoutHotelInput | promotionUpdateWithWhereUniqueWithoutHotelInput[]
    updateMany?: promotionUpdateManyWithWhereWithoutHotelInput | promotionUpdateManyWithWhereWithoutHotelInput[]
    deleteMany?: promotionScalarWhereInput | promotionScalarWhereInput[]
  }

  export type reviewUncheckedUpdateManyWithoutHotelNestedInput = {
    create?: XOR<reviewCreateWithoutHotelInput, reviewUncheckedCreateWithoutHotelInput> | reviewCreateWithoutHotelInput[] | reviewUncheckedCreateWithoutHotelInput[]
    connectOrCreate?: reviewCreateOrConnectWithoutHotelInput | reviewCreateOrConnectWithoutHotelInput[]
    upsert?: reviewUpsertWithWhereUniqueWithoutHotelInput | reviewUpsertWithWhereUniqueWithoutHotelInput[]
    createMany?: reviewCreateManyHotelInputEnvelope
    set?: reviewWhereUniqueInput | reviewWhereUniqueInput[]
    disconnect?: reviewWhereUniqueInput | reviewWhereUniqueInput[]
    delete?: reviewWhereUniqueInput | reviewWhereUniqueInput[]
    connect?: reviewWhereUniqueInput | reviewWhereUniqueInput[]
    update?: reviewUpdateWithWhereUniqueWithoutHotelInput | reviewUpdateWithWhereUniqueWithoutHotelInput[]
    updateMany?: reviewUpdateManyWithWhereWithoutHotelInput | reviewUpdateManyWithWhereWithoutHotelInput[]
    deleteMany?: reviewScalarWhereInput | reviewScalarWhereInput[]
  }

  export type room_amenityCreateNestedManyWithoutRoomInput = {
    create?: XOR<room_amenityCreateWithoutRoomInput, room_amenityUncheckedCreateWithoutRoomInput> | room_amenityCreateWithoutRoomInput[] | room_amenityUncheckedCreateWithoutRoomInput[]
    connectOrCreate?: room_amenityCreateOrConnectWithoutRoomInput | room_amenityCreateOrConnectWithoutRoomInput[]
    createMany?: room_amenityCreateManyRoomInputEnvelope
    connect?: room_amenityWhereUniqueInput | room_amenityWhereUniqueInput[]
  }

  export type reservationCreateNestedManyWithoutRoomInput = {
    create?: XOR<reservationCreateWithoutRoomInput, reservationUncheckedCreateWithoutRoomInput> | reservationCreateWithoutRoomInput[] | reservationUncheckedCreateWithoutRoomInput[]
    connectOrCreate?: reservationCreateOrConnectWithoutRoomInput | reservationCreateOrConnectWithoutRoomInput[]
    createMany?: reservationCreateManyRoomInputEnvelope
    connect?: reservationWhereUniqueInput | reservationWhereUniqueInput[]
  }

  export type hotelCreateNestedOneWithoutRoomsInput = {
    create?: XOR<hotelCreateWithoutRoomsInput, hotelUncheckedCreateWithoutRoomsInput>
    connectOrCreate?: hotelCreateOrConnectWithoutRoomsInput
    connect?: hotelWhereUniqueInput
  }

  export type room_amenityUncheckedCreateNestedManyWithoutRoomInput = {
    create?: XOR<room_amenityCreateWithoutRoomInput, room_amenityUncheckedCreateWithoutRoomInput> | room_amenityCreateWithoutRoomInput[] | room_amenityUncheckedCreateWithoutRoomInput[]
    connectOrCreate?: room_amenityCreateOrConnectWithoutRoomInput | room_amenityCreateOrConnectWithoutRoomInput[]
    createMany?: room_amenityCreateManyRoomInputEnvelope
    connect?: room_amenityWhereUniqueInput | room_amenityWhereUniqueInput[]
  }

  export type reservationUncheckedCreateNestedManyWithoutRoomInput = {
    create?: XOR<reservationCreateWithoutRoomInput, reservationUncheckedCreateWithoutRoomInput> | reservationCreateWithoutRoomInput[] | reservationUncheckedCreateWithoutRoomInput[]
    connectOrCreate?: reservationCreateOrConnectWithoutRoomInput | reservationCreateOrConnectWithoutRoomInput[]
    createMany?: reservationCreateManyRoomInputEnvelope
    connect?: reservationWhereUniqueInput | reservationWhereUniqueInput[]
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type room_amenityUpdateManyWithoutRoomNestedInput = {
    create?: XOR<room_amenityCreateWithoutRoomInput, room_amenityUncheckedCreateWithoutRoomInput> | room_amenityCreateWithoutRoomInput[] | room_amenityUncheckedCreateWithoutRoomInput[]
    connectOrCreate?: room_amenityCreateOrConnectWithoutRoomInput | room_amenityCreateOrConnectWithoutRoomInput[]
    upsert?: room_amenityUpsertWithWhereUniqueWithoutRoomInput | room_amenityUpsertWithWhereUniqueWithoutRoomInput[]
    createMany?: room_amenityCreateManyRoomInputEnvelope
    set?: room_amenityWhereUniqueInput | room_amenityWhereUniqueInput[]
    disconnect?: room_amenityWhereUniqueInput | room_amenityWhereUniqueInput[]
    delete?: room_amenityWhereUniqueInput | room_amenityWhereUniqueInput[]
    connect?: room_amenityWhereUniqueInput | room_amenityWhereUniqueInput[]
    update?: room_amenityUpdateWithWhereUniqueWithoutRoomInput | room_amenityUpdateWithWhereUniqueWithoutRoomInput[]
    updateMany?: room_amenityUpdateManyWithWhereWithoutRoomInput | room_amenityUpdateManyWithWhereWithoutRoomInput[]
    deleteMany?: room_amenityScalarWhereInput | room_amenityScalarWhereInput[]
  }

  export type reservationUpdateManyWithoutRoomNestedInput = {
    create?: XOR<reservationCreateWithoutRoomInput, reservationUncheckedCreateWithoutRoomInput> | reservationCreateWithoutRoomInput[] | reservationUncheckedCreateWithoutRoomInput[]
    connectOrCreate?: reservationCreateOrConnectWithoutRoomInput | reservationCreateOrConnectWithoutRoomInput[]
    upsert?: reservationUpsertWithWhereUniqueWithoutRoomInput | reservationUpsertWithWhereUniqueWithoutRoomInput[]
    createMany?: reservationCreateManyRoomInputEnvelope
    set?: reservationWhereUniqueInput | reservationWhereUniqueInput[]
    disconnect?: reservationWhereUniqueInput | reservationWhereUniqueInput[]
    delete?: reservationWhereUniqueInput | reservationWhereUniqueInput[]
    connect?: reservationWhereUniqueInput | reservationWhereUniqueInput[]
    update?: reservationUpdateWithWhereUniqueWithoutRoomInput | reservationUpdateWithWhereUniqueWithoutRoomInput[]
    updateMany?: reservationUpdateManyWithWhereWithoutRoomInput | reservationUpdateManyWithWhereWithoutRoomInput[]
    deleteMany?: reservationScalarWhereInput | reservationScalarWhereInput[]
  }

  export type hotelUpdateOneRequiredWithoutRoomsNestedInput = {
    create?: XOR<hotelCreateWithoutRoomsInput, hotelUncheckedCreateWithoutRoomsInput>
    connectOrCreate?: hotelCreateOrConnectWithoutRoomsInput
    upsert?: hotelUpsertWithoutRoomsInput
    connect?: hotelWhereUniqueInput
    update?: XOR<XOR<hotelUpdateToOneWithWhereWithoutRoomsInput, hotelUpdateWithoutRoomsInput>, hotelUncheckedUpdateWithoutRoomsInput>
  }

  export type room_amenityUncheckedUpdateManyWithoutRoomNestedInput = {
    create?: XOR<room_amenityCreateWithoutRoomInput, room_amenityUncheckedCreateWithoutRoomInput> | room_amenityCreateWithoutRoomInput[] | room_amenityUncheckedCreateWithoutRoomInput[]
    connectOrCreate?: room_amenityCreateOrConnectWithoutRoomInput | room_amenityCreateOrConnectWithoutRoomInput[]
    upsert?: room_amenityUpsertWithWhereUniqueWithoutRoomInput | room_amenityUpsertWithWhereUniqueWithoutRoomInput[]
    createMany?: room_amenityCreateManyRoomInputEnvelope
    set?: room_amenityWhereUniqueInput | room_amenityWhereUniqueInput[]
    disconnect?: room_amenityWhereUniqueInput | room_amenityWhereUniqueInput[]
    delete?: room_amenityWhereUniqueInput | room_amenityWhereUniqueInput[]
    connect?: room_amenityWhereUniqueInput | room_amenityWhereUniqueInput[]
    update?: room_amenityUpdateWithWhereUniqueWithoutRoomInput | room_amenityUpdateWithWhereUniqueWithoutRoomInput[]
    updateMany?: room_amenityUpdateManyWithWhereWithoutRoomInput | room_amenityUpdateManyWithWhereWithoutRoomInput[]
    deleteMany?: room_amenityScalarWhereInput | room_amenityScalarWhereInput[]
  }

  export type reservationUncheckedUpdateManyWithoutRoomNestedInput = {
    create?: XOR<reservationCreateWithoutRoomInput, reservationUncheckedCreateWithoutRoomInput> | reservationCreateWithoutRoomInput[] | reservationUncheckedCreateWithoutRoomInput[]
    connectOrCreate?: reservationCreateOrConnectWithoutRoomInput | reservationCreateOrConnectWithoutRoomInput[]
    upsert?: reservationUpsertWithWhereUniqueWithoutRoomInput | reservationUpsertWithWhereUniqueWithoutRoomInput[]
    createMany?: reservationCreateManyRoomInputEnvelope
    set?: reservationWhereUniqueInput | reservationWhereUniqueInput[]
    disconnect?: reservationWhereUniqueInput | reservationWhereUniqueInput[]
    delete?: reservationWhereUniqueInput | reservationWhereUniqueInput[]
    connect?: reservationWhereUniqueInput | reservationWhereUniqueInput[]
    update?: reservationUpdateWithWhereUniqueWithoutRoomInput | reservationUpdateWithWhereUniqueWithoutRoomInput[]
    updateMany?: reservationUpdateManyWithWhereWithoutRoomInput | reservationUpdateManyWithWhereWithoutRoomInput[]
    deleteMany?: reservationScalarWhereInput | reservationScalarWhereInput[]
  }

  export type userCreateNestedOneWithoutReservationsInput = {
    create?: XOR<userCreateWithoutReservationsInput, userUncheckedCreateWithoutReservationsInput>
    connectOrCreate?: userCreateOrConnectWithoutReservationsInput
    connect?: userWhereUniqueInput
  }

  export type roomCreateNestedOneWithoutReservationsInput = {
    create?: XOR<roomCreateWithoutReservationsInput, roomUncheckedCreateWithoutReservationsInput>
    connectOrCreate?: roomCreateOrConnectWithoutReservationsInput
    connect?: roomWhereUniqueInput
  }

  export type service_reservationCreateNestedManyWithoutReservationInput = {
    create?: XOR<service_reservationCreateWithoutReservationInput, service_reservationUncheckedCreateWithoutReservationInput> | service_reservationCreateWithoutReservationInput[] | service_reservationUncheckedCreateWithoutReservationInput[]
    connectOrCreate?: service_reservationCreateOrConnectWithoutReservationInput | service_reservationCreateOrConnectWithoutReservationInput[]
    createMany?: service_reservationCreateManyReservationInputEnvelope
    connect?: service_reservationWhereUniqueInput | service_reservationWhereUniqueInput[]
  }

  export type payment_recordCreateNestedManyWithoutReservationInput = {
    create?: XOR<payment_recordCreateWithoutReservationInput, payment_recordUncheckedCreateWithoutReservationInput> | payment_recordCreateWithoutReservationInput[] | payment_recordUncheckedCreateWithoutReservationInput[]
    connectOrCreate?: payment_recordCreateOrConnectWithoutReservationInput | payment_recordCreateOrConnectWithoutReservationInput[]
    createMany?: payment_recordCreateManyReservationInputEnvelope
    connect?: payment_recordWhereUniqueInput | payment_recordWhereUniqueInput[]
  }

  export type service_reservationUncheckedCreateNestedManyWithoutReservationInput = {
    create?: XOR<service_reservationCreateWithoutReservationInput, service_reservationUncheckedCreateWithoutReservationInput> | service_reservationCreateWithoutReservationInput[] | service_reservationUncheckedCreateWithoutReservationInput[]
    connectOrCreate?: service_reservationCreateOrConnectWithoutReservationInput | service_reservationCreateOrConnectWithoutReservationInput[]
    createMany?: service_reservationCreateManyReservationInputEnvelope
    connect?: service_reservationWhereUniqueInput | service_reservationWhereUniqueInput[]
  }

  export type payment_recordUncheckedCreateNestedManyWithoutReservationInput = {
    create?: XOR<payment_recordCreateWithoutReservationInput, payment_recordUncheckedCreateWithoutReservationInput> | payment_recordCreateWithoutReservationInput[] | payment_recordUncheckedCreateWithoutReservationInput[]
    connectOrCreate?: payment_recordCreateOrConnectWithoutReservationInput | payment_recordCreateOrConnectWithoutReservationInput[]
    createMany?: payment_recordCreateManyReservationInputEnvelope
    connect?: payment_recordWhereUniqueInput | payment_recordWhereUniqueInput[]
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type userUpdateOneRequiredWithoutReservationsNestedInput = {
    create?: XOR<userCreateWithoutReservationsInput, userUncheckedCreateWithoutReservationsInput>
    connectOrCreate?: userCreateOrConnectWithoutReservationsInput
    upsert?: userUpsertWithoutReservationsInput
    connect?: userWhereUniqueInput
    update?: XOR<XOR<userUpdateToOneWithWhereWithoutReservationsInput, userUpdateWithoutReservationsInput>, userUncheckedUpdateWithoutReservationsInput>
  }

  export type roomUpdateOneRequiredWithoutReservationsNestedInput = {
    create?: XOR<roomCreateWithoutReservationsInput, roomUncheckedCreateWithoutReservationsInput>
    connectOrCreate?: roomCreateOrConnectWithoutReservationsInput
    upsert?: roomUpsertWithoutReservationsInput
    connect?: roomWhereUniqueInput
    update?: XOR<XOR<roomUpdateToOneWithWhereWithoutReservationsInput, roomUpdateWithoutReservationsInput>, roomUncheckedUpdateWithoutReservationsInput>
  }

  export type service_reservationUpdateManyWithoutReservationNestedInput = {
    create?: XOR<service_reservationCreateWithoutReservationInput, service_reservationUncheckedCreateWithoutReservationInput> | service_reservationCreateWithoutReservationInput[] | service_reservationUncheckedCreateWithoutReservationInput[]
    connectOrCreate?: service_reservationCreateOrConnectWithoutReservationInput | service_reservationCreateOrConnectWithoutReservationInput[]
    upsert?: service_reservationUpsertWithWhereUniqueWithoutReservationInput | service_reservationUpsertWithWhereUniqueWithoutReservationInput[]
    createMany?: service_reservationCreateManyReservationInputEnvelope
    set?: service_reservationWhereUniqueInput | service_reservationWhereUniqueInput[]
    disconnect?: service_reservationWhereUniqueInput | service_reservationWhereUniqueInput[]
    delete?: service_reservationWhereUniqueInput | service_reservationWhereUniqueInput[]
    connect?: service_reservationWhereUniqueInput | service_reservationWhereUniqueInput[]
    update?: service_reservationUpdateWithWhereUniqueWithoutReservationInput | service_reservationUpdateWithWhereUniqueWithoutReservationInput[]
    updateMany?: service_reservationUpdateManyWithWhereWithoutReservationInput | service_reservationUpdateManyWithWhereWithoutReservationInput[]
    deleteMany?: service_reservationScalarWhereInput | service_reservationScalarWhereInput[]
  }

  export type payment_recordUpdateManyWithoutReservationNestedInput = {
    create?: XOR<payment_recordCreateWithoutReservationInput, payment_recordUncheckedCreateWithoutReservationInput> | payment_recordCreateWithoutReservationInput[] | payment_recordUncheckedCreateWithoutReservationInput[]
    connectOrCreate?: payment_recordCreateOrConnectWithoutReservationInput | payment_recordCreateOrConnectWithoutReservationInput[]
    upsert?: payment_recordUpsertWithWhereUniqueWithoutReservationInput | payment_recordUpsertWithWhereUniqueWithoutReservationInput[]
    createMany?: payment_recordCreateManyReservationInputEnvelope
    set?: payment_recordWhereUniqueInput | payment_recordWhereUniqueInput[]
    disconnect?: payment_recordWhereUniqueInput | payment_recordWhereUniqueInput[]
    delete?: payment_recordWhereUniqueInput | payment_recordWhereUniqueInput[]
    connect?: payment_recordWhereUniqueInput | payment_recordWhereUniqueInput[]
    update?: payment_recordUpdateWithWhereUniqueWithoutReservationInput | payment_recordUpdateWithWhereUniqueWithoutReservationInput[]
    updateMany?: payment_recordUpdateManyWithWhereWithoutReservationInput | payment_recordUpdateManyWithWhereWithoutReservationInput[]
    deleteMany?: payment_recordScalarWhereInput | payment_recordScalarWhereInput[]
  }

  export type service_reservationUncheckedUpdateManyWithoutReservationNestedInput = {
    create?: XOR<service_reservationCreateWithoutReservationInput, service_reservationUncheckedCreateWithoutReservationInput> | service_reservationCreateWithoutReservationInput[] | service_reservationUncheckedCreateWithoutReservationInput[]
    connectOrCreate?: service_reservationCreateOrConnectWithoutReservationInput | service_reservationCreateOrConnectWithoutReservationInput[]
    upsert?: service_reservationUpsertWithWhereUniqueWithoutReservationInput | service_reservationUpsertWithWhereUniqueWithoutReservationInput[]
    createMany?: service_reservationCreateManyReservationInputEnvelope
    set?: service_reservationWhereUniqueInput | service_reservationWhereUniqueInput[]
    disconnect?: service_reservationWhereUniqueInput | service_reservationWhereUniqueInput[]
    delete?: service_reservationWhereUniqueInput | service_reservationWhereUniqueInput[]
    connect?: service_reservationWhereUniqueInput | service_reservationWhereUniqueInput[]
    update?: service_reservationUpdateWithWhereUniqueWithoutReservationInput | service_reservationUpdateWithWhereUniqueWithoutReservationInput[]
    updateMany?: service_reservationUpdateManyWithWhereWithoutReservationInput | service_reservationUpdateManyWithWhereWithoutReservationInput[]
    deleteMany?: service_reservationScalarWhereInput | service_reservationScalarWhereInput[]
  }

  export type payment_recordUncheckedUpdateManyWithoutReservationNestedInput = {
    create?: XOR<payment_recordCreateWithoutReservationInput, payment_recordUncheckedCreateWithoutReservationInput> | payment_recordCreateWithoutReservationInput[] | payment_recordUncheckedCreateWithoutReservationInput[]
    connectOrCreate?: payment_recordCreateOrConnectWithoutReservationInput | payment_recordCreateOrConnectWithoutReservationInput[]
    upsert?: payment_recordUpsertWithWhereUniqueWithoutReservationInput | payment_recordUpsertWithWhereUniqueWithoutReservationInput[]
    createMany?: payment_recordCreateManyReservationInputEnvelope
    set?: payment_recordWhereUniqueInput | payment_recordWhereUniqueInput[]
    disconnect?: payment_recordWhereUniqueInput | payment_recordWhereUniqueInput[]
    delete?: payment_recordWhereUniqueInput | payment_recordWhereUniqueInput[]
    connect?: payment_recordWhereUniqueInput | payment_recordWhereUniqueInput[]
    update?: payment_recordUpdateWithWhereUniqueWithoutReservationInput | payment_recordUpdateWithWhereUniqueWithoutReservationInput[]
    updateMany?: payment_recordUpdateManyWithWhereWithoutReservationInput | payment_recordUpdateManyWithWhereWithoutReservationInput[]
    deleteMany?: payment_recordScalarWhereInput | payment_recordScalarWhereInput[]
  }

  export type reservationCreateNestedManyWithoutUserInput = {
    create?: XOR<reservationCreateWithoutUserInput, reservationUncheckedCreateWithoutUserInput> | reservationCreateWithoutUserInput[] | reservationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: reservationCreateOrConnectWithoutUserInput | reservationCreateOrConnectWithoutUserInput[]
    createMany?: reservationCreateManyUserInputEnvelope
    connect?: reservationWhereUniqueInput | reservationWhereUniqueInput[]
  }

  export type reviewCreateNestedManyWithoutUserInput = {
    create?: XOR<reviewCreateWithoutUserInput, reviewUncheckedCreateWithoutUserInput> | reviewCreateWithoutUserInput[] | reviewUncheckedCreateWithoutUserInput[]
    connectOrCreate?: reviewCreateOrConnectWithoutUserInput | reviewCreateOrConnectWithoutUserInput[]
    createMany?: reviewCreateManyUserInputEnvelope
    connect?: reviewWhereUniqueInput | reviewWhereUniqueInput[]
  }

  export type reservationUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<reservationCreateWithoutUserInput, reservationUncheckedCreateWithoutUserInput> | reservationCreateWithoutUserInput[] | reservationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: reservationCreateOrConnectWithoutUserInput | reservationCreateOrConnectWithoutUserInput[]
    createMany?: reservationCreateManyUserInputEnvelope
    connect?: reservationWhereUniqueInput | reservationWhereUniqueInput[]
  }

  export type reviewUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<reviewCreateWithoutUserInput, reviewUncheckedCreateWithoutUserInput> | reviewCreateWithoutUserInput[] | reviewUncheckedCreateWithoutUserInput[]
    connectOrCreate?: reviewCreateOrConnectWithoutUserInput | reviewCreateOrConnectWithoutUserInput[]
    createMany?: reviewCreateManyUserInputEnvelope
    connect?: reviewWhereUniqueInput | reviewWhereUniqueInput[]
  }

  export type reservationUpdateManyWithoutUserNestedInput = {
    create?: XOR<reservationCreateWithoutUserInput, reservationUncheckedCreateWithoutUserInput> | reservationCreateWithoutUserInput[] | reservationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: reservationCreateOrConnectWithoutUserInput | reservationCreateOrConnectWithoutUserInput[]
    upsert?: reservationUpsertWithWhereUniqueWithoutUserInput | reservationUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: reservationCreateManyUserInputEnvelope
    set?: reservationWhereUniqueInput | reservationWhereUniqueInput[]
    disconnect?: reservationWhereUniqueInput | reservationWhereUniqueInput[]
    delete?: reservationWhereUniqueInput | reservationWhereUniqueInput[]
    connect?: reservationWhereUniqueInput | reservationWhereUniqueInput[]
    update?: reservationUpdateWithWhereUniqueWithoutUserInput | reservationUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: reservationUpdateManyWithWhereWithoutUserInput | reservationUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: reservationScalarWhereInput | reservationScalarWhereInput[]
  }

  export type reviewUpdateManyWithoutUserNestedInput = {
    create?: XOR<reviewCreateWithoutUserInput, reviewUncheckedCreateWithoutUserInput> | reviewCreateWithoutUserInput[] | reviewUncheckedCreateWithoutUserInput[]
    connectOrCreate?: reviewCreateOrConnectWithoutUserInput | reviewCreateOrConnectWithoutUserInput[]
    upsert?: reviewUpsertWithWhereUniqueWithoutUserInput | reviewUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: reviewCreateManyUserInputEnvelope
    set?: reviewWhereUniqueInput | reviewWhereUniqueInput[]
    disconnect?: reviewWhereUniqueInput | reviewWhereUniqueInput[]
    delete?: reviewWhereUniqueInput | reviewWhereUniqueInput[]
    connect?: reviewWhereUniqueInput | reviewWhereUniqueInput[]
    update?: reviewUpdateWithWhereUniqueWithoutUserInput | reviewUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: reviewUpdateManyWithWhereWithoutUserInput | reviewUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: reviewScalarWhereInput | reviewScalarWhereInput[]
  }

  export type reservationUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<reservationCreateWithoutUserInput, reservationUncheckedCreateWithoutUserInput> | reservationCreateWithoutUserInput[] | reservationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: reservationCreateOrConnectWithoutUserInput | reservationCreateOrConnectWithoutUserInput[]
    upsert?: reservationUpsertWithWhereUniqueWithoutUserInput | reservationUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: reservationCreateManyUserInputEnvelope
    set?: reservationWhereUniqueInput | reservationWhereUniqueInput[]
    disconnect?: reservationWhereUniqueInput | reservationWhereUniqueInput[]
    delete?: reservationWhereUniqueInput | reservationWhereUniqueInput[]
    connect?: reservationWhereUniqueInput | reservationWhereUniqueInput[]
    update?: reservationUpdateWithWhereUniqueWithoutUserInput | reservationUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: reservationUpdateManyWithWhereWithoutUserInput | reservationUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: reservationScalarWhereInput | reservationScalarWhereInput[]
  }

  export type reviewUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<reviewCreateWithoutUserInput, reviewUncheckedCreateWithoutUserInput> | reviewCreateWithoutUserInput[] | reviewUncheckedCreateWithoutUserInput[]
    connectOrCreate?: reviewCreateOrConnectWithoutUserInput | reviewCreateOrConnectWithoutUserInput[]
    upsert?: reviewUpsertWithWhereUniqueWithoutUserInput | reviewUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: reviewCreateManyUserInputEnvelope
    set?: reviewWhereUniqueInput | reviewWhereUniqueInput[]
    disconnect?: reviewWhereUniqueInput | reviewWhereUniqueInput[]
    delete?: reviewWhereUniqueInput | reviewWhereUniqueInput[]
    connect?: reviewWhereUniqueInput | reviewWhereUniqueInput[]
    update?: reviewUpdateWithWhereUniqueWithoutUserInput | reviewUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: reviewUpdateManyWithWhereWithoutUserInput | reviewUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: reviewScalarWhereInput | reviewScalarWhereInput[]
  }

  export type hotelCreateNestedOneWithoutServicesInput = {
    create?: XOR<hotelCreateWithoutServicesInput, hotelUncheckedCreateWithoutServicesInput>
    connectOrCreate?: hotelCreateOrConnectWithoutServicesInput
    connect?: hotelWhereUniqueInput
  }

  export type service_reservationCreateNestedManyWithoutServiceInput = {
    create?: XOR<service_reservationCreateWithoutServiceInput, service_reservationUncheckedCreateWithoutServiceInput> | service_reservationCreateWithoutServiceInput[] | service_reservationUncheckedCreateWithoutServiceInput[]
    connectOrCreate?: service_reservationCreateOrConnectWithoutServiceInput | service_reservationCreateOrConnectWithoutServiceInput[]
    createMany?: service_reservationCreateManyServiceInputEnvelope
    connect?: service_reservationWhereUniqueInput | service_reservationWhereUniqueInput[]
  }

  export type service_reservationUncheckedCreateNestedManyWithoutServiceInput = {
    create?: XOR<service_reservationCreateWithoutServiceInput, service_reservationUncheckedCreateWithoutServiceInput> | service_reservationCreateWithoutServiceInput[] | service_reservationUncheckedCreateWithoutServiceInput[]
    connectOrCreate?: service_reservationCreateOrConnectWithoutServiceInput | service_reservationCreateOrConnectWithoutServiceInput[]
    createMany?: service_reservationCreateManyServiceInputEnvelope
    connect?: service_reservationWhereUniqueInput | service_reservationWhereUniqueInput[]
  }

  export type hotelUpdateOneRequiredWithoutServicesNestedInput = {
    create?: XOR<hotelCreateWithoutServicesInput, hotelUncheckedCreateWithoutServicesInput>
    connectOrCreate?: hotelCreateOrConnectWithoutServicesInput
    upsert?: hotelUpsertWithoutServicesInput
    connect?: hotelWhereUniqueInput
    update?: XOR<XOR<hotelUpdateToOneWithWhereWithoutServicesInput, hotelUpdateWithoutServicesInput>, hotelUncheckedUpdateWithoutServicesInput>
  }

  export type service_reservationUpdateManyWithoutServiceNestedInput = {
    create?: XOR<service_reservationCreateWithoutServiceInput, service_reservationUncheckedCreateWithoutServiceInput> | service_reservationCreateWithoutServiceInput[] | service_reservationUncheckedCreateWithoutServiceInput[]
    connectOrCreate?: service_reservationCreateOrConnectWithoutServiceInput | service_reservationCreateOrConnectWithoutServiceInput[]
    upsert?: service_reservationUpsertWithWhereUniqueWithoutServiceInput | service_reservationUpsertWithWhereUniqueWithoutServiceInput[]
    createMany?: service_reservationCreateManyServiceInputEnvelope
    set?: service_reservationWhereUniqueInput | service_reservationWhereUniqueInput[]
    disconnect?: service_reservationWhereUniqueInput | service_reservationWhereUniqueInput[]
    delete?: service_reservationWhereUniqueInput | service_reservationWhereUniqueInput[]
    connect?: service_reservationWhereUniqueInput | service_reservationWhereUniqueInput[]
    update?: service_reservationUpdateWithWhereUniqueWithoutServiceInput | service_reservationUpdateWithWhereUniqueWithoutServiceInput[]
    updateMany?: service_reservationUpdateManyWithWhereWithoutServiceInput | service_reservationUpdateManyWithWhereWithoutServiceInput[]
    deleteMany?: service_reservationScalarWhereInput | service_reservationScalarWhereInput[]
  }

  export type service_reservationUncheckedUpdateManyWithoutServiceNestedInput = {
    create?: XOR<service_reservationCreateWithoutServiceInput, service_reservationUncheckedCreateWithoutServiceInput> | service_reservationCreateWithoutServiceInput[] | service_reservationUncheckedCreateWithoutServiceInput[]
    connectOrCreate?: service_reservationCreateOrConnectWithoutServiceInput | service_reservationCreateOrConnectWithoutServiceInput[]
    upsert?: service_reservationUpsertWithWhereUniqueWithoutServiceInput | service_reservationUpsertWithWhereUniqueWithoutServiceInput[]
    createMany?: service_reservationCreateManyServiceInputEnvelope
    set?: service_reservationWhereUniqueInput | service_reservationWhereUniqueInput[]
    disconnect?: service_reservationWhereUniqueInput | service_reservationWhereUniqueInput[]
    delete?: service_reservationWhereUniqueInput | service_reservationWhereUniqueInput[]
    connect?: service_reservationWhereUniqueInput | service_reservationWhereUniqueInput[]
    update?: service_reservationUpdateWithWhereUniqueWithoutServiceInput | service_reservationUpdateWithWhereUniqueWithoutServiceInput[]
    updateMany?: service_reservationUpdateManyWithWhereWithoutServiceInput | service_reservationUpdateManyWithWhereWithoutServiceInput[]
    deleteMany?: service_reservationScalarWhereInput | service_reservationScalarWhereInput[]
  }

  export type reservationCreateNestedOneWithoutServicesInput = {
    create?: XOR<reservationCreateWithoutServicesInput, reservationUncheckedCreateWithoutServicesInput>
    connectOrCreate?: reservationCreateOrConnectWithoutServicesInput
    connect?: reservationWhereUniqueInput
  }

  export type serviceCreateNestedOneWithoutReservationsInput = {
    create?: XOR<serviceCreateWithoutReservationsInput, serviceUncheckedCreateWithoutReservationsInput>
    connectOrCreate?: serviceCreateOrConnectWithoutReservationsInput
    connect?: serviceWhereUniqueInput
  }

  export type reservationUpdateOneRequiredWithoutServicesNestedInput = {
    create?: XOR<reservationCreateWithoutServicesInput, reservationUncheckedCreateWithoutServicesInput>
    connectOrCreate?: reservationCreateOrConnectWithoutServicesInput
    upsert?: reservationUpsertWithoutServicesInput
    connect?: reservationWhereUniqueInput
    update?: XOR<XOR<reservationUpdateToOneWithWhereWithoutServicesInput, reservationUpdateWithoutServicesInput>, reservationUncheckedUpdateWithoutServicesInput>
  }

  export type serviceUpdateOneRequiredWithoutReservationsNestedInput = {
    create?: XOR<serviceCreateWithoutReservationsInput, serviceUncheckedCreateWithoutReservationsInput>
    connectOrCreate?: serviceCreateOrConnectWithoutReservationsInput
    upsert?: serviceUpsertWithoutReservationsInput
    connect?: serviceWhereUniqueInput
    update?: XOR<XOR<serviceUpdateToOneWithWhereWithoutReservationsInput, serviceUpdateWithoutReservationsInput>, serviceUncheckedUpdateWithoutReservationsInput>
  }

  export type userCreateNestedOneWithoutReviewsInput = {
    create?: XOR<userCreateWithoutReviewsInput, userUncheckedCreateWithoutReviewsInput>
    connectOrCreate?: userCreateOrConnectWithoutReviewsInput
    connect?: userWhereUniqueInput
  }

  export type hotelCreateNestedOneWithoutReviewsInput = {
    create?: XOR<hotelCreateWithoutReviewsInput, hotelUncheckedCreateWithoutReviewsInput>
    connectOrCreate?: hotelCreateOrConnectWithoutReviewsInput
    connect?: hotelWhereUniqueInput
  }

  export type userUpdateOneRequiredWithoutReviewsNestedInput = {
    create?: XOR<userCreateWithoutReviewsInput, userUncheckedCreateWithoutReviewsInput>
    connectOrCreate?: userCreateOrConnectWithoutReviewsInput
    upsert?: userUpsertWithoutReviewsInput
    connect?: userWhereUniqueInput
    update?: XOR<XOR<userUpdateToOneWithWhereWithoutReviewsInput, userUpdateWithoutReviewsInput>, userUncheckedUpdateWithoutReviewsInput>
  }

  export type hotelUpdateOneRequiredWithoutReviewsNestedInput = {
    create?: XOR<hotelCreateWithoutReviewsInput, hotelUncheckedCreateWithoutReviewsInput>
    connectOrCreate?: hotelCreateOrConnectWithoutReviewsInput
    upsert?: hotelUpsertWithoutReviewsInput
    connect?: hotelWhereUniqueInput
    update?: XOR<XOR<hotelUpdateToOneWithWhereWithoutReviewsInput, hotelUpdateWithoutReviewsInput>, hotelUncheckedUpdateWithoutReviewsInput>
  }

  export type hotelCreateNestedOneWithoutPromotionsInput = {
    create?: XOR<hotelCreateWithoutPromotionsInput, hotelUncheckedCreateWithoutPromotionsInput>
    connectOrCreate?: hotelCreateOrConnectWithoutPromotionsInput
    connect?: hotelWhereUniqueInput
  }

  export type hotelUpdateOneRequiredWithoutPromotionsNestedInput = {
    create?: XOR<hotelCreateWithoutPromotionsInput, hotelUncheckedCreateWithoutPromotionsInput>
    connectOrCreate?: hotelCreateOrConnectWithoutPromotionsInput
    upsert?: hotelUpsertWithoutPromotionsInput
    connect?: hotelWhereUniqueInput
    update?: XOR<XOR<hotelUpdateToOneWithWhereWithoutPromotionsInput, hotelUpdateWithoutPromotionsInput>, hotelUncheckedUpdateWithoutPromotionsInput>
  }

  export type reservationCreateNestedOneWithoutPayment_recordsInput = {
    create?: XOR<reservationCreateWithoutPayment_recordsInput, reservationUncheckedCreateWithoutPayment_recordsInput>
    connectOrCreate?: reservationCreateOrConnectWithoutPayment_recordsInput
    connect?: reservationWhereUniqueInput
  }

  export type reservationUpdateOneRequiredWithoutPayment_recordsNestedInput = {
    create?: XOR<reservationCreateWithoutPayment_recordsInput, reservationUncheckedCreateWithoutPayment_recordsInput>
    connectOrCreate?: reservationCreateOrConnectWithoutPayment_recordsInput
    upsert?: reservationUpsertWithoutPayment_recordsInput
    connect?: reservationWhereUniqueInput
    update?: XOR<XOR<reservationUpdateToOneWithWhereWithoutPayment_recordsInput, reservationUpdateWithoutPayment_recordsInput>, reservationUncheckedUpdateWithoutPayment_recordsInput>
  }

  export type roomCreateNestedOneWithoutAmenitiesInput = {
    create?: XOR<roomCreateWithoutAmenitiesInput, roomUncheckedCreateWithoutAmenitiesInput>
    connectOrCreate?: roomCreateOrConnectWithoutAmenitiesInput
    connect?: roomWhereUniqueInput
  }

  export type roomUpdateOneRequiredWithoutAmenitiesNestedInput = {
    create?: XOR<roomCreateWithoutAmenitiesInput, roomUncheckedCreateWithoutAmenitiesInput>
    connectOrCreate?: roomCreateOrConnectWithoutAmenitiesInput
    upsert?: roomUpsertWithoutAmenitiesInput
    connect?: roomWhereUniqueInput
    update?: XOR<XOR<roomUpdateToOneWithWhereWithoutAmenitiesInput, roomUpdateWithoutAmenitiesInput>, roomUncheckedUpdateWithoutAmenitiesInput>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedFloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type roomCreateWithoutHotelInput = {
    room_type: string
    roomNumber: number
    price: number
    availability: boolean
    amenities?: room_amenityCreateNestedManyWithoutRoomInput
    reservations?: reservationCreateNestedManyWithoutRoomInput
  }

  export type roomUncheckedCreateWithoutHotelInput = {
    id?: number
    room_type: string
    roomNumber: number
    price: number
    availability: boolean
    amenities?: room_amenityUncheckedCreateNestedManyWithoutRoomInput
    reservations?: reservationUncheckedCreateNestedManyWithoutRoomInput
  }

  export type roomCreateOrConnectWithoutHotelInput = {
    where: roomWhereUniqueInput
    create: XOR<roomCreateWithoutHotelInput, roomUncheckedCreateWithoutHotelInput>
  }

  export type roomCreateManyHotelInputEnvelope = {
    data: roomCreateManyHotelInput | roomCreateManyHotelInput[]
    skipDuplicates?: boolean
  }

  export type serviceCreateWithoutHotelInput = {
    service_type: string
    price: number
    reservations?: service_reservationCreateNestedManyWithoutServiceInput
  }

  export type serviceUncheckedCreateWithoutHotelInput = {
    id?: number
    service_type: string
    price: number
    reservations?: service_reservationUncheckedCreateNestedManyWithoutServiceInput
  }

  export type serviceCreateOrConnectWithoutHotelInput = {
    where: serviceWhereUniqueInput
    create: XOR<serviceCreateWithoutHotelInput, serviceUncheckedCreateWithoutHotelInput>
  }

  export type serviceCreateManyHotelInputEnvelope = {
    data: serviceCreateManyHotelInput | serviceCreateManyHotelInput[]
    skipDuplicates?: boolean
  }

  export type promotionCreateWithoutHotelInput = {
    promotion_type: string
    discount_percentage: number
    start_date: Date | string
    end_date: Date | string
  }

  export type promotionUncheckedCreateWithoutHotelInput = {
    id?: number
    promotion_type: string
    discount_percentage: number
    start_date: Date | string
    end_date: Date | string
  }

  export type promotionCreateOrConnectWithoutHotelInput = {
    where: promotionWhereUniqueInput
    create: XOR<promotionCreateWithoutHotelInput, promotionUncheckedCreateWithoutHotelInput>
  }

  export type promotionCreateManyHotelInputEnvelope = {
    data: promotionCreateManyHotelInput | promotionCreateManyHotelInput[]
    skipDuplicates?: boolean
  }

  export type reviewCreateWithoutHotelInput = {
    rating: number
    comment: string
    review_date: Date | string
    user: userCreateNestedOneWithoutReviewsInput
  }

  export type reviewUncheckedCreateWithoutHotelInput = {
    id?: number
    user_id: number
    rating: number
    comment: string
    review_date: Date | string
  }

  export type reviewCreateOrConnectWithoutHotelInput = {
    where: reviewWhereUniqueInput
    create: XOR<reviewCreateWithoutHotelInput, reviewUncheckedCreateWithoutHotelInput>
  }

  export type reviewCreateManyHotelInputEnvelope = {
    data: reviewCreateManyHotelInput | reviewCreateManyHotelInput[]
    skipDuplicates?: boolean
  }

  export type roomUpsertWithWhereUniqueWithoutHotelInput = {
    where: roomWhereUniqueInput
    update: XOR<roomUpdateWithoutHotelInput, roomUncheckedUpdateWithoutHotelInput>
    create: XOR<roomCreateWithoutHotelInput, roomUncheckedCreateWithoutHotelInput>
  }

  export type roomUpdateWithWhereUniqueWithoutHotelInput = {
    where: roomWhereUniqueInput
    data: XOR<roomUpdateWithoutHotelInput, roomUncheckedUpdateWithoutHotelInput>
  }

  export type roomUpdateManyWithWhereWithoutHotelInput = {
    where: roomScalarWhereInput
    data: XOR<roomUpdateManyMutationInput, roomUncheckedUpdateManyWithoutHotelInput>
  }

  export type roomScalarWhereInput = {
    AND?: roomScalarWhereInput | roomScalarWhereInput[]
    OR?: roomScalarWhereInput[]
    NOT?: roomScalarWhereInput | roomScalarWhereInput[]
    id?: IntFilter<"room"> | number
    hotel_id?: IntFilter<"room"> | number
    room_type?: StringFilter<"room"> | string
    roomNumber?: IntFilter<"room"> | number
    price?: FloatFilter<"room"> | number
    availability?: BoolFilter<"room"> | boolean
  }

  export type serviceUpsertWithWhereUniqueWithoutHotelInput = {
    where: serviceWhereUniqueInput
    update: XOR<serviceUpdateWithoutHotelInput, serviceUncheckedUpdateWithoutHotelInput>
    create: XOR<serviceCreateWithoutHotelInput, serviceUncheckedCreateWithoutHotelInput>
  }

  export type serviceUpdateWithWhereUniqueWithoutHotelInput = {
    where: serviceWhereUniqueInput
    data: XOR<serviceUpdateWithoutHotelInput, serviceUncheckedUpdateWithoutHotelInput>
  }

  export type serviceUpdateManyWithWhereWithoutHotelInput = {
    where: serviceScalarWhereInput
    data: XOR<serviceUpdateManyMutationInput, serviceUncheckedUpdateManyWithoutHotelInput>
  }

  export type serviceScalarWhereInput = {
    AND?: serviceScalarWhereInput | serviceScalarWhereInput[]
    OR?: serviceScalarWhereInput[]
    NOT?: serviceScalarWhereInput | serviceScalarWhereInput[]
    id?: IntFilter<"service"> | number
    hotel_id?: IntFilter<"service"> | number
    service_type?: StringFilter<"service"> | string
    price?: FloatFilter<"service"> | number
  }

  export type promotionUpsertWithWhereUniqueWithoutHotelInput = {
    where: promotionWhereUniqueInput
    update: XOR<promotionUpdateWithoutHotelInput, promotionUncheckedUpdateWithoutHotelInput>
    create: XOR<promotionCreateWithoutHotelInput, promotionUncheckedCreateWithoutHotelInput>
  }

  export type promotionUpdateWithWhereUniqueWithoutHotelInput = {
    where: promotionWhereUniqueInput
    data: XOR<promotionUpdateWithoutHotelInput, promotionUncheckedUpdateWithoutHotelInput>
  }

  export type promotionUpdateManyWithWhereWithoutHotelInput = {
    where: promotionScalarWhereInput
    data: XOR<promotionUpdateManyMutationInput, promotionUncheckedUpdateManyWithoutHotelInput>
  }

  export type promotionScalarWhereInput = {
    AND?: promotionScalarWhereInput | promotionScalarWhereInput[]
    OR?: promotionScalarWhereInput[]
    NOT?: promotionScalarWhereInput | promotionScalarWhereInput[]
    id?: IntFilter<"promotion"> | number
    hotel_id?: IntFilter<"promotion"> | number
    promotion_type?: StringFilter<"promotion"> | string
    discount_percentage?: FloatFilter<"promotion"> | number
    start_date?: DateTimeFilter<"promotion"> | Date | string
    end_date?: DateTimeFilter<"promotion"> | Date | string
  }

  export type reviewUpsertWithWhereUniqueWithoutHotelInput = {
    where: reviewWhereUniqueInput
    update: XOR<reviewUpdateWithoutHotelInput, reviewUncheckedUpdateWithoutHotelInput>
    create: XOR<reviewCreateWithoutHotelInput, reviewUncheckedCreateWithoutHotelInput>
  }

  export type reviewUpdateWithWhereUniqueWithoutHotelInput = {
    where: reviewWhereUniqueInput
    data: XOR<reviewUpdateWithoutHotelInput, reviewUncheckedUpdateWithoutHotelInput>
  }

  export type reviewUpdateManyWithWhereWithoutHotelInput = {
    where: reviewScalarWhereInput
    data: XOR<reviewUpdateManyMutationInput, reviewUncheckedUpdateManyWithoutHotelInput>
  }

  export type reviewScalarWhereInput = {
    AND?: reviewScalarWhereInput | reviewScalarWhereInput[]
    OR?: reviewScalarWhereInput[]
    NOT?: reviewScalarWhereInput | reviewScalarWhereInput[]
    id?: IntFilter<"review"> | number
    user_id?: IntFilter<"review"> | number
    hotel_id?: IntFilter<"review"> | number
    rating?: FloatFilter<"review"> | number
    comment?: StringFilter<"review"> | string
    review_date?: DateTimeFilter<"review"> | Date | string
  }

  export type room_amenityCreateWithoutRoomInput = {
    amenity_type: string
  }

  export type room_amenityUncheckedCreateWithoutRoomInput = {
    id?: number
    amenity_type: string
  }

  export type room_amenityCreateOrConnectWithoutRoomInput = {
    where: room_amenityWhereUniqueInput
    create: XOR<room_amenityCreateWithoutRoomInput, room_amenityUncheckedCreateWithoutRoomInput>
  }

  export type room_amenityCreateManyRoomInputEnvelope = {
    data: room_amenityCreateManyRoomInput | room_amenityCreateManyRoomInput[]
    skipDuplicates?: boolean
  }

  export type reservationCreateWithoutRoomInput = {
    check_in_date: Date | string
    check_out_date: Date | string
    status: string
    user: userCreateNestedOneWithoutReservationsInput
    services?: service_reservationCreateNestedManyWithoutReservationInput
    payment_records?: payment_recordCreateNestedManyWithoutReservationInput
  }

  export type reservationUncheckedCreateWithoutRoomInput = {
    id?: number
    user_id: number
    check_in_date: Date | string
    check_out_date: Date | string
    status: string
    services?: service_reservationUncheckedCreateNestedManyWithoutReservationInput
    payment_records?: payment_recordUncheckedCreateNestedManyWithoutReservationInput
  }

  export type reservationCreateOrConnectWithoutRoomInput = {
    where: reservationWhereUniqueInput
    create: XOR<reservationCreateWithoutRoomInput, reservationUncheckedCreateWithoutRoomInput>
  }

  export type reservationCreateManyRoomInputEnvelope = {
    data: reservationCreateManyRoomInput | reservationCreateManyRoomInput[]
    skipDuplicates?: boolean
  }

  export type hotelCreateWithoutRoomsInput = {
    name: string
    location: string
    description: string
    rating: number
    services?: serviceCreateNestedManyWithoutHotelInput
    promotions?: promotionCreateNestedManyWithoutHotelInput
    reviews?: reviewCreateNestedManyWithoutHotelInput
  }

  export type hotelUncheckedCreateWithoutRoomsInput = {
    id?: number
    name: string
    location: string
    description: string
    rating: number
    services?: serviceUncheckedCreateNestedManyWithoutHotelInput
    promotions?: promotionUncheckedCreateNestedManyWithoutHotelInput
    reviews?: reviewUncheckedCreateNestedManyWithoutHotelInput
  }

  export type hotelCreateOrConnectWithoutRoomsInput = {
    where: hotelWhereUniqueInput
    create: XOR<hotelCreateWithoutRoomsInput, hotelUncheckedCreateWithoutRoomsInput>
  }

  export type room_amenityUpsertWithWhereUniqueWithoutRoomInput = {
    where: room_amenityWhereUniqueInput
    update: XOR<room_amenityUpdateWithoutRoomInput, room_amenityUncheckedUpdateWithoutRoomInput>
    create: XOR<room_amenityCreateWithoutRoomInput, room_amenityUncheckedCreateWithoutRoomInput>
  }

  export type room_amenityUpdateWithWhereUniqueWithoutRoomInput = {
    where: room_amenityWhereUniqueInput
    data: XOR<room_amenityUpdateWithoutRoomInput, room_amenityUncheckedUpdateWithoutRoomInput>
  }

  export type room_amenityUpdateManyWithWhereWithoutRoomInput = {
    where: room_amenityScalarWhereInput
    data: XOR<room_amenityUpdateManyMutationInput, room_amenityUncheckedUpdateManyWithoutRoomInput>
  }

  export type room_amenityScalarWhereInput = {
    AND?: room_amenityScalarWhereInput | room_amenityScalarWhereInput[]
    OR?: room_amenityScalarWhereInput[]
    NOT?: room_amenityScalarWhereInput | room_amenityScalarWhereInput[]
    id?: IntFilter<"room_amenity"> | number
    room_id?: IntFilter<"room_amenity"> | number
    amenity_type?: StringFilter<"room_amenity"> | string
  }

  export type reservationUpsertWithWhereUniqueWithoutRoomInput = {
    where: reservationWhereUniqueInput
    update: XOR<reservationUpdateWithoutRoomInput, reservationUncheckedUpdateWithoutRoomInput>
    create: XOR<reservationCreateWithoutRoomInput, reservationUncheckedCreateWithoutRoomInput>
  }

  export type reservationUpdateWithWhereUniqueWithoutRoomInput = {
    where: reservationWhereUniqueInput
    data: XOR<reservationUpdateWithoutRoomInput, reservationUncheckedUpdateWithoutRoomInput>
  }

  export type reservationUpdateManyWithWhereWithoutRoomInput = {
    where: reservationScalarWhereInput
    data: XOR<reservationUpdateManyMutationInput, reservationUncheckedUpdateManyWithoutRoomInput>
  }

  export type reservationScalarWhereInput = {
    AND?: reservationScalarWhereInput | reservationScalarWhereInput[]
    OR?: reservationScalarWhereInput[]
    NOT?: reservationScalarWhereInput | reservationScalarWhereInput[]
    id?: IntFilter<"reservation"> | number
    user_id?: IntFilter<"reservation"> | number
    room_id?: IntFilter<"reservation"> | number
    check_in_date?: DateTimeFilter<"reservation"> | Date | string
    check_out_date?: DateTimeFilter<"reservation"> | Date | string
    status?: StringFilter<"reservation"> | string
  }

  export type hotelUpsertWithoutRoomsInput = {
    update: XOR<hotelUpdateWithoutRoomsInput, hotelUncheckedUpdateWithoutRoomsInput>
    create: XOR<hotelCreateWithoutRoomsInput, hotelUncheckedCreateWithoutRoomsInput>
    where?: hotelWhereInput
  }

  export type hotelUpdateToOneWithWhereWithoutRoomsInput = {
    where?: hotelWhereInput
    data: XOR<hotelUpdateWithoutRoomsInput, hotelUncheckedUpdateWithoutRoomsInput>
  }

  export type hotelUpdateWithoutRoomsInput = {
    name?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    rating?: FloatFieldUpdateOperationsInput | number
    services?: serviceUpdateManyWithoutHotelNestedInput
    promotions?: promotionUpdateManyWithoutHotelNestedInput
    reviews?: reviewUpdateManyWithoutHotelNestedInput
  }

  export type hotelUncheckedUpdateWithoutRoomsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    rating?: FloatFieldUpdateOperationsInput | number
    services?: serviceUncheckedUpdateManyWithoutHotelNestedInput
    promotions?: promotionUncheckedUpdateManyWithoutHotelNestedInput
    reviews?: reviewUncheckedUpdateManyWithoutHotelNestedInput
  }

  export type userCreateWithoutReservationsInput = {
    name: string
    email: string
    password: string
    phone: string
    reviews?: reviewCreateNestedManyWithoutUserInput
  }

  export type userUncheckedCreateWithoutReservationsInput = {
    id?: number
    name: string
    email: string
    password: string
    phone: string
    reviews?: reviewUncheckedCreateNestedManyWithoutUserInput
  }

  export type userCreateOrConnectWithoutReservationsInput = {
    where: userWhereUniqueInput
    create: XOR<userCreateWithoutReservationsInput, userUncheckedCreateWithoutReservationsInput>
  }

  export type roomCreateWithoutReservationsInput = {
    room_type: string
    roomNumber: number
    price: number
    availability: boolean
    amenities?: room_amenityCreateNestedManyWithoutRoomInput
    hotel: hotelCreateNestedOneWithoutRoomsInput
  }

  export type roomUncheckedCreateWithoutReservationsInput = {
    id?: number
    hotel_id: number
    room_type: string
    roomNumber: number
    price: number
    availability: boolean
    amenities?: room_amenityUncheckedCreateNestedManyWithoutRoomInput
  }

  export type roomCreateOrConnectWithoutReservationsInput = {
    where: roomWhereUniqueInput
    create: XOR<roomCreateWithoutReservationsInput, roomUncheckedCreateWithoutReservationsInput>
  }

  export type service_reservationCreateWithoutReservationInput = {
    quantity: number
    price: number
    service: serviceCreateNestedOneWithoutReservationsInput
  }

  export type service_reservationUncheckedCreateWithoutReservationInput = {
    id?: number
    service_id: number
    quantity: number
    price: number
  }

  export type service_reservationCreateOrConnectWithoutReservationInput = {
    where: service_reservationWhereUniqueInput
    create: XOR<service_reservationCreateWithoutReservationInput, service_reservationUncheckedCreateWithoutReservationInput>
  }

  export type service_reservationCreateManyReservationInputEnvelope = {
    data: service_reservationCreateManyReservationInput | service_reservationCreateManyReservationInput[]
    skipDuplicates?: boolean
  }

  export type payment_recordCreateWithoutReservationInput = {
    amount: number
    payment_date: Date | string
    payment_method: string
  }

  export type payment_recordUncheckedCreateWithoutReservationInput = {
    id?: number
    amount: number
    payment_date: Date | string
    payment_method: string
  }

  export type payment_recordCreateOrConnectWithoutReservationInput = {
    where: payment_recordWhereUniqueInput
    create: XOR<payment_recordCreateWithoutReservationInput, payment_recordUncheckedCreateWithoutReservationInput>
  }

  export type payment_recordCreateManyReservationInputEnvelope = {
    data: payment_recordCreateManyReservationInput | payment_recordCreateManyReservationInput[]
    skipDuplicates?: boolean
  }

  export type userUpsertWithoutReservationsInput = {
    update: XOR<userUpdateWithoutReservationsInput, userUncheckedUpdateWithoutReservationsInput>
    create: XOR<userCreateWithoutReservationsInput, userUncheckedCreateWithoutReservationsInput>
    where?: userWhereInput
  }

  export type userUpdateToOneWithWhereWithoutReservationsInput = {
    where?: userWhereInput
    data: XOR<userUpdateWithoutReservationsInput, userUncheckedUpdateWithoutReservationsInput>
  }

  export type userUpdateWithoutReservationsInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    reviews?: reviewUpdateManyWithoutUserNestedInput
  }

  export type userUncheckedUpdateWithoutReservationsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    reviews?: reviewUncheckedUpdateManyWithoutUserNestedInput
  }

  export type roomUpsertWithoutReservationsInput = {
    update: XOR<roomUpdateWithoutReservationsInput, roomUncheckedUpdateWithoutReservationsInput>
    create: XOR<roomCreateWithoutReservationsInput, roomUncheckedCreateWithoutReservationsInput>
    where?: roomWhereInput
  }

  export type roomUpdateToOneWithWhereWithoutReservationsInput = {
    where?: roomWhereInput
    data: XOR<roomUpdateWithoutReservationsInput, roomUncheckedUpdateWithoutReservationsInput>
  }

  export type roomUpdateWithoutReservationsInput = {
    room_type?: StringFieldUpdateOperationsInput | string
    roomNumber?: IntFieldUpdateOperationsInput | number
    price?: FloatFieldUpdateOperationsInput | number
    availability?: BoolFieldUpdateOperationsInput | boolean
    amenities?: room_amenityUpdateManyWithoutRoomNestedInput
    hotel?: hotelUpdateOneRequiredWithoutRoomsNestedInput
  }

  export type roomUncheckedUpdateWithoutReservationsInput = {
    id?: IntFieldUpdateOperationsInput | number
    hotel_id?: IntFieldUpdateOperationsInput | number
    room_type?: StringFieldUpdateOperationsInput | string
    roomNumber?: IntFieldUpdateOperationsInput | number
    price?: FloatFieldUpdateOperationsInput | number
    availability?: BoolFieldUpdateOperationsInput | boolean
    amenities?: room_amenityUncheckedUpdateManyWithoutRoomNestedInput
  }

  export type service_reservationUpsertWithWhereUniqueWithoutReservationInput = {
    where: service_reservationWhereUniqueInput
    update: XOR<service_reservationUpdateWithoutReservationInput, service_reservationUncheckedUpdateWithoutReservationInput>
    create: XOR<service_reservationCreateWithoutReservationInput, service_reservationUncheckedCreateWithoutReservationInput>
  }

  export type service_reservationUpdateWithWhereUniqueWithoutReservationInput = {
    where: service_reservationWhereUniqueInput
    data: XOR<service_reservationUpdateWithoutReservationInput, service_reservationUncheckedUpdateWithoutReservationInput>
  }

  export type service_reservationUpdateManyWithWhereWithoutReservationInput = {
    where: service_reservationScalarWhereInput
    data: XOR<service_reservationUpdateManyMutationInput, service_reservationUncheckedUpdateManyWithoutReservationInput>
  }

  export type service_reservationScalarWhereInput = {
    AND?: service_reservationScalarWhereInput | service_reservationScalarWhereInput[]
    OR?: service_reservationScalarWhereInput[]
    NOT?: service_reservationScalarWhereInput | service_reservationScalarWhereInput[]
    id?: IntFilter<"service_reservation"> | number
    reservation_id?: IntFilter<"service_reservation"> | number
    service_id?: IntFilter<"service_reservation"> | number
    quantity?: IntFilter<"service_reservation"> | number
    price?: FloatFilter<"service_reservation"> | number
  }

  export type payment_recordUpsertWithWhereUniqueWithoutReservationInput = {
    where: payment_recordWhereUniqueInput
    update: XOR<payment_recordUpdateWithoutReservationInput, payment_recordUncheckedUpdateWithoutReservationInput>
    create: XOR<payment_recordCreateWithoutReservationInput, payment_recordUncheckedCreateWithoutReservationInput>
  }

  export type payment_recordUpdateWithWhereUniqueWithoutReservationInput = {
    where: payment_recordWhereUniqueInput
    data: XOR<payment_recordUpdateWithoutReservationInput, payment_recordUncheckedUpdateWithoutReservationInput>
  }

  export type payment_recordUpdateManyWithWhereWithoutReservationInput = {
    where: payment_recordScalarWhereInput
    data: XOR<payment_recordUpdateManyMutationInput, payment_recordUncheckedUpdateManyWithoutReservationInput>
  }

  export type payment_recordScalarWhereInput = {
    AND?: payment_recordScalarWhereInput | payment_recordScalarWhereInput[]
    OR?: payment_recordScalarWhereInput[]
    NOT?: payment_recordScalarWhereInput | payment_recordScalarWhereInput[]
    id?: IntFilter<"payment_record"> | number
    reservation_id?: IntFilter<"payment_record"> | number
    amount?: FloatFilter<"payment_record"> | number
    payment_date?: DateTimeFilter<"payment_record"> | Date | string
    payment_method?: StringFilter<"payment_record"> | string
  }

  export type reservationCreateWithoutUserInput = {
    check_in_date: Date | string
    check_out_date: Date | string
    status: string
    room: roomCreateNestedOneWithoutReservationsInput
    services?: service_reservationCreateNestedManyWithoutReservationInput
    payment_records?: payment_recordCreateNestedManyWithoutReservationInput
  }

  export type reservationUncheckedCreateWithoutUserInput = {
    id?: number
    room_id: number
    check_in_date: Date | string
    check_out_date: Date | string
    status: string
    services?: service_reservationUncheckedCreateNestedManyWithoutReservationInput
    payment_records?: payment_recordUncheckedCreateNestedManyWithoutReservationInput
  }

  export type reservationCreateOrConnectWithoutUserInput = {
    where: reservationWhereUniqueInput
    create: XOR<reservationCreateWithoutUserInput, reservationUncheckedCreateWithoutUserInput>
  }

  export type reservationCreateManyUserInputEnvelope = {
    data: reservationCreateManyUserInput | reservationCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type reviewCreateWithoutUserInput = {
    rating: number
    comment: string
    review_date: Date | string
    hotel: hotelCreateNestedOneWithoutReviewsInput
  }

  export type reviewUncheckedCreateWithoutUserInput = {
    id?: number
    hotel_id: number
    rating: number
    comment: string
    review_date: Date | string
  }

  export type reviewCreateOrConnectWithoutUserInput = {
    where: reviewWhereUniqueInput
    create: XOR<reviewCreateWithoutUserInput, reviewUncheckedCreateWithoutUserInput>
  }

  export type reviewCreateManyUserInputEnvelope = {
    data: reviewCreateManyUserInput | reviewCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type reservationUpsertWithWhereUniqueWithoutUserInput = {
    where: reservationWhereUniqueInput
    update: XOR<reservationUpdateWithoutUserInput, reservationUncheckedUpdateWithoutUserInput>
    create: XOR<reservationCreateWithoutUserInput, reservationUncheckedCreateWithoutUserInput>
  }

  export type reservationUpdateWithWhereUniqueWithoutUserInput = {
    where: reservationWhereUniqueInput
    data: XOR<reservationUpdateWithoutUserInput, reservationUncheckedUpdateWithoutUserInput>
  }

  export type reservationUpdateManyWithWhereWithoutUserInput = {
    where: reservationScalarWhereInput
    data: XOR<reservationUpdateManyMutationInput, reservationUncheckedUpdateManyWithoutUserInput>
  }

  export type reviewUpsertWithWhereUniqueWithoutUserInput = {
    where: reviewWhereUniqueInput
    update: XOR<reviewUpdateWithoutUserInput, reviewUncheckedUpdateWithoutUserInput>
    create: XOR<reviewCreateWithoutUserInput, reviewUncheckedCreateWithoutUserInput>
  }

  export type reviewUpdateWithWhereUniqueWithoutUserInput = {
    where: reviewWhereUniqueInput
    data: XOR<reviewUpdateWithoutUserInput, reviewUncheckedUpdateWithoutUserInput>
  }

  export type reviewUpdateManyWithWhereWithoutUserInput = {
    where: reviewScalarWhereInput
    data: XOR<reviewUpdateManyMutationInput, reviewUncheckedUpdateManyWithoutUserInput>
  }

  export type hotelCreateWithoutServicesInput = {
    name: string
    location: string
    description: string
    rating: number
    rooms?: roomCreateNestedManyWithoutHotelInput
    promotions?: promotionCreateNestedManyWithoutHotelInput
    reviews?: reviewCreateNestedManyWithoutHotelInput
  }

  export type hotelUncheckedCreateWithoutServicesInput = {
    id?: number
    name: string
    location: string
    description: string
    rating: number
    rooms?: roomUncheckedCreateNestedManyWithoutHotelInput
    promotions?: promotionUncheckedCreateNestedManyWithoutHotelInput
    reviews?: reviewUncheckedCreateNestedManyWithoutHotelInput
  }

  export type hotelCreateOrConnectWithoutServicesInput = {
    where: hotelWhereUniqueInput
    create: XOR<hotelCreateWithoutServicesInput, hotelUncheckedCreateWithoutServicesInput>
  }

  export type service_reservationCreateWithoutServiceInput = {
    quantity: number
    price: number
    reservation: reservationCreateNestedOneWithoutServicesInput
  }

  export type service_reservationUncheckedCreateWithoutServiceInput = {
    id?: number
    reservation_id: number
    quantity: number
    price: number
  }

  export type service_reservationCreateOrConnectWithoutServiceInput = {
    where: service_reservationWhereUniqueInput
    create: XOR<service_reservationCreateWithoutServiceInput, service_reservationUncheckedCreateWithoutServiceInput>
  }

  export type service_reservationCreateManyServiceInputEnvelope = {
    data: service_reservationCreateManyServiceInput | service_reservationCreateManyServiceInput[]
    skipDuplicates?: boolean
  }

  export type hotelUpsertWithoutServicesInput = {
    update: XOR<hotelUpdateWithoutServicesInput, hotelUncheckedUpdateWithoutServicesInput>
    create: XOR<hotelCreateWithoutServicesInput, hotelUncheckedCreateWithoutServicesInput>
    where?: hotelWhereInput
  }

  export type hotelUpdateToOneWithWhereWithoutServicesInput = {
    where?: hotelWhereInput
    data: XOR<hotelUpdateWithoutServicesInput, hotelUncheckedUpdateWithoutServicesInput>
  }

  export type hotelUpdateWithoutServicesInput = {
    name?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    rating?: FloatFieldUpdateOperationsInput | number
    rooms?: roomUpdateManyWithoutHotelNestedInput
    promotions?: promotionUpdateManyWithoutHotelNestedInput
    reviews?: reviewUpdateManyWithoutHotelNestedInput
  }

  export type hotelUncheckedUpdateWithoutServicesInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    rating?: FloatFieldUpdateOperationsInput | number
    rooms?: roomUncheckedUpdateManyWithoutHotelNestedInput
    promotions?: promotionUncheckedUpdateManyWithoutHotelNestedInput
    reviews?: reviewUncheckedUpdateManyWithoutHotelNestedInput
  }

  export type service_reservationUpsertWithWhereUniqueWithoutServiceInput = {
    where: service_reservationWhereUniqueInput
    update: XOR<service_reservationUpdateWithoutServiceInput, service_reservationUncheckedUpdateWithoutServiceInput>
    create: XOR<service_reservationCreateWithoutServiceInput, service_reservationUncheckedCreateWithoutServiceInput>
  }

  export type service_reservationUpdateWithWhereUniqueWithoutServiceInput = {
    where: service_reservationWhereUniqueInput
    data: XOR<service_reservationUpdateWithoutServiceInput, service_reservationUncheckedUpdateWithoutServiceInput>
  }

  export type service_reservationUpdateManyWithWhereWithoutServiceInput = {
    where: service_reservationScalarWhereInput
    data: XOR<service_reservationUpdateManyMutationInput, service_reservationUncheckedUpdateManyWithoutServiceInput>
  }

  export type reservationCreateWithoutServicesInput = {
    check_in_date: Date | string
    check_out_date: Date | string
    status: string
    user: userCreateNestedOneWithoutReservationsInput
    room: roomCreateNestedOneWithoutReservationsInput
    payment_records?: payment_recordCreateNestedManyWithoutReservationInput
  }

  export type reservationUncheckedCreateWithoutServicesInput = {
    id?: number
    user_id: number
    room_id: number
    check_in_date: Date | string
    check_out_date: Date | string
    status: string
    payment_records?: payment_recordUncheckedCreateNestedManyWithoutReservationInput
  }

  export type reservationCreateOrConnectWithoutServicesInput = {
    where: reservationWhereUniqueInput
    create: XOR<reservationCreateWithoutServicesInput, reservationUncheckedCreateWithoutServicesInput>
  }

  export type serviceCreateWithoutReservationsInput = {
    service_type: string
    price: number
    hotel: hotelCreateNestedOneWithoutServicesInput
  }

  export type serviceUncheckedCreateWithoutReservationsInput = {
    id?: number
    hotel_id: number
    service_type: string
    price: number
  }

  export type serviceCreateOrConnectWithoutReservationsInput = {
    where: serviceWhereUniqueInput
    create: XOR<serviceCreateWithoutReservationsInput, serviceUncheckedCreateWithoutReservationsInput>
  }

  export type reservationUpsertWithoutServicesInput = {
    update: XOR<reservationUpdateWithoutServicesInput, reservationUncheckedUpdateWithoutServicesInput>
    create: XOR<reservationCreateWithoutServicesInput, reservationUncheckedCreateWithoutServicesInput>
    where?: reservationWhereInput
  }

  export type reservationUpdateToOneWithWhereWithoutServicesInput = {
    where?: reservationWhereInput
    data: XOR<reservationUpdateWithoutServicesInput, reservationUncheckedUpdateWithoutServicesInput>
  }

  export type reservationUpdateWithoutServicesInput = {
    check_in_date?: DateTimeFieldUpdateOperationsInput | Date | string
    check_out_date?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    user?: userUpdateOneRequiredWithoutReservationsNestedInput
    room?: roomUpdateOneRequiredWithoutReservationsNestedInput
    payment_records?: payment_recordUpdateManyWithoutReservationNestedInput
  }

  export type reservationUncheckedUpdateWithoutServicesInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
    room_id?: IntFieldUpdateOperationsInput | number
    check_in_date?: DateTimeFieldUpdateOperationsInput | Date | string
    check_out_date?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    payment_records?: payment_recordUncheckedUpdateManyWithoutReservationNestedInput
  }

  export type serviceUpsertWithoutReservationsInput = {
    update: XOR<serviceUpdateWithoutReservationsInput, serviceUncheckedUpdateWithoutReservationsInput>
    create: XOR<serviceCreateWithoutReservationsInput, serviceUncheckedCreateWithoutReservationsInput>
    where?: serviceWhereInput
  }

  export type serviceUpdateToOneWithWhereWithoutReservationsInput = {
    where?: serviceWhereInput
    data: XOR<serviceUpdateWithoutReservationsInput, serviceUncheckedUpdateWithoutReservationsInput>
  }

  export type serviceUpdateWithoutReservationsInput = {
    service_type?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    hotel?: hotelUpdateOneRequiredWithoutServicesNestedInput
  }

  export type serviceUncheckedUpdateWithoutReservationsInput = {
    id?: IntFieldUpdateOperationsInput | number
    hotel_id?: IntFieldUpdateOperationsInput | number
    service_type?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
  }

  export type userCreateWithoutReviewsInput = {
    name: string
    email: string
    password: string
    phone: string
    reservations?: reservationCreateNestedManyWithoutUserInput
  }

  export type userUncheckedCreateWithoutReviewsInput = {
    id?: number
    name: string
    email: string
    password: string
    phone: string
    reservations?: reservationUncheckedCreateNestedManyWithoutUserInput
  }

  export type userCreateOrConnectWithoutReviewsInput = {
    where: userWhereUniqueInput
    create: XOR<userCreateWithoutReviewsInput, userUncheckedCreateWithoutReviewsInput>
  }

  export type hotelCreateWithoutReviewsInput = {
    name: string
    location: string
    description: string
    rating: number
    rooms?: roomCreateNestedManyWithoutHotelInput
    services?: serviceCreateNestedManyWithoutHotelInput
    promotions?: promotionCreateNestedManyWithoutHotelInput
  }

  export type hotelUncheckedCreateWithoutReviewsInput = {
    id?: number
    name: string
    location: string
    description: string
    rating: number
    rooms?: roomUncheckedCreateNestedManyWithoutHotelInput
    services?: serviceUncheckedCreateNestedManyWithoutHotelInput
    promotions?: promotionUncheckedCreateNestedManyWithoutHotelInput
  }

  export type hotelCreateOrConnectWithoutReviewsInput = {
    where: hotelWhereUniqueInput
    create: XOR<hotelCreateWithoutReviewsInput, hotelUncheckedCreateWithoutReviewsInput>
  }

  export type userUpsertWithoutReviewsInput = {
    update: XOR<userUpdateWithoutReviewsInput, userUncheckedUpdateWithoutReviewsInput>
    create: XOR<userCreateWithoutReviewsInput, userUncheckedCreateWithoutReviewsInput>
    where?: userWhereInput
  }

  export type userUpdateToOneWithWhereWithoutReviewsInput = {
    where?: userWhereInput
    data: XOR<userUpdateWithoutReviewsInput, userUncheckedUpdateWithoutReviewsInput>
  }

  export type userUpdateWithoutReviewsInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    reservations?: reservationUpdateManyWithoutUserNestedInput
  }

  export type userUncheckedUpdateWithoutReviewsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    reservations?: reservationUncheckedUpdateManyWithoutUserNestedInput
  }

  export type hotelUpsertWithoutReviewsInput = {
    update: XOR<hotelUpdateWithoutReviewsInput, hotelUncheckedUpdateWithoutReviewsInput>
    create: XOR<hotelCreateWithoutReviewsInput, hotelUncheckedCreateWithoutReviewsInput>
    where?: hotelWhereInput
  }

  export type hotelUpdateToOneWithWhereWithoutReviewsInput = {
    where?: hotelWhereInput
    data: XOR<hotelUpdateWithoutReviewsInput, hotelUncheckedUpdateWithoutReviewsInput>
  }

  export type hotelUpdateWithoutReviewsInput = {
    name?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    rating?: FloatFieldUpdateOperationsInput | number
    rooms?: roomUpdateManyWithoutHotelNestedInput
    services?: serviceUpdateManyWithoutHotelNestedInput
    promotions?: promotionUpdateManyWithoutHotelNestedInput
  }

  export type hotelUncheckedUpdateWithoutReviewsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    rating?: FloatFieldUpdateOperationsInput | number
    rooms?: roomUncheckedUpdateManyWithoutHotelNestedInput
    services?: serviceUncheckedUpdateManyWithoutHotelNestedInput
    promotions?: promotionUncheckedUpdateManyWithoutHotelNestedInput
  }

  export type hotelCreateWithoutPromotionsInput = {
    name: string
    location: string
    description: string
    rating: number
    rooms?: roomCreateNestedManyWithoutHotelInput
    services?: serviceCreateNestedManyWithoutHotelInput
    reviews?: reviewCreateNestedManyWithoutHotelInput
  }

  export type hotelUncheckedCreateWithoutPromotionsInput = {
    id?: number
    name: string
    location: string
    description: string
    rating: number
    rooms?: roomUncheckedCreateNestedManyWithoutHotelInput
    services?: serviceUncheckedCreateNestedManyWithoutHotelInput
    reviews?: reviewUncheckedCreateNestedManyWithoutHotelInput
  }

  export type hotelCreateOrConnectWithoutPromotionsInput = {
    where: hotelWhereUniqueInput
    create: XOR<hotelCreateWithoutPromotionsInput, hotelUncheckedCreateWithoutPromotionsInput>
  }

  export type hotelUpsertWithoutPromotionsInput = {
    update: XOR<hotelUpdateWithoutPromotionsInput, hotelUncheckedUpdateWithoutPromotionsInput>
    create: XOR<hotelCreateWithoutPromotionsInput, hotelUncheckedCreateWithoutPromotionsInput>
    where?: hotelWhereInput
  }

  export type hotelUpdateToOneWithWhereWithoutPromotionsInput = {
    where?: hotelWhereInput
    data: XOR<hotelUpdateWithoutPromotionsInput, hotelUncheckedUpdateWithoutPromotionsInput>
  }

  export type hotelUpdateWithoutPromotionsInput = {
    name?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    rating?: FloatFieldUpdateOperationsInput | number
    rooms?: roomUpdateManyWithoutHotelNestedInput
    services?: serviceUpdateManyWithoutHotelNestedInput
    reviews?: reviewUpdateManyWithoutHotelNestedInput
  }

  export type hotelUncheckedUpdateWithoutPromotionsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    rating?: FloatFieldUpdateOperationsInput | number
    rooms?: roomUncheckedUpdateManyWithoutHotelNestedInput
    services?: serviceUncheckedUpdateManyWithoutHotelNestedInput
    reviews?: reviewUncheckedUpdateManyWithoutHotelNestedInput
  }

  export type reservationCreateWithoutPayment_recordsInput = {
    check_in_date: Date | string
    check_out_date: Date | string
    status: string
    user: userCreateNestedOneWithoutReservationsInput
    room: roomCreateNestedOneWithoutReservationsInput
    services?: service_reservationCreateNestedManyWithoutReservationInput
  }

  export type reservationUncheckedCreateWithoutPayment_recordsInput = {
    id?: number
    user_id: number
    room_id: number
    check_in_date: Date | string
    check_out_date: Date | string
    status: string
    services?: service_reservationUncheckedCreateNestedManyWithoutReservationInput
  }

  export type reservationCreateOrConnectWithoutPayment_recordsInput = {
    where: reservationWhereUniqueInput
    create: XOR<reservationCreateWithoutPayment_recordsInput, reservationUncheckedCreateWithoutPayment_recordsInput>
  }

  export type reservationUpsertWithoutPayment_recordsInput = {
    update: XOR<reservationUpdateWithoutPayment_recordsInput, reservationUncheckedUpdateWithoutPayment_recordsInput>
    create: XOR<reservationCreateWithoutPayment_recordsInput, reservationUncheckedCreateWithoutPayment_recordsInput>
    where?: reservationWhereInput
  }

  export type reservationUpdateToOneWithWhereWithoutPayment_recordsInput = {
    where?: reservationWhereInput
    data: XOR<reservationUpdateWithoutPayment_recordsInput, reservationUncheckedUpdateWithoutPayment_recordsInput>
  }

  export type reservationUpdateWithoutPayment_recordsInput = {
    check_in_date?: DateTimeFieldUpdateOperationsInput | Date | string
    check_out_date?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    user?: userUpdateOneRequiredWithoutReservationsNestedInput
    room?: roomUpdateOneRequiredWithoutReservationsNestedInput
    services?: service_reservationUpdateManyWithoutReservationNestedInput
  }

  export type reservationUncheckedUpdateWithoutPayment_recordsInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
    room_id?: IntFieldUpdateOperationsInput | number
    check_in_date?: DateTimeFieldUpdateOperationsInput | Date | string
    check_out_date?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    services?: service_reservationUncheckedUpdateManyWithoutReservationNestedInput
  }

  export type roomCreateWithoutAmenitiesInput = {
    room_type: string
    roomNumber: number
    price: number
    availability: boolean
    reservations?: reservationCreateNestedManyWithoutRoomInput
    hotel: hotelCreateNestedOneWithoutRoomsInput
  }

  export type roomUncheckedCreateWithoutAmenitiesInput = {
    id?: number
    hotel_id: number
    room_type: string
    roomNumber: number
    price: number
    availability: boolean
    reservations?: reservationUncheckedCreateNestedManyWithoutRoomInput
  }

  export type roomCreateOrConnectWithoutAmenitiesInput = {
    where: roomWhereUniqueInput
    create: XOR<roomCreateWithoutAmenitiesInput, roomUncheckedCreateWithoutAmenitiesInput>
  }

  export type roomUpsertWithoutAmenitiesInput = {
    update: XOR<roomUpdateWithoutAmenitiesInput, roomUncheckedUpdateWithoutAmenitiesInput>
    create: XOR<roomCreateWithoutAmenitiesInput, roomUncheckedCreateWithoutAmenitiesInput>
    where?: roomWhereInput
  }

  export type roomUpdateToOneWithWhereWithoutAmenitiesInput = {
    where?: roomWhereInput
    data: XOR<roomUpdateWithoutAmenitiesInput, roomUncheckedUpdateWithoutAmenitiesInput>
  }

  export type roomUpdateWithoutAmenitiesInput = {
    room_type?: StringFieldUpdateOperationsInput | string
    roomNumber?: IntFieldUpdateOperationsInput | number
    price?: FloatFieldUpdateOperationsInput | number
    availability?: BoolFieldUpdateOperationsInput | boolean
    reservations?: reservationUpdateManyWithoutRoomNestedInput
    hotel?: hotelUpdateOneRequiredWithoutRoomsNestedInput
  }

  export type roomUncheckedUpdateWithoutAmenitiesInput = {
    id?: IntFieldUpdateOperationsInput | number
    hotel_id?: IntFieldUpdateOperationsInput | number
    room_type?: StringFieldUpdateOperationsInput | string
    roomNumber?: IntFieldUpdateOperationsInput | number
    price?: FloatFieldUpdateOperationsInput | number
    availability?: BoolFieldUpdateOperationsInput | boolean
    reservations?: reservationUncheckedUpdateManyWithoutRoomNestedInput
  }

  export type roomCreateManyHotelInput = {
    id?: number
    room_type: string
    roomNumber: number
    price: number
    availability: boolean
  }

  export type serviceCreateManyHotelInput = {
    id?: number
    service_type: string
    price: number
  }

  export type promotionCreateManyHotelInput = {
    id?: number
    promotion_type: string
    discount_percentage: number
    start_date: Date | string
    end_date: Date | string
  }

  export type reviewCreateManyHotelInput = {
    id?: number
    user_id: number
    rating: number
    comment: string
    review_date: Date | string
  }

  export type roomUpdateWithoutHotelInput = {
    room_type?: StringFieldUpdateOperationsInput | string
    roomNumber?: IntFieldUpdateOperationsInput | number
    price?: FloatFieldUpdateOperationsInput | number
    availability?: BoolFieldUpdateOperationsInput | boolean
    amenities?: room_amenityUpdateManyWithoutRoomNestedInput
    reservations?: reservationUpdateManyWithoutRoomNestedInput
  }

  export type roomUncheckedUpdateWithoutHotelInput = {
    id?: IntFieldUpdateOperationsInput | number
    room_type?: StringFieldUpdateOperationsInput | string
    roomNumber?: IntFieldUpdateOperationsInput | number
    price?: FloatFieldUpdateOperationsInput | number
    availability?: BoolFieldUpdateOperationsInput | boolean
    amenities?: room_amenityUncheckedUpdateManyWithoutRoomNestedInput
    reservations?: reservationUncheckedUpdateManyWithoutRoomNestedInput
  }

  export type roomUncheckedUpdateManyWithoutHotelInput = {
    id?: IntFieldUpdateOperationsInput | number
    room_type?: StringFieldUpdateOperationsInput | string
    roomNumber?: IntFieldUpdateOperationsInput | number
    price?: FloatFieldUpdateOperationsInput | number
    availability?: BoolFieldUpdateOperationsInput | boolean
  }

  export type serviceUpdateWithoutHotelInput = {
    service_type?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    reservations?: service_reservationUpdateManyWithoutServiceNestedInput
  }

  export type serviceUncheckedUpdateWithoutHotelInput = {
    id?: IntFieldUpdateOperationsInput | number
    service_type?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    reservations?: service_reservationUncheckedUpdateManyWithoutServiceNestedInput
  }

  export type serviceUncheckedUpdateManyWithoutHotelInput = {
    id?: IntFieldUpdateOperationsInput | number
    service_type?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
  }

  export type promotionUpdateWithoutHotelInput = {
    promotion_type?: StringFieldUpdateOperationsInput | string
    discount_percentage?: FloatFieldUpdateOperationsInput | number
    start_date?: DateTimeFieldUpdateOperationsInput | Date | string
    end_date?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type promotionUncheckedUpdateWithoutHotelInput = {
    id?: IntFieldUpdateOperationsInput | number
    promotion_type?: StringFieldUpdateOperationsInput | string
    discount_percentage?: FloatFieldUpdateOperationsInput | number
    start_date?: DateTimeFieldUpdateOperationsInput | Date | string
    end_date?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type promotionUncheckedUpdateManyWithoutHotelInput = {
    id?: IntFieldUpdateOperationsInput | number
    promotion_type?: StringFieldUpdateOperationsInput | string
    discount_percentage?: FloatFieldUpdateOperationsInput | number
    start_date?: DateTimeFieldUpdateOperationsInput | Date | string
    end_date?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type reviewUpdateWithoutHotelInput = {
    rating?: FloatFieldUpdateOperationsInput | number
    comment?: StringFieldUpdateOperationsInput | string
    review_date?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: userUpdateOneRequiredWithoutReviewsNestedInput
  }

  export type reviewUncheckedUpdateWithoutHotelInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
    rating?: FloatFieldUpdateOperationsInput | number
    comment?: StringFieldUpdateOperationsInput | string
    review_date?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type reviewUncheckedUpdateManyWithoutHotelInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
    rating?: FloatFieldUpdateOperationsInput | number
    comment?: StringFieldUpdateOperationsInput | string
    review_date?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type room_amenityCreateManyRoomInput = {
    id?: number
    amenity_type: string
  }

  export type reservationCreateManyRoomInput = {
    id?: number
    user_id: number
    check_in_date: Date | string
    check_out_date: Date | string
    status: string
  }

  export type room_amenityUpdateWithoutRoomInput = {
    amenity_type?: StringFieldUpdateOperationsInput | string
  }

  export type room_amenityUncheckedUpdateWithoutRoomInput = {
    id?: IntFieldUpdateOperationsInput | number
    amenity_type?: StringFieldUpdateOperationsInput | string
  }

  export type room_amenityUncheckedUpdateManyWithoutRoomInput = {
    id?: IntFieldUpdateOperationsInput | number
    amenity_type?: StringFieldUpdateOperationsInput | string
  }

  export type reservationUpdateWithoutRoomInput = {
    check_in_date?: DateTimeFieldUpdateOperationsInput | Date | string
    check_out_date?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    user?: userUpdateOneRequiredWithoutReservationsNestedInput
    services?: service_reservationUpdateManyWithoutReservationNestedInput
    payment_records?: payment_recordUpdateManyWithoutReservationNestedInput
  }

  export type reservationUncheckedUpdateWithoutRoomInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
    check_in_date?: DateTimeFieldUpdateOperationsInput | Date | string
    check_out_date?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    services?: service_reservationUncheckedUpdateManyWithoutReservationNestedInput
    payment_records?: payment_recordUncheckedUpdateManyWithoutReservationNestedInput
  }

  export type reservationUncheckedUpdateManyWithoutRoomInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
    check_in_date?: DateTimeFieldUpdateOperationsInput | Date | string
    check_out_date?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
  }

  export type service_reservationCreateManyReservationInput = {
    id?: number
    service_id: number
    quantity: number
    price: number
  }

  export type payment_recordCreateManyReservationInput = {
    id?: number
    amount: number
    payment_date: Date | string
    payment_method: string
  }

  export type service_reservationUpdateWithoutReservationInput = {
    quantity?: IntFieldUpdateOperationsInput | number
    price?: FloatFieldUpdateOperationsInput | number
    service?: serviceUpdateOneRequiredWithoutReservationsNestedInput
  }

  export type service_reservationUncheckedUpdateWithoutReservationInput = {
    id?: IntFieldUpdateOperationsInput | number
    service_id?: IntFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    price?: FloatFieldUpdateOperationsInput | number
  }

  export type service_reservationUncheckedUpdateManyWithoutReservationInput = {
    id?: IntFieldUpdateOperationsInput | number
    service_id?: IntFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    price?: FloatFieldUpdateOperationsInput | number
  }

  export type payment_recordUpdateWithoutReservationInput = {
    amount?: FloatFieldUpdateOperationsInput | number
    payment_date?: DateTimeFieldUpdateOperationsInput | Date | string
    payment_method?: StringFieldUpdateOperationsInput | string
  }

  export type payment_recordUncheckedUpdateWithoutReservationInput = {
    id?: IntFieldUpdateOperationsInput | number
    amount?: FloatFieldUpdateOperationsInput | number
    payment_date?: DateTimeFieldUpdateOperationsInput | Date | string
    payment_method?: StringFieldUpdateOperationsInput | string
  }

  export type payment_recordUncheckedUpdateManyWithoutReservationInput = {
    id?: IntFieldUpdateOperationsInput | number
    amount?: FloatFieldUpdateOperationsInput | number
    payment_date?: DateTimeFieldUpdateOperationsInput | Date | string
    payment_method?: StringFieldUpdateOperationsInput | string
  }

  export type reservationCreateManyUserInput = {
    id?: number
    room_id: number
    check_in_date: Date | string
    check_out_date: Date | string
    status: string
  }

  export type reviewCreateManyUserInput = {
    id?: number
    hotel_id: number
    rating: number
    comment: string
    review_date: Date | string
  }

  export type reservationUpdateWithoutUserInput = {
    check_in_date?: DateTimeFieldUpdateOperationsInput | Date | string
    check_out_date?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    room?: roomUpdateOneRequiredWithoutReservationsNestedInput
    services?: service_reservationUpdateManyWithoutReservationNestedInput
    payment_records?: payment_recordUpdateManyWithoutReservationNestedInput
  }

  export type reservationUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    room_id?: IntFieldUpdateOperationsInput | number
    check_in_date?: DateTimeFieldUpdateOperationsInput | Date | string
    check_out_date?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    services?: service_reservationUncheckedUpdateManyWithoutReservationNestedInput
    payment_records?: payment_recordUncheckedUpdateManyWithoutReservationNestedInput
  }

  export type reservationUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    room_id?: IntFieldUpdateOperationsInput | number
    check_in_date?: DateTimeFieldUpdateOperationsInput | Date | string
    check_out_date?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
  }

  export type reviewUpdateWithoutUserInput = {
    rating?: FloatFieldUpdateOperationsInput | number
    comment?: StringFieldUpdateOperationsInput | string
    review_date?: DateTimeFieldUpdateOperationsInput | Date | string
    hotel?: hotelUpdateOneRequiredWithoutReviewsNestedInput
  }

  export type reviewUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    hotel_id?: IntFieldUpdateOperationsInput | number
    rating?: FloatFieldUpdateOperationsInput | number
    comment?: StringFieldUpdateOperationsInput | string
    review_date?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type reviewUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    hotel_id?: IntFieldUpdateOperationsInput | number
    rating?: FloatFieldUpdateOperationsInput | number
    comment?: StringFieldUpdateOperationsInput | string
    review_date?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type service_reservationCreateManyServiceInput = {
    id?: number
    reservation_id: number
    quantity: number
    price: number
  }

  export type service_reservationUpdateWithoutServiceInput = {
    quantity?: IntFieldUpdateOperationsInput | number
    price?: FloatFieldUpdateOperationsInput | number
    reservation?: reservationUpdateOneRequiredWithoutServicesNestedInput
  }

  export type service_reservationUncheckedUpdateWithoutServiceInput = {
    id?: IntFieldUpdateOperationsInput | number
    reservation_id?: IntFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    price?: FloatFieldUpdateOperationsInput | number
  }

  export type service_reservationUncheckedUpdateManyWithoutServiceInput = {
    id?: IntFieldUpdateOperationsInput | number
    reservation_id?: IntFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    price?: FloatFieldUpdateOperationsInput | number
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use HotelCountOutputTypeDefaultArgs instead
     */
    export type HotelCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = HotelCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use RoomCountOutputTypeDefaultArgs instead
     */
    export type RoomCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = RoomCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ReservationCountOutputTypeDefaultArgs instead
     */
    export type ReservationCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ReservationCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserCountOutputTypeDefaultArgs instead
     */
    export type UserCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ServiceCountOutputTypeDefaultArgs instead
     */
    export type ServiceCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ServiceCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use hotelDefaultArgs instead
     */
    export type hotelArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = hotelDefaultArgs<ExtArgs>
    /**
     * @deprecated Use roomDefaultArgs instead
     */
    export type roomArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = roomDefaultArgs<ExtArgs>
    /**
     * @deprecated Use reservationDefaultArgs instead
     */
    export type reservationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = reservationDefaultArgs<ExtArgs>
    /**
     * @deprecated Use userDefaultArgs instead
     */
    export type userArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = userDefaultArgs<ExtArgs>
    /**
     * @deprecated Use serviceDefaultArgs instead
     */
    export type serviceArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = serviceDefaultArgs<ExtArgs>
    /**
     * @deprecated Use service_reservationDefaultArgs instead
     */
    export type service_reservationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = service_reservationDefaultArgs<ExtArgs>
    /**
     * @deprecated Use reviewDefaultArgs instead
     */
    export type reviewArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = reviewDefaultArgs<ExtArgs>
    /**
     * @deprecated Use promotionDefaultArgs instead
     */
    export type promotionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = promotionDefaultArgs<ExtArgs>
    /**
     * @deprecated Use payment_recordDefaultArgs instead
     */
    export type payment_recordArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = payment_recordDefaultArgs<ExtArgs>
    /**
     * @deprecated Use room_amenityDefaultArgs instead
     */
    export type room_amenityArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = room_amenityDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}